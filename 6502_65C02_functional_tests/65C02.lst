AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

3004 lines read, no errors in pass 1.
                        ;
                        ; 6 5 C 0 2   E X T E N D E D   O P C O D E S   T E S T
                        ;
                        ; Copyright (C) 2013-2017  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all additional 65C02 opcodes, addressing
                        ; modes and functionality not available in the NMOS version of the 6502.
                        ; The 6502_functional_test is a prerequisite to this test.
                        ; NMI, IRQ, BRK, STP & WAI are covered in the 6502_interrupt_test.
                        ; 
                        ; version 09-feb-2017
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -x -h0
                        ;                         |  |  |   |  |  no page headers in listing
                        ;                         |  |  |   |  65C02 extensions
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original 65C02 only!
                        ; Decimal ops will only be tested with valid BCD operands and the V flag will
                        ; be ignored as it is absolutely useless in decimal mode.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   19-jul-2013  1st version distributed for testing
                        ;   23-jul-2013  fixed BRA out of range due to larger trap macros
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    2
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        ;                added RAM integrity check
                        ;   16-aug-2013  added error report to standard output option
                        ;   23-aug-2015  change revoked
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;   28-aug-2015  fixed decimal adc/sbc immediate only testing carry
                        ;   09-feb-2017  fixed RMB/SMB tested when they shouldn't be tested
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended.
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $4e (78) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        
                        ;data_segment memory start address, $63 (99) consecutive Bytes required
                        ; + 12 Bytes at data_segment + $f9 (JMP indirect page cross test)
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 10kB of consecutive space required
                        ;                                   add 1 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;added WDC only opcodes WAI & STP (0=test as NOPs, >0=no test)
0001 =                  wdc_op = 1
                        
                        ;added Rockwell & WDC opcodes BBR, BBS, RMB & SMB
                        ;(0=test as NOPs, 1=full test, >1=no test) 
0001 =                  rkwl_wdc_op = 1
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                                noopt       ;do not take shortcuts
                                
                                include "configex.i65"
                        ; C O N F I G U R A T I O N
                        
                        ;65C02\configex.i65
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    3
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
                        ;Configuration for second processor's 65C02
                        ;Rockwell instructions, no WDC instructions
                        
                                include "..\config.i65"
                        ; C O N F I G U R A T I O N
                        
                        ;This overrides the default configuration options
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0000 =                  ROM_vectors = 0
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
1b00 =                  code_segment = $1B00
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
1900 =                  data_segment = code_segment - $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0001 =                  report = 1
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ; Reserve a byte at $0 to include it in the binary
0000 =                          org $0
0000 : 00                       ds 1
                        
                        
                        ;added WDC only opcodes WAI & STP (0=test as NOPs, >0=no test)
0001 =                  wdc_op = 1
                        
                        ;added Rockwell & WDC opcodes BBR, BBS, RMB & SMB
                        ;(0=test as NOPs, 1=full test, >1=no test)
0001 =                  rkwl_wdc_op = 1
                        
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    4
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    5
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    6
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    7
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    8
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_as      macro       ;testing result in accu & flags, save accu
                                    pha
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    pla
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    9
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                    ldx #11         ;reset modifiable RAM
                        ccs1\?      sta jxi_tab,x   ;JMP indirect page cross area
                                    dex
                                    bpl ccs1\?
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   10
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                                    
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000a :                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000a : 00               adfc    ds  1               ;carry flag before op
000b : 00               ad1     ds  1               ;operand 1 - accumulator
000c : 00               ad2     ds  1               ;operand 2 - memory / immediate
000d : 00               adrl    ds  1               ;expected result bits 0-7
000e : 00               adrh    ds  1               ;expected result bit 8 (carry)
000f : 00               adrf    ds  1               ;expected flags NV0000ZC (-V in decimal mode)
0010 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0011 :                  zp_bss
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   11
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

0011 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0015 : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0016 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001a : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
001e : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0022 : 1019             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0024 : 1119                     dw  abs1+1
0026 : 1219                     dw  abs1+2
0028 : 1319                     dw  abs1+3
002a : 1419                     dw  abs7f
002c : 1818             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
002e : 0519             indt    dw  abst            ;indirect pointer to store area in absolute memory
0030 : 0619                     dw  abst+1
0032 : 0719                     dw  abst+2
0034 : 0819                     dw  abst+3
0036 : 0d18             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0038 : 4719             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003a : 4819                     dw  absAN+1
003c : 4919                     dw  absAN+2
003e : 4a19                     dw  absAN+3
0040 : 4b19             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0042 : 4c19                     dw  absEO+1
0044 : 4d19                     dw  absEO+2
0046 : 4e19                     dw  absEO+3
0048 : 4319             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004a : 4419                     dw  absOR+1
004c : 4519                     dw  absOR+2
004e : 4619                     dw  absOR+3
                        ;add/subtract indirect pointers
0050 : 0519             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0052 : 0619             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0054 : 0618             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0056 : 0718             sbiy2   dw  sba2-$ff
0058 :                  zp_bss_end
                            
1900 =                          org data_segment
1900 : 0000             pg_x    ds  2               ;high JMP indirect address for page cross bug
1902 : 00               test_case   ds  1           ;current test number
1903 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
1905 :                  abst                        ;5 bytes store/modify test area
1905 : 00               ada2    ds  1               ;operand 2
1906 : 00               sba2    ds  1               ;operand 2 complemented for subtract
1907 : 000000                   ds  3               ;fill remaining bytes
190a :                  data_bss
                            if load_data_direct = 1
190a : 6900             ex_adci adc #0              ;execute immediate opcodes
190c : 60                       rts
190d : e900             ex_sbci sbc #0              ;execute immediate opcodes
190f : 60                       rts
                            else
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
1910 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
1914 : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
1915 : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
1919 :                  rASL                        ;expected result ASL & ROL -carry  
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   12
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

1919 : 86048200         rROL    db  $86,$04,$82,0   ; "
191d : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
1921 :                  rLSR                        ;expected result LSR & ROR -carry
1921 : 61412000         rROR    db  $61,$41,$20,0   ; "
1925 : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
1929 :                  fASL                        ;expected flags for shifts
1929 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
192d : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
1931 :                  fLSR
1931 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
1935 : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
1939 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
193e : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
1943 : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
1947 : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
194b : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
194f : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
1953 : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
1957 : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
195b : 00ff7f80         absrlo  db  0,$ff,$7f,$80
195f : 02800080         absflo  db  fz,fn,0,fn
1963 :                  data_bss_end
                        ;define area for page crossing JMP (abs) & JMP (abs,x) test
19f9 =                  jxi_tab equ data_segment + $100 - 7     ;JMP (jxi_tab,x) x=6
19fd =                  ji_tab  equ data_segment + $100 - 3     ;JMP (ji_tab+2)
1a00 =                  jxp_tab equ data_segment + $100         ;JMP (jxp_tab-255) x=255
                        
                        
                                code
1b00 =                          org code_segment
1b00 : d8               start   cld
1b01 : a2ff                     ldx #$ff
1b03 : 9a                       txs
1b04 : a900                     lda #0          ;*** test 0 = initialize
1b06 : 8d0219                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
1b09 : 20d447                   jsr report_init
                            endif
                            
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   13
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                                ldx #11         ;reset modifiable RAM
                        gcs1    sta jxi_tab,x   ;JMP indirect page cross area
                                dex
                                bpl gcs1
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
                        
                        
                        ;testing stack operations PHX PHY PLX PLY
1b1b : a999                     lda #$99        ;protect a
1b1d : a2ff                     ldx #$ff        ;initialize stack
1b1f : 9a                       txs
1b20 : a255                     ldx #$55
1b22 : da                       phx
1b23 : a2aa                     ldx #$aa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   14
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

1b25 : da                       phx
1b26 : ecfe01                   cpx $1fe        ;on stack ?
                                trap_ne
                        
1b2e : ba                       tsx
1b2f : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
                        
1b36 : 7a                       ply
1b37 : c0aa                     cpy #$aa        ;successful retreived from stack?
                                trap_ne
                        
1b3e : 7a                       ply
1b3f : c055                     cpy #$55
                                trap_ne
                        
1b46 : ccff01                   cpy $1ff        ;remains on stack?
                                trap_ne
                        
1b4e : ba                       tsx
1b4f : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
                        
                                
1b56 : a0a5                     ldy #$a5
1b58 : 5a                       phy
1b59 : a05a                     ldy #$5a
1b5b : 5a                       phy
1b5c : ccfe01                   cpy $1fe        ;on stack ?
                                trap_ne
                        
1b64 : ba                       tsx
1b65 : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
                        
1b6c : fa                       plx
1b6d : e05a                     cpx #$5a        ;successful retreived from stack?
                                trap_ne
                        
1b74 : fa                       plx
1b75 : e0a5                     cpx #$a5
                                trap_ne
                        
1b7c : ecff01                   cpx $1ff        ;remains on stack?
                                trap_ne
                        
1b84 : ba                       tsx
1b85 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
                        
1b8c : c999                     cmp #$99        ;unchanged?
                                trap_ne
                        
                                next_test            
                        
                                
                        ; test PHX does not alter flags or X but PLX does
1ba2 : a0aa                     ldy #$aa        ;protect y
                                set_x 1,$ff     ;push
                        
1baa : da                       phx
                                tst_x 1,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   15
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
                                set_x 0,0
                        
1bc3 : da                       phx
                                tst_x 0,0
                        
                                set_x $ff,$ff
                        
1bdc : da                       phx
                                tst_x $ff,$ff
                        
                                set_x 1,0
                        
1bf5 : da                       phx
                                tst_x 1,0
                        
                                set_x 0,$ff
                        
1c0e : da                       phx
                                tst_x 0,$ff
                        
                                set_x $ff,0
                        
1c27 : da                       phx
                                tst_x $ff,0
                        
                                set_x 0,$ff     ;pull
                        
1c40 : fa                       plx
                                tst_x $ff,$ff-zero
                        
                                set_x $ff,0
                        
1c59 : fa                       plx
                                tst_x 0,zero
                        
                                set_x $fe,$ff
                        
1c72 : fa                       plx
                                tst_x 1,$ff-zero-minus
                        
                                set_x 0,0
                        
1c8b : fa                       plx
                                tst_x $ff,minus
                        
                                set_x $ff,$ff
                        
1ca4 : fa                       plx
                                tst_x 0,$ff-minus
                        
                                set_x $fe,0
                        
1cbd : fa                       plx
                                tst_x 1,0
                        
1cd0 : c0aa                     cpy #$aa        ;Y unchanged
                                trap_ne
                        
                                next_test            
                        
                         
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   16
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        ; test PHY does not alter flags or Y but PLY does
1ce6 : a255                     ldx #$55        ;x & a protected
                                set_y 1,$ff     ;push
                        
1cee : 5a                       phy
                                tst_y 1,$ff
                        
                                set_y 0,0
                        
1d07 : 5a                       phy
                                tst_y 0,0
                        
                                set_y $ff,$ff
                        
1d20 : 5a                       phy
                                tst_y $ff,$ff
                        
                                set_y 1,0
                        
1d39 : 5a                       phy
                                tst_y 1,0
                        
                                set_y 0,$ff
                        
1d52 : 5a                       phy
                                tst_y 0,$ff
                        
                                set_y $ff,0
                        
1d6b : 5a                       phy
                                tst_y $ff,0
                        
                                set_y 0,$ff     ;pull
                        
1d84 : 7a                       ply
                                tst_y $ff,$ff-zero
                        
                                set_y $ff,0
                        
1d9d : 7a                       ply
                                tst_y 0,zero
                        
                                set_y $fe,$ff
                        
1db6 : 7a                       ply
                                tst_y 1,$ff-zero-minus
                        
                                set_y 0,0
                        
1dcf : 7a                       ply
                                tst_y $ff,minus
                        
                                set_y $ff,$ff
                        
1de8 : 7a                       ply
                                tst_y 0,$ff-minus
                        
                                set_y $fe,0
                        
1e01 : 7a                       ply
                                tst_y 1,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   17
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

1e14 : e055                     cpx #$55        ;x unchanged?
                                trap_ne
                        
                                next_test            
                        
                         
                        ; PC modifying instructions (BRA, BBR, BBS, 1, 2, 3 byte NOPs, JMP(abs,x))
                        ; testing unconditional branch BRA
                        
1e2a : a281                     ldx #$81        ;protect unused registers
1e2c : a07e                     ldy #$7e
                                set_a 0,$ff
                        
1e34 : 8003                     bra br1         ;branch should always be taken
                                trap 
                        
1e39 :                  br1
                                tst_a 0,$ff
                        
                                set_a $ff,0
                        
1e51 : 8003                     bra br2         ;branch should always be taken
                                trap 
                        
1e56 :                  br2
                                tst_a $ff,0
                        
1e68 : e081                     cpx #$81
                                trap_ne
                        
1e6f : c07e                     cpy #$7e
                                trap_ne
                        
                                next_test            
                        
                                
1e85 : a000                     ldy #0          ;branch range test  
1e87 : 8076                     bra bra0
                                
1e89 : c001             bra1    cpy #1
                                trap_ne         ;long range backward
                        
1e90 : c8                       iny        
1e91 : 8062                     bra bra2
                                        
1e93 : c003             bra3    cpy #3
                                trap_ne         ;long range backward
                        
1e9a : c8                       iny        
1e9b : 804e                     bra bra4
                                        
1e9d : c005             bra5    cpy #5
                                trap_ne         ;long range backward
                        
1ea4 : c8                       iny        
1ea5 : a000                     ldy #0
1ea7 : 8004                     bra brf0
                                
1ea9 : c8                       iny
1eaa : c8                       iny
1eab : c8                       iny
1eac : c8                       iny        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   18
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

1ead : 8003             brf0    bra brf1
                        
1eaf : c8                       iny
1eb0 : c8                       iny
1eb1 : c8                       iny
1eb2 : c8               brf1    iny        
1eb3 : 8002                     bra brf2
                                
1eb5 : c8                       iny
1eb6 : c8                       iny
1eb7 : c8               brf2    iny
1eb8 : c8                       iny        
1eb9 : 8001                     bra brf3
                                
1ebb : c8                       iny
1ebc : c8               brf3    iny
1ebd : c8                       iny
1ebe : c8                       iny        
1ebf : 8000                     bra brf4
                                
1ec1 : c8               brf4    iny
1ec2 : c8                       iny
1ec3 : c8                       iny
1ec4 : c8                       iny
1ec5 : c00a                     cpy #10
                                trap_ne     ;short range forward
                        
1ecc : 8012                     bra brb0
                        
1ece : 88               brb4    dey
1ecf : 88                       dey
1ed0 : 88                       dey
1ed1 : 88                       dey
1ed2 : 800e                     bra brb5        
                        
1ed4 : 88               brb3    dey
1ed5 : 88                       dey
1ed6 : 88                       dey
1ed7 : 80f5                     bra brb4        
                        
1ed9 : 88               brb2    dey
1eda : 88                       dey
1edb : 80f7                     bra brb3        
                        
1edd : 88               brb1    dey
1ede : 80f9                     bra brb2        
                        
1ee0 : 80fb             brb0    bra brb1        
                        
1ee2 : c000             brb5    cpy #0
                                trap_ne     ;short range backward
                        
1ee9 : 801e                     bra bra6
                        
1eeb : c004             bra4    cpy #4
                                trap_ne     ;long range forward
                        
1ef2 : c8                       iny        
1ef3 : 80a8                     bra bra5
                                        
1ef5 : c002             bra2    cpy #2
                                trap_ne     ;long range forward
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   19
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
1efc : c8                       iny        
1efd : 8094                     bra bra3
                                        
1eff : c000             bra0    cpy #0
                                trap_ne     ;long range forward
                        
1f06 : c8                       iny        
1f07 : 8080                     bra bra1
                                        
1f09 :                  bra6
                                next_test
                        
                                
                            if rkwl_wdc_op = 1
                        ; testing BBR & BBS
                        
                        bbt     macro           ;\1 = bitnum
                                lda #(1<<\1)    ;testing 1 bit on
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbr \1,zpt,fail1\?
                                bbs \1,zpt,ok1\?
                                trap            ;bbs branch not taken
                        fail1\?
                                trap            ;bbr branch taken
                        ok1\?   
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbr \1,zpt,fail2\?
                                bbs \1,zpt,ok2\?
                                trap            ;bbs branch not taken
                        fail2\? 
                                trap            ;bbr branch taken
                        ok2\?   
                                tst_a $cc,$ff
                                lda zpt
                                cmp #(1<<\1)
                                trap_ne         ;zp altered
                                lda #$ff-(1<<\1) ;testing 1 bit off
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbs \1,zpt,fail3\?
                                bbr \1,zpt,ok3\?
                                trap            ;bbr branch not taken
                        fail3\? 
                                trap            ;bbs branch taken
                        ok3\?   
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbs \1,zpt,fail4\?
                                bbr \1,zpt,ok4\?
                                trap            ;bbr branch not taken
                        fail4\? 
                                trap            ;bbs branch taken
                        ok4\?   
                                tst_a $cc,$ff
                                lda zpt
                                cmp #$ff-(1<<\1)
                                trap_ne         ;zp altered
                                endm
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   20
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

1f18 : a211                     ldx #$11        ;test bbr/bbs integrity
1f1a : a022                     ldy #$22
                                bbt 0
                        
                                bbt 1
                        
                                bbt 2
                        
                                bbt 3
                        
                                bbt 4
                        
                                bbt 5
                        
                                bbt 6
                        
                                bbt 7
                        
246c : e011                     cpx #$11
                                trap_ne         ;x overwritten
                        
2473 : c022                     cpy #$22
                                trap_ne         ;y overwritten
                        
                                next_test 
                        
                        
                        bbrc    macro           ;\1 = bitnum
                                bbr \1,zpt,skip\?
                                eor #(1<<\1)       
                        skip\?
                                endm
                        bbsc    macro           ;\1 = bitnum
                                bbs \1,zpt,skip\?
                                eor #(1<<\1)       
                        skip\?
                                endm
                        
2489 : a900                     lda #0          ;combined bit test
248b : 850a                     sta zpt
248d : a900             bbcl    lda #0
                                bbrc 0
                        
                                bbrc 1
                        
                                bbrc 2
                        
                                bbrc 3
                        
                                bbrc 4
                        
                                bbrc 5
                        
                                bbrc 6
                        
                                bbrc 7
                        
24b7 : 450a                     eor zpt
                                trap_ne         ;failed bbr bitnum in accu       
                        
24be : a9ff                     lda #$ff
                                bbsc 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   21
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
                                bbsc 1
                        
                                bbsc 2
                        
                                bbsc 3
                        
                                bbsc 4
                        
                                bbsc 5
                        
                                bbsc 6
                        
                                bbsc 7
                        
24e8 : 450a                     eor zpt
                                trap_ne         ;failed bbs bitnum in accu       
                        
24ef : e60a                     inc zpt
24f1 : d09a                     bne bbcl
                                next_test            
                        
                            endif
                            
                        ; testing NOP
                        
                        nop_test    macro       ;\1 = opcode, \2 = # of bytes
                                    ldy #$42
                                    ldx #4-\2
                                    db  \1          ;test nop length
                                if \2 = 1
                                    dex
                                    dex
                                endif
                                if \2 = 2
                                    iny
                                    dex
                                endif
                                if \2 = 3
                                    iny
                                    iny
                                endif
                                    dex
                                    trap_ne         ;wrong number of bytes
                                    set_a $ff-\1,0
                                    db  \1          ;test nop integrity - flags off
                                    nop
                                    nop
                                    tst_a $ff-\1,0
                                    set_a $aa-\1,$ff
                                    db  \1          ;test nop integrity - flags on
                                    nop
                                    nop
                                    tst_a $aa-\1,$ff
                                    cpy #$42
                                    trap_ne         ;y changed
                                    cpx #0
                                    trap_ne         ;x changed
                                    endm
                                    
                                nop_test $02,2
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   22
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                nop_test $22,2
                        
                                nop_test $42,2
                        
                                nop_test $62,2
                        
                                nop_test $82,2
                        
                                nop_test $c2,2
                        
                                nop_test $e2,2
                        
                                nop_test $44,2
                        
                                nop_test $54,2
                        
                                nop_test $d4,2
                        
                                nop_test $f4,2
                        
                                nop_test $5c,3
                        
                                nop_test $dc,3
                        
                                nop_test $fc,3
                        
                                nop_test $03,1
                        
                                nop_test $13,1
                        
                                nop_test $23,1
                        
                                nop_test $33,1
                        
                                nop_test $43,1
                        
                                nop_test $53,1
                        
                                nop_test $63,1
                        
                                nop_test $73,1
                        
                                nop_test $83,1
                        
                                nop_test $93,1
                        
                                nop_test $a3,1
                        
                                nop_test $b3,1
                        
                                nop_test $c3,1
                        
                                nop_test $d3,1
                        
                                nop_test $e3,1
                        
                                nop_test $f3,1
                        
                                nop_test $0b,1
                        
                                nop_test $1b,1
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   23
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                nop_test $2b,1
                        
                                nop_test $3b,1
                        
                                nop_test $4b,1
                        
                                nop_test $5b,1
                        
                                nop_test $6b,1
                        
                                nop_test $7b,1
                        
                                nop_test $8b,1
                        
                                nop_test $9b,1
                        
                                nop_test $ab,1
                        
                                nop_test $bb,1
                        
                                nop_test $eb,1
                        
                                nop_test $fb,1
                        
                            if rkwl_wdc_op = 0      ;NOPs not available on Rockwell & WDC 65C02
                                nop_test $07,1
                                nop_test $17,1
                                nop_test $27,1
                                nop_test $37,1
                                nop_test $47,1
                                nop_test $57,1
                                nop_test $67,1
                                nop_test $77,1
                                nop_test $87,1
                                nop_test $97,1
                                nop_test $a7,1
                                nop_test $b7,1
                                nop_test $c7,1
                                nop_test $d7,1
                                nop_test $e7,1
                                nop_test $f7,1
                                nop_test $0f,1
                                nop_test $1f,1
                                nop_test $2f,1
                                nop_test $3f,1
                                nop_test $4f,1
                                nop_test $5f,1
                                nop_test $6f,1
                                nop_test $7f,1
                                nop_test $8f,1
                                nop_test $9f,1
                                nop_test $af,1
                                nop_test $bf,1
                                nop_test $cf,1
                                nop_test $df,1
                                nop_test $ef,1
                                nop_test $ff,1
                            endif
                            if  wdc_op = 0          ;NOPs not available on WDC 65C02 (WAI, STP)
                                nop_test $cb,1
                                nop_test $db,1
                            endif
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   24
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                next_test
                        
                                    
                        ; jump indirect (test page cross bug is fixed)
32fd : a203                     ldx #3          ;prepare table
32ff : bd0b47           ji1     lda ji_adr,x
3302 : 9dfd19                   sta ji_tab,x
3305 : ca                       dex
3306 : 10f7                     bpl ji1
3308 : a94a                     lda #hi(ji_px) ;high address if page cross bug
330a : 8d0019                   sta pg_x
                                set_stat 0
                        
3311 : a949                     lda #'I'
3313 : a24e                     ldx #'N'
3315 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
3317 : 6cfd19                   jmp (ji_tab)
331a : ea                       nop
                                trap_ne         ;runover protection
                        
                        
3320 : 88                       dey
3321 : 88                       dey
3322 : 08               ji_ret  php             ;either SP or Y count will fail, if we do not hit
3323 : 88                       dey
3324 : 88                       dey
3325 : 88                       dey
3326 : 28                       plp
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
333b : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
                        
3342 : e04f                     cpx #('N'+1)
                                trap_ne
                        
3349 : c03e                     cpy #('D'-6)
                                trap_ne
                        
3350 : ba                       tsx             ;SP check
3351 : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump indexed indirect
3367 : a20b                     ldx #11         ;prepare table
3369 : bd5c47           jxi1    lda jxi_adr,x
336c : 9df919                   sta jxi_tab,x
336f : ca                       dex
3370 : 10f7                     bpl jxi1
3372 : a949                     lda #hi(jxi_px) ;high address if page cross bug
3374 : 8d0019                   sta pg_x
                                set_stat 0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   25
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

337b : a958                     lda #'X'
337d : a204                     ldx #4
337f : a049                     ldy #'I'        ;N=0, V=0, Z=0, C=0
3381 : 7cf919                   jmp (jxi_tab,x)
3384 : ea                       nop
                                trap_ne         ;runover protection
                        
                        
338a : 88                       dey
338b : 88                       dey
338c : 08               jxi_ret php             ;either SP or Y count will fail, if we do not hit
338d : 88                       dey
338e : 88                       dey
338f : 88                       dey
3390 : 28                       plp
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
33a5 : c9f2                     cmp #('X'^$aa)  ;returned registers OK?
                                trap_ne
                        
33ac : e006                     cpx #6
                                trap_ne
                        
33b3 : c043                     cpy #('I'-6)
                                trap_ne
                        
33ba : ba                       tsx             ;SP check
33bb : e0ff                     cpx #$ff
                                trap_ne
                        
                        
33c2 : a9de                     lda #lo(jxp_ok) ;test with index causing a page cross
33c4 : 8d001a                   sta jxp_tab
33c7 : a933                     lda #hi(jxp_ok)
33c9 : 8d011a                   sta jxp_tab+1
33cc : a9db                     lda #lo(jxp_px)
33ce : 8d0019                   sta pg_x
33d1 : a933                     lda #hi(jxp_px)
33d3 : 8d0119                   sta pg_x+1
33d6 : a2ff                     ldx #$ff
33d8 : 7c0119                   jmp (jxp_tab-$ff,x)
                                
33db :                  jxp_px  
                                trap            ;page cross by index to wrong page
                        
                        
33de :                  jxp_ok
                                next_test
                        
                        
                            if ROM_vectors = 1
                        ; test BRK clears decimal mode
                                sed
                                brk
                                nop
                        brk_ret
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   26
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                next_test
                            endif
                         
                        ; testing accumulator increment/decrement INC A & DEC A
33ed : a2ac                     ldx #$ac    ;protect x & y
33ef : a0dc                     ldy #$dc
                                set_a $fe,$ff
                        
33f7 : 1a                       inc a           ;ff
                                tst_as $ff,$ff-zero
                        
340c : 1a                       inc a           ;00
                                tst_as 0,$ff-minus
                        
3421 : 1a                       inc a           ;01
                                tst_as 1,$ff-minus-zero
                        
3436 : 3a                       dec a           ;00
                                tst_as 0,$ff-minus
                        
344b : 3a                       dec a           ;ff
                                tst_as $ff,$ff-zero
                        
3460 : 3a                       dec a           ;fe
                                set_a $fe,0
                        
3467 : 1a                       inc a           ;ff
                                tst_as $ff,minus
                        
347c : 1a                       inc a           ;00
                                tst_as 0,zero
                        
3491 : 1a                       inc a           ;01
                                tst_as 1,0
                        
34a6 : 3a                       dec a           ;00
                                tst_as 0,zero
                        
34bb : 3a                       dec a           ;ff
                                tst_as $ff,minus
                        
34d0 : e0ac                     cpx #$ac
                                trap_ne     ;x altered during test
                        
34d7 : c0dc                     cpy #$dc
                                trap_ne     ;y altered during test
                        
34de : ba                       tsx
34df : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test
                        
                        
                        ; testing load / store accumulator LDA / STA (zp)
34f5 : a299                     ldx #$99    ;protect x & y
34f7 : a066                     ldy #$66
                                set_stat 0  
                        
34fd : b222                     lda (ind1)
34ff : 08                       php         ;test stores do not alter flags
3500 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   27
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

3502 : 28                       plp
3503 : 922e                     sta (indt)
3505 : 08                       php         ;flags after load/store sequence
3506 : 49c3                     eor #$c3
3508 : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
350f : 68                       pla         ;load status
                                eor_flag 0
                        
3512 : cd1519                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
351e : b224                     lda (ind1+2)
3520 : 08                       php         ;test stores do not alter flags
3521 : 49c3                     eor #$c3
3523 : 28                       plp
3524 : 9230                     sta (indt+2)
3526 : 08                       php         ;flags after load/store sequence
3527 : 49c3                     eor #$c3
3529 : c982                     cmp #$82    ;test result
                                trap_ne
                        
3530 : 68                       pla         ;load status
                                eor_flag 0
                        
3533 : cd1619                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
353f : b226                     lda (ind1+4)
3541 : 08                       php         ;test stores do not alter flags
3542 : 49c3                     eor #$c3
3544 : 28                       plp
3545 : 9232                     sta (indt+4)
3547 : 08                       php         ;flags after load/store sequence
3548 : 49c3                     eor #$c3
354a : c941                     cmp #$41    ;test result
                                trap_ne
                        
3551 : 68                       pla         ;load status
                                eor_flag 0
                        
3554 : cd1719                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
3560 : b228                     lda (ind1+6)
3562 : 08                       php         ;test stores do not alter flags
3563 : 49c3                     eor #$c3
3565 : 28                       plp
3566 : 9234                     sta (indt+6)
3568 : 08                       php         ;flags after load/store sequence
3569 : 49c3                     eor #$c3
356b : c900                     cmp #0      ;test result
                                trap_ne
                        
3572 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   28
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                eor_flag 0
                        
3575 : cd1819                   cmp fLDx+3  ;test flags
                                trap_ne
                        
357d : e099                     cpx #$99
                                trap_ne     ;x altered during test
                        
3584 : c066                     cpy #$66
                                trap_ne     ;y altered during test
                        
                        
358b : a003                     ldy #3      ;testing store result
358d : a200                     ldx #0
358f : b90519           tstai1  lda abst,y
3592 : 49c3                     eor #$c3
3594 : d91019                   cmp abs1,y
                                trap_ne     ;store to indirect data
                        
359c : 8a                       txa
359d : 990519                   sta abst,y  ;clear                
35a0 : 88                       dey
35a1 : 10ec                     bpl tstai1
                        
35a3 : a299                     ldx #$99    ;protect x & y
35a5 : a066                     ldy #$66
                                set_stat $ff  
                        
35ab : b222                     lda (ind1)
35ad : 08                       php         ;test stores do not alter flags
35ae : 49c3                     eor #$c3
35b0 : 28                       plp
35b1 : 922e                     sta (indt)
35b3 : 08                       php         ;flags after load/store sequence
35b4 : 49c3                     eor #$c3
35b6 : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
35bd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
35c0 : cd1519                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
35cc : b224                     lda (ind1+2)
35ce : 08                       php         ;test stores do not alter flags
35cf : 49c3                     eor #$c3
35d1 : 28                       plp
35d2 : 9230                     sta (indt+2)
35d4 : 08                       php         ;flags after load/store sequence
35d5 : 49c3                     eor #$c3
35d7 : c982                     cmp #$82    ;test result
                                trap_ne
                        
35de : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
35e1 : cd1619                   cmp fLDx+1  ;test flags
                                trap_ne
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   29
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                set_stat $ff
                        
35ed : b226                     lda (ind1+4)
35ef : 08                       php         ;test stores do not alter flags
35f0 : 49c3                     eor #$c3
35f2 : 28                       plp
35f3 : 9232                     sta (indt+4)
35f5 : 08                       php         ;flags after load/store sequence
35f6 : 49c3                     eor #$c3
35f8 : c941                     cmp #$41    ;test result
                                trap_ne
                        
35ff : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3602 : cd1719                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
360e : b228                     lda (ind1+6)
3610 : 08                       php         ;test stores do not alter flags
3611 : 49c3                     eor #$c3
3613 : 28                       plp
3614 : 9234                     sta (indt+6)
3616 : 08                       php         ;flags after load/store sequence
3617 : 49c3                     eor #$c3
3619 : c900                     cmp #0      ;test result
                                trap_ne
                        
3620 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3623 : cd1819                   cmp fLDx+3  ;test flags
                                trap_ne
                        
362b : e099                     cpx #$99
                                trap_ne     ;x altered during test
                        
3632 : c066                     cpy #$66
                                trap_ne     ;y altered during test
                        
                        
3639 : a003                     ldy #3      ;testing store result
363b : a200                     ldx #0
363d : b90519           tstai2  lda abst,y
3640 : 49c3                     eor #$c3
3642 : d91019                   cmp abs1,y
                                trap_ne     ;store to indirect data
                        
364a : 8a                       txa
364b : 990519                   sta abst,y  ;clear                
364e : 88                       dey
364f : 10ec                     bpl tstai2
3651 : ba                       tsx
3652 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test
                        
                        
                        ; testing STZ - zp / abs / zp,x / abs,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   30
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

3668 : a07b                     ldy #123    ;protect y
366a : a204                     ldx #4      ;precharge test area
366c : a907                     lda #7
366e : 950a             tstz1   sta zpt,x
3670 : 0a                       asl a
3671 : ca                       dex
3672 : 10fa                     bpl tstz1
3674 : a204                     ldx #4
                                set_a $55,$ff
                        
367c : 640a                     stz zpt     
367e : 640b                     stz zpt+1
3680 : 640c                     stz zpt+2
3682 : 640d                     stz zpt+3
3684 : 640e                     stz zpt+4
                                tst_a $55,$ff
                        
3698 : b50a             tstz2   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
                        
369f : ca                       dex
36a0 : 10f6                     bpl tstz2
36a2 : a204                     ldx #4      ;precharge test area
36a4 : a907                     lda #7
36a6 : 950a             tstz3   sta zpt,x
36a8 : 0a                       asl a
36a9 : ca                       dex
36aa : 10fa                     bpl tstz3
36ac : a204                     ldx #4
                                set_a $aa,0
                        
36b4 : 640a                     stz zpt     
36b6 : 640b                     stz zpt+1
36b8 : 640c                     stz zpt+2
36ba : 640d                     stz zpt+3
36bc : 640e                     stz zpt+4
                                tst_a $aa,0
                        
36d0 : b50a             tstz4   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
                        
36d7 : ca                       dex
36d8 : 10f6                     bpl tstz4
                                
36da : a204                     ldx #4      ;precharge test area
36dc : a907                     lda #7
36de : 9d0519           tstz5   sta abst,x
36e1 : 0a                       asl a
36e2 : ca                       dex
36e3 : 10f9                     bpl tstz5
36e5 : a204                     ldx #4
                                set_a $55,$ff
                        
36ed : 9c0519                   stz abst     
36f0 : 9c0619                   stz abst+1
36f3 : 9c0719                   stz abst+2
36f6 : 9c0819                   stz abst+3
36f9 : 9c0919                   stz abst+4
                                tst_a $55,$ff
                        
370e : bd0519           tstz6   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   31
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
3716 : ca                       dex
3717 : 10f5                     bpl tstz6
3719 : a204                     ldx #4      ;precharge test area
371b : a907                     lda #7
371d : 9d0519           tstz7   sta abst,x
3720 : 0a                       asl a
3721 : ca                       dex
3722 : 10f9                     bpl tstz7
3724 : a204                     ldx #4
                                set_a $aa,0
                        
372c : 9c0519                   stz abst     
372f : 9c0619                   stz abst+1
3732 : 9c0719                   stz abst+2
3735 : 9c0819                   stz abst+3
3738 : 9c0919                   stz abst+4
                                tst_a $aa,0
                        
374d : bd0519           tstz8   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
                        
3755 : ca                       dex
3756 : 10f5                     bpl tstz8
                                
3758 : a204                     ldx #4      ;precharge test area
375a : a907                     lda #7
375c : 950a             tstz11  sta zpt,x
375e : 0a                       asl a
375f : ca                       dex
3760 : 10fa                     bpl tstz11
3762 : a204                     ldx #4
3764 :                  tstz15
                                set_a $55,$ff
                        
376a : 740a                     stz zpt,x     
                                tst_a $55,$ff
                        
377e : ca                       dex
377f : 10e3                     bpl tstz15
3781 : a204                     ldx #4
3783 : b50a             tstz12  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
                        
378a : ca                       dex
378b : 10f6                     bpl tstz12
378d : a204                     ldx #4      ;precharge test area
378f : a907                     lda #7
3791 : 950a             tstz13  sta zpt,x
3793 : 0a                       asl a
3794 : ca                       dex
3795 : 10fa                     bpl tstz13
3797 : a204                     ldx #4
3799 :                  tstz16
                                set_a $aa,0
                        
379f : 740a                     stz zpt,x
                                tst_a $aa,0
                        
37b3 : ca                       dex
37b4 : 10e3                     bpl tstz16
37b6 : a204                     ldx #4
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   32
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

37b8 : b50a             tstz14  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
                        
37bf : ca                       dex
37c0 : 10f6                     bpl tstz14
                                
37c2 : a204                     ldx #4      ;precharge test area
37c4 : a907                     lda #7
37c6 : 9d0519           tstz21  sta abst,x
37c9 : 0a                       asl a
37ca : ca                       dex
37cb : 10f9                     bpl tstz21
37cd : a204                     ldx #4
37cf :                  tstz25
                                set_a $55,$ff
                        
37d5 : 9e0519                   stz abst,x     
                                tst_a $55,$ff
                        
37ea : ca                       dex
37eb : 10e2                     bpl tstz25
37ed : a204                     ldx #4
37ef : bd0519           tstz22  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
                        
37f7 : ca                       dex
37f8 : 10f5                     bpl tstz22
37fa : a204                     ldx #4      ;precharge test area
37fc : a907                     lda #7
37fe : 9d0519           tstz23  sta abst,x
3801 : 0a                       asl a
3802 : ca                       dex
3803 : 10f9                     bpl tstz23
3805 : a204                     ldx #4
3807 :                  tstz26
                                set_a $aa,0
                        
380d : 9e0519                   stz abst,x
                                tst_a $aa,0
                        
3822 : ca                       dex
3823 : 10e2                     bpl tstz26
3825 : a204                     ldx #4
3827 : bd0519           tstz24  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
                        
382f : ca                       dex
3830 : 10f5                     bpl tstz24
                                
3832 : c07b                     cpy #123
                                trap_ne     ;y altered during test 
                        
3839 : ba                       tsx
383a : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test
                        
                        
                        ; testing BIT - zp,x / abs,x / #
3850 : a042                     ldy #$42
3852 : a203                     ldx #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   33
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                set_a $ff,0
                        
385a : 3411                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
                        
386e : ca                       dex
                                set_a 1,0
                        
3875 : 3411                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
3889 : ca                       dex
                                set_a 1,0
                        
3890 : 3411                     bit zp1,x   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
38a4 : ca                       dex
                                set_a 1,0
                        
38ab : 3411                     bit zp1,x   ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                                
                                set_a 1,$ff
                        
38c5 : 3411                     bit zp1,x   ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
38d9 : e8                       inx
                                set_a 1,$ff
                        
38e0 : 3411                     bit zp1,x   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
38f4 : e8                       inx
                                set_a 1,$ff
                        
38fb : 3411                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
390f : e8                       inx
                                set_a $ff,$ff
                        
3916 : 3411                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
                        
                                
                                set_a $ff,0
                        
3930 : 3c1019                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
                        
3945 : ca                       dex
                                set_a 1,0
                        
394c : 3c1019                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
3961 : ca                       dex
                                set_a 1,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   34
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

3968 : 3c1019                   bit abs1,x  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
397d : ca                       dex
                                set_a 1,0
                        
3984 : 3c1019                   bit abs1,x  ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                                
                                set_a 1,$ff
                        
399f : 3c1019                   bit abs1,x  ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
39b4 : e8                       inx
                                set_a 1,$ff
                        
39bb : 3c1019                   bit abs1,x  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
39d0 : e8                       inx
                                set_a 1,$ff
                        
39d7 : 3c1019                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
39ec : e8                       inx
                                set_a $ff,$ff
                        
39f3 : 3c1019                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
                        
                                
                                set_a $ff,0
                        
3a0e : 8900                     bit #$00    ;00 - should set Z
                                tst_a $ff,fz 
                        
3a22 : ca                       dex
                                set_a 1,0
                        
3a29 : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,0
                        
                        ; *** DEBUG INFO ***
                        ; if it fails the previous test and your BIT # has set the V flag
                        ; see http://forum.6502.org/viewtopic.php?f=2&t=2241&p=27243#p27239
                        ; why it shouldn't alter N or V flags on a BIT #
3a3d : ca                       dex
                                set_a 1,0
                        
3a44 : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,fz
                        
3a58 : ca                       dex
                                set_a 1,0
                        
3a5f : 89c3                     bit #$c3    ;c3 - should clear Z
                                tst_a 1,0
                        
                                
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   35
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                set_a 1,$ff
                        
3a79 : 89c3                     bit #$c3    ;c3 - clear Z
                                tst_a 1,~fz
                        
3a8d : e8                       inx
                                set_a 1,$ff
                        
3a94 : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,$ff
                        
3aa8 : e8                       inx
                                set_a 1,$ff
                        
3aaf : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,~fz
                        
3ac3 : e8                       inx
                                set_a $ff,$ff
                        
3aca : 8900                     bit #$00   ;00 - should set Z
                                tst_a $ff,$ff
                        
                                
3ade : e003                     cpx #3
                                trap_ne     ;x altered during test
                        
3ae5 : c042                     cpy #$42
                                trap_ne     ;y altered during test 
                        
3aec : ba                       tsx
3aed : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test
                        
                        
                        ; testing TRB, TSB - zp / abs
                        
                        trbt    macro       ;\1 = memory, \2 = flags   
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                trb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+3
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong       
                                endm
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   36
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
                        tsbt    macro       ;\1 = memory, \2 = flags   
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                tsb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+4
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong        
                                endm
                        
3b03 : a2c0                     ldx #$c0
3b05 : a000                     ldy #0      ;op1 - memory save
                                ;   zpt     ;op1 - memory modifiable
3b07 : 640b                     stz zpt+1   ;op2 - accu
                                ;   zpt+2   ;and flags
                                ;   zpt+3   ;memory after reset
                                ;   zpt+4   ;memory after set
                                
3b09 : 98               tbt1    tya
3b0a : 250b                     and zpt+1   ;set Z by anding the 2 operands
3b0c : 08                       php
3b0d : 68                       pla
3b0e : 2902                     and #fz     ;mask Z
3b10 : 850c                     sta zpt+2
3b12 : 98                       tya         ;reset op1 bits by op2
3b13 : 49ff                     eor #$ff
3b15 : 050b                     ora zpt+1
3b17 : 49ff                     eor #$ff
3b19 : 850d                     sta zpt+3
3b1b : 98                       tya         ;set op1 bits by op2
3b1c : 050b                     ora zpt+1
3b1e : 850e                     sta zpt+4
                        
                                trbt zpt,$ff
                        
                                trbt abst,$ff
                        
                                trbt zpt,0
                        
                                trbt abst,0
                        
                                tsbt zpt,$ff
                        
                                tsbt abst,$ff
                        
                                tsbt zpt,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   37
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                                tsbt abst,0
                        
                                
3ca8 : c8                       iny         ;iterate op1
3ca9 : d004                     bne tbt3
3cab : e60b                     inc zpt+1   ;iterate op2
3cad : f003                     beq tbt2
3caf : 4c093b           tbt3    jmp tbt1        
3cb2 :                  tbt2
3cb2 : e0c0                     cpx #$c0
                                trap_ne     ;x altered during test
                        
3cb9 : ba                       tsx
3cba : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test    
                        
                        
                            if rkwl_wdc_op = 1
                        ; testing RMB, SMB - zp
                        rmbt    macro       ;\1 = bitnum
                                lda #$ff
                                sta zpt
                                set_a $a5,0
                                rmb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff-(1<<\1)
                                trap_ne     ;wrong bits set or cleared
                                lda #1<<\1
                                sta zpt
                                set_a $5a,$ff
                                rmb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                trap_ne     ;wrong bits set or cleared
                                endm
                        smbt    macro       ;\1 = bitnum
                                lda #$ff-(1<<\1)
                                sta zpt
                                set_a $a5,0
                                smb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff
                                trap_ne     ;wrong bits set or cleared
                                lda #0
                                sta zpt
                                set_a $5a,$ff
                                smb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                cmp #1<<\1
                                trap_ne     ;wrong bits set or cleared
                                endm
                        
3cd0 : a2ba                     ldx #$ba    ;protect x & y
3cd2 : a0d0                     ldy #$d0
                                rmbt 0
                        
                                rmbt 1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   38
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
                                rmbt 2
                        
                                rmbt 3
                        
                                rmbt 4
                        
                                rmbt 5
                        
                                rmbt 6
                        
                                rmbt 7
                        
                                smbt 0
                        
                                smbt 1
                        
                                smbt 2
                        
                                smbt 3
                        
                                smbt 4
                        
                                smbt 5
                        
                                smbt 6
                        
                                smbt 7
                        
41a4 : e0ba                     cpx #$ba
                                trap_ne     ;x altered during test
                        
41ab : c0d0                     cpy #$d0
                                trap_ne     ;y altered during test
                        
41b2 : ba                       tsx
41b3 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test
                        
                            endif        
                                 
                        ; testing CMP - (zp)         
41c9 : a2de                     ldx #$de    ;protect x & y
41cb : a0ad                     ldy #$ad
                                set_a $80,0
                        
41d3 : d22a                     cmp (ind1+8)
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
41ed : d22a                     cmp (ind1+8)
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
4207 : d22a                     cmp (ind1+8)
                                tst_a $7e,fn
                        
                                set_a $80,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   39
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
4221 : d22a                     cmp (ind1+8)
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
423b : d22a                     cmp (ind1+8)
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
4255 : d22a                     cmp (ind1+8)
                                tst_a $7e,~fzc
                        
4269 : e0de                     cpx #$de
                                trap_ne     ;x altered during test
                        
4270 : c0ad                     cpy #$ad
                                trap_ne     ;y altered during test 
                        
4277 : ba                       tsx
4278 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test
                        
                        
                        ; testing logical instructions - AND EOR ORA (zp)
428e : a242                     ldx #$42    ;protect x & y
                        
4290 : a000                     ldy #0      ;AND
4292 : a538                     lda indAN   ;set indirect address
4294 : 850a                     sta zpt
4296 : a539                     lda indAN+1
4298 : 850b                     sta zpt+1
429a :                  tand1
                                set_ay  absANa,0
                        
42a1 : 320a                     and (zpt)
                                tst_ay  absrlo,absflo,0
                        
42b7 : e60a                     inc zpt
42b9 : c8                       iny
42ba : c004                     cpy #4
42bc : d0dc                     bne tand1
42be : 88                       dey
42bf : c60a                     dec zpt
42c1 :                  tand2
                                set_ay  absANa,$ff
                        
42c8 : 320a                     and (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
42de : c60a                     dec zpt
42e0 : 88                       dey
42e1 : 10de                     bpl tand2
                        
42e3 : a000                     ldy #0      ;EOR
42e5 : a540                     lda indEO   ;set indirect address
42e7 : 850a                     sta zpt
42e9 : a541                     lda indEO+1
42eb : 850b                     sta zpt+1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   40
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

42ed :                  teor1
                                set_ay  absEOa,0
                        
42f4 : 520a                     eor (zpt)
                                tst_ay  absrlo,absflo,0
                        
430a : e60a                     inc zpt
430c : c8                       iny
430d : c004                     cpy #4
430f : d0dc                     bne teor1
4311 : 88                       dey
4312 : c60a                     dec zpt
4314 :                  teor2
                                set_ay  absEOa,$ff
                        
431b : 520a                     eor (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
4331 : c60a                     dec zpt
4333 : 88                       dey
4334 : 10de                     bpl teor2
                        
4336 : a000                     ldy #0      ;ORA
4338 : a548                     lda indOR   ;set indirect address
433a : 850a                     sta zpt
433c : a549                     lda indOR+1
433e : 850b                     sta zpt+1
4340 :                  tora1
                                set_ay  absORa,0
                        
4347 : 120a                     ora (zpt)
                                tst_ay  absrlo,absflo,0
                        
435d : e60a                     inc zpt
435f : c8                       iny
4360 : c004                     cpy #4
4362 : d0dc                     bne tora1
4364 : 88                       dey
4365 : c60a                     dec zpt
4367 :                  tora2
                                set_ay  absORa,$ff
                        
436e : 120a                     ora (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
4384 : c60a                     dec zpt
4386 : 88                       dey
4387 : 10de                     bpl tora2
                        
4389 : e042                     cpx #$42
                                trap_ne     ;x altered during test
                        
4390 : ba                       tsx
4391 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
                        
                                next_test
                        
                                
                            if I_flag = 3
43a7 : 58                       cli
                            endif                
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   41
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
                        ; full binary add/subtract test - (zp) only
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
43a8 : d8                       cld
43a9 : a20c                     ldx #ad2        ;for indexed test
43ab : a0ff                     ldy #$ff        ;max range
43ad : a900                     lda #0          ;start with adding zeroes & no carry
43af : 850a                     sta adfc        ;carry in - for diag
43b1 : 850b                     sta ad1         ;operand 1 - accumulator
43b3 : 850c                     sta ad2         ;operand 2 - memory or immediate
43b5 : 8d0519                   sta ada2        ;non zp
43b8 : 850d                     sta adrl        ;expected result bits 0-7
43ba : 850e                     sta adrh        ;expected result bit 8 (carry out)
43bc : a9ff                     lda #$ff        ;complemented operand 2 for subtract
43be : 8510                     sta sb2
43c0 : 8d0619                   sta sba2        ;non zp
43c3 : a902                     lda #2          ;expected Z-flag
43c5 : 850f                     sta adrf
43c7 : 18               tadd    clc             ;test with carry clear
43c8 : 20c246                   jsr chkadd
43cb : e60a                     inc adfc        ;now with carry
43cd : e60d                     inc adrl        ;result +1
43cf : 08                       php             ;save N & Z from low result
43d0 : 08                       php
43d1 : 68                       pla             ;accu holds expected flags
43d2 : 2982                     and #$82        ;mask N & Z
43d4 : 28                       plp
43d5 : d002                     bne tadd1
43d7 : e60e                     inc adrh        ;result bit 8 - carry
43d9 : 050e             tadd1   ora adrh        ;merge C to expected flags
43db : 850f                     sta adrf        ;save expected flags except overflow
43dd : 38                       sec             ;test with carry set
43de : 20c246                   jsr chkadd
43e1 : c60a                     dec adfc        ;same for operand +1 but no carry
43e3 : e60b                     inc ad1
43e5 : d0e0                     bne tadd        ;iterate op1
43e7 : a900                     lda #0          ;preset result to op2 when op1 = 0
43e9 : 850e                     sta adrh
43eb : ee0519                   inc ada2
43ee : e60c                     inc ad2
43f0 : 08                       php             ;save NZ as operand 2 becomes the new result
43f1 : 68                       pla
43f2 : 2982                     and #$82        ;mask N00000Z0
43f4 : 850f                     sta adrf        ;no need to check carry as we are adding to 0
43f6 : c610                     dec sb2         ;complement subtract operand 2
43f8 : ce0619                   dec sba2
43fb : a50c                     lda ad2         
43fd : 850d                     sta adrl
43ff : d0c6                     bne tadd        ;iterate op2
                        
4401 : e00c                     cpx #ad2
                                trap_ne         ;x altered during test
                        
4408 : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test 
                        
440f : ba                       tsx
4410 : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
                        
                                next_test
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   42
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, the V flag is ignored
                        ;   although V is declared as beeing valid on the 65C02 it has absolutely
                        ;   no use in BCD math. No sign = no overflow!
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
4426 : f8                       sed 
4427 : a20c                     ldx #ad2        ;for indexed test
4429 : a0ff                     ldy #$ff        ;max range
442b : a999                     lda #$99        ;start with adding 99 to 99 with carry
442d : 850b                     sta ad1         ;operand 1 - accumulator
442f : 850c                     sta ad2         ;operand 2 - memory or immediate
4431 : 8d0519                   sta ada2        ;non zp
4434 : 850d                     sta adrl        ;expected result bits 0-7
4436 : a901                     lda #1          ;set carry in & out
4438 : 850a                     sta adfc        ;carry in - for diag
443a : 850e                     sta adrh        ;expected result bit 8 (carry out)
443c : a981                     lda #$81        ;set N & C (99 + 99 + C = 99 + C)
443e : 850f                     sta adrf
4440 : a900                     lda #0          ;complemented operand 2 for subtract
4442 : 8510                     sta sb2
4444 : 8d0619                   sta sba2        ;non zp
4447 : 38               tdad    sec             ;test with carry set
4448 : 20ff44                   jsr chkdad
444b : c60a                     dec adfc        ;now with carry clear
444d : a50d                     lda adrl        ;decimal adjust result
444f : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
4451 : c60e                     dec adrh
4453 : a999                     lda #$99
4455 : 850d                     sta adrl
4457 : d012                     bne tdad3
4459 : 290f             tdad1   and #$f         ;lower nibble mask
445b : d00c                     bne tdad2       ;no decimal adjust needed
445d : c60d                     dec adrl        ;decimal adjust (?0-6)
445f : c60d                     dec adrl
4461 : c60d                     dec adrl
4463 : c60d                     dec adrl
4465 : c60d                     dec adrl
4467 : c60d                     dec adrl
4469 : c60d             tdad2   dec adrl        ;result -1
446b : 08               tdad3   php             ;save valid flags
446c : 68                       pla
446d : 2982                     and #$82        ;N-----Z-
446f : 050e                     ora adrh        ;N-----ZC
4471 : 850f                     sta adrf
4473 : 18                       clc             ;test with carry clear
4474 : 20ff44                   jsr chkdad
4477 : e60a                     inc adfc        ;same for operand -1 but with carry
4479 : a50b                     lda ad1         ;decimal adjust operand 1
447b : f015                     beq tdad5       ;iterate operand 2
447d : 290f                     and #$f         ;lower nibble mask
447f : d00c                     bne tdad4       ;skip decimal adjust
4481 : c60b                     dec ad1         ;decimal adjust (?0-6)
4483 : c60b                     dec ad1
4485 : c60b                     dec ad1
4487 : c60b                     dec ad1
4489 : c60b                     dec ad1
448b : c60b                     dec ad1
448d : c60b             tdad4   dec ad1         ;operand 1 -1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   43
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

448f : 4c4744                   jmp tdad        ;iterate op1
                        
4492 : a999             tdad5   lda #$99        ;precharge op1 max
4494 : 850b                     sta ad1
4496 : a50c                     lda ad2         ;decimal adjust operand 2
4498 : f039                     beq tdad7       ;end of iteration
449a : 290f                     and #$f         ;lower nibble mask
449c : d018                     bne tdad6       ;skip decimal adjust
449e : c60c                     dec ad2         ;decimal adjust (?0-6)
44a0 : c60c                     dec ad2
44a2 : c60c                     dec ad2
44a4 : c60c                     dec ad2
44a6 : c60c                     dec ad2
44a8 : c60c                     dec ad2
44aa : e610                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
44ac : e610                     inc sb2
44ae : e610                     inc sb2
44b0 : e610                     inc sb2
44b2 : e610                     inc sb2
44b4 : e610                     inc sb2
44b6 : c60c             tdad6   dec ad2         ;operand 2 -1
44b8 : e610                     inc sb2         ;complemented operand for subtract
44ba : a510                     lda sb2
44bc : 8d0619                   sta sba2        ;copy as non zp operand
44bf : a50c                     lda ad2
44c1 : 8d0519                   sta ada2        ;copy as non zp operand
44c4 : 850d                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
44c6 : 08                       php             ;save flags
44c7 : 68                       pla
44c8 : 2982                     and #$82        ;N-----Z-
44ca : 0901                     ora #1          ;N-----ZC
44cc : 850f                     sta adrf
44ce : e60e                     inc adrh        ;result carry
44d0 : 4c4744                   jmp tdad        ;iterate op2
                        
44d3 : e00c             tdad7   cpx #ad2
                                trap_ne         ;x altered during test
                        
44da : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test 
                        
44e1 : ba                       tsx
44e2 : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
                        
44e9 : d8                       cld
                        
44ea : ad0219                   lda test_case
44ed : c914                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
                        
44f4 : a9f0                     lda #$f0        ;mark opcode testing complete
44f6 : 8d0219                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to 
                        ; narrow down the responsible opcode.
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   44
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************       
                        ; -------------       
                                success         ;if you get here everything went well
                        
                        ; -------------       
                        ; S U C C E S S ************************************************       
44fc : 4c001b                   jmp start       ;run again      
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, V flag is ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
44ff :                  chkdad
                        ; decimal ADC / SBC zp
44ff : 08                       php             ;save carry for subtract
4500 : a50b                     lda ad1
4502 : 650c                     adc ad2         ;perform add
4504 : 08                       php          
4505 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
450c : 68                       pla             ;check flags
450d : 2983                     and #$83        ;mask N-----ZC
450f : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4516 : 28                       plp
4517 : 08                       php             ;save carry for next add
4518 : a50b                     lda ad1
451a : e510                     sbc sb2         ;perform subtract
451c : 08                       php          
451d : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
4524 : 68                       pla             ;check flags
4525 : 2983                     and #$83        ;mask N-----ZC
4527 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
452e : 28                       plp
                        ; decimal ADC / SBC abs
452f : 08                       php             ;save carry for subtract
4530 : a50b                     lda ad1
4532 : 6d0519                   adc ada2        ;perform add
4535 : 08                       php          
4536 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
453d : 68                       pla             ;check flags
453e : 2983                     and #$83        ;mask N-----ZC
4540 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4547 : 28                       plp
4548 : 08                       php             ;save carry for next add
4549 : a50b                     lda ad1
454b : ed0619                   sbc sba2        ;perform subtract
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   45
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

454e : 08                       php          
454f : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
4556 : 68                       pla             ;check flags
4557 : 2983                     and #$83        ;mask N-----ZC
4559 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4560 : 28                       plp
                        ; decimal ADC / SBC #
4561 : 08                       php             ;save carry for subtract
4562 : a50c                     lda ad2
4564 : 8d0b19                   sta ex_adci+1   ;set ADC # operand
4567 : a50b                     lda ad1
4569 : 200a19                   jsr ex_adci     ;execute ADC # in RAM
456c : 08                       php          
456d : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
4574 : 68                       pla             ;check flags
4575 : 2983                     and #$83        ;mask N-----ZC
4577 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
457e : 28                       plp
457f : 08                       php             ;save carry for next add
4580 : a510                     lda sb2
4582 : 8d0e19                   sta ex_sbci+1   ;set SBC # operand
4585 : a50b                     lda ad1
4587 : 200d19                   jsr ex_sbci     ;execute SBC # in RAM
458a : 08                       php          
458b : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
4592 : 68                       pla             ;check flags
4593 : 2983                     and #$83        ;mask N-----ZC
4595 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
459c : 28                       plp
                        ; decimal ADC / SBC zp,x
459d : 08                       php             ;save carry for subtract
459e : a50b                     lda ad1
45a0 : 7500                     adc 0,x         ;perform add
45a2 : 08                       php          
45a3 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
45aa : 68                       pla             ;check flags
45ab : 2983                     and #$83        ;mask N-----ZC
45ad : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
45b4 : 28                       plp
45b5 : 08                       php             ;save carry for next add
45b6 : a50b                     lda ad1
45b8 : f504                     sbc sb2-ad2,x   ;perform subtract
45ba : 08                       php          
45bb : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   46
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

45c2 : 68                       pla             ;check flags
45c3 : 2983                     and #$83        ;mask N-----ZC
45c5 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
45cc : 28                       plp
                        ; decimal ADC / SBC abs,x
45cd : 08                       php             ;save carry for subtract
45ce : a50b                     lda ad1
45d0 : 7df918                   adc ada2-ad2,x  ;perform add
45d3 : 08                       php          
45d4 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
45db : 68                       pla             ;check flags
45dc : 2983                     and #$83        ;mask N-----ZC
45de : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
45e5 : 28                       plp
45e6 : 08                       php             ;save carry for next add
45e7 : a50b                     lda ad1
45e9 : fdfa18                   sbc sba2-ad2,x  ;perform subtract
45ec : 08                       php          
45ed : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
45f4 : 68                       pla             ;check flags
45f5 : 2983                     and #$83        ;mask N-----ZC
45f7 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
45fe : 28                       plp
                        ; decimal ADC / SBC abs,y
45ff : 08                       php             ;save carry for subtract
4600 : a50b                     lda ad1
4602 : 790618                   adc ada2-$ff,y  ;perform add
4605 : 08                       php          
4606 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
460d : 68                       pla             ;check flags
460e : 2983                     and #$83        ;mask N-----ZC
4610 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4617 : 28                       plp
4618 : 08                       php             ;save carry for next add
4619 : a50b                     lda ad1
461b : f90718                   sbc sba2-$ff,y  ;perform subtract
461e : 08                       php          
461f : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
4626 : 68                       pla             ;check flags
4627 : 2983                     and #$83        ;mask N-----ZC
4629 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4630 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
4631 : 08                       php             ;save carry for subtract
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   47
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

4632 : a50b                     lda ad1
4634 : 6144                     adc (lo adi2-ad2,x) ;perform add
4636 : 08                       php          
4637 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
463e : 68                       pla             ;check flags
463f : 2983                     and #$83        ;mask N-----ZC
4641 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4648 : 28                       plp
4649 : 08                       php             ;save carry for next add
464a : a50b                     lda ad1
464c : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
464e : 08                       php          
464f : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
4656 : 68                       pla             ;check flags
4657 : 2983                     and #$83        ;mask N-----ZC
4659 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4660 : 28                       plp
                        ; decimal ADC / SBC (abs),y
4661 : 08                       php             ;save carry for subtract
4662 : a50b                     lda ad1
4664 : 7154                     adc (adiy2),y   ;perform add
4666 : 08                       php          
4667 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
466e : 68                       pla             ;check flags
466f : 2983                     and #$83        ;mask N-----ZC
4671 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4678 : 28                       plp
4679 : 08                       php             ;save carry for next add
467a : a50b                     lda ad1
467c : f156                     sbc (sbiy2),y   ;perform subtract
467e : 08                       php          
467f : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
4686 : 68                       pla             ;check flags
4687 : 2983                     and #$83        ;mask N-----ZC
4689 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
4690 : 28                       plp
                        ; decimal ADC / SBC (zp)
4691 : 08                       php             ;save carry for subtract
4692 : a50b                     lda ad1
4694 : 7250                     adc (adi2)      ;perform add
4696 : 08                       php          
4697 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
469e : 68                       pla             ;check flags
469f : 2983                     and #$83        ;mask N-----ZC
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   48
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

46a1 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
46a8 : 28                       plp
46a9 : 08                       php             ;save carry for next add
46aa : a50b                     lda ad1
46ac : f252                     sbc (sbi2)      ;perform subtract
46ae : 08                       php          
46af : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
46b6 : 68                       pla             ;check flags
46b7 : 2983                     and #$83        ;mask N-----ZC
46b9 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
46c0 : 28                       plp
46c1 : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
46c2 : a50f             chkadd  lda adrf        ;add V-flag if overflow
46c4 : 2983                     and #$83        ;keep N-----ZC / clear V
46c6 : 48                       pha
46c7 : a50b                     lda ad1         ;test sign unequal between operands
46c9 : 450c                     eor ad2
46cb : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
46cd : a50b                     lda ad1         ;test sign equal between operands and result
46cf : 450d                     eor adrl
46d1 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
46d3 : 68                       pla
46d4 : 0940                     ora #$40        ;set V
46d6 : 48                       pha
46d7 : 68               ckad1   pla
46d8 : 850f                     sta adrf        ;save expected flags
                        ; binary ADC / SBC (zp)
46da : 08                       php             ;save carry for subtract
46db : a50b                     lda ad1
46dd : 7250                     adc (adi2)      ;perform add
46df : 08                       php          
46e0 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
46e7 : 68                       pla             ;check flags
46e8 : 29c3                     and #$c3        ;mask NV----ZC
46ea : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
46f1 : 28                       plp
46f2 : 08                       php             ;save carry for next add
46f3 : a50b                     lda ad1
46f5 : f252                     sbc (sbi2)      ;perform subtract
46f7 : 08                       php          
46f8 : c50d                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
46ff : 68                       pla             ;check flags
4700 : 29c3                     and #$c3        ;mask NV----ZC
4702 : c50f                     cmp adrf
                                trap_ne         ;bad flags
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   49
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

4709 : 28                       plp
470a : 60                       rts
                                
                        ; target for the jump indirect test
470b : 1147             ji_adr  dw test_ji
470d : 2233                     dw ji_ret
                        
470f : 88                       dey
4710 : 88                       dey
4711 :                  test_ji
4711 : 08                       php             ;either SP or Y count will fail, if we do not hit
4712 : 88                       dey
4713 : 88                       dey
4714 : 88                       dey
4715 : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq 
                        
472a : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
                        
4731 : e04e                     cpx #'N'
                                trap_ne        
                        
4738 : c041                     cpy #('D'-3)
                                trap_ne
                        
473f : 48                       pha             ;save a,x
4740 : 8a                       txa
4741 : 48                       pha
4742 : ba                       tsx
4743 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
474a : 68                       pla             ;restore x
474b : aa                       tax
                                set_stat $ff
                        
4750 : 68                       pla             ;restore a
4751 : e8                       inx             ;return registers with modifications
4752 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
4754 : 6cff19                   jmp (ji_tab+2)
4757 : ea                       nop
4758 : ea                       nop
                                trap            ;runover protection
                        
                        
                        ; target for the jump indirect test
475c : b847             jxi_adr dw  trap_ind
475e : b847                     dw  trap_ind
4760 : 6a47                     dw  test_jxi    ;+4
4762 : 8c33                     dw  jxi_ret     ;+6
4764 : b847                     dw  trap_ind
4766 : b847                     dw  trap_ind
                        
4768 : 88                       dey
4769 : 88                       dey
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   50
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

476a :                  test_jxi
476a : 08                       php             ;either SP or Y count will fail, if we do not hit
476b : 88                       dey
476c : 88                       dey
476d : 88                       dey
476e : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq 
                        
4783 : c958                     cmp #'X'        ;registers loaded?
                                trap_ne
                        
478a : e004                     cpx #4
                                trap_ne        
                        
4791 : c046                     cpy #('I'-3)
                                trap_ne
                        
4798 : 48                       pha             ;save a,x
4799 : 8a                       txa
479a : 48                       pha
479b : ba                       tsx
479c : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
47a3 : 68                       pla             ;restore x
47a4 : aa                       tax
                                set_stat $ff
                        
47a9 : 68                       pla             ;restore a
47aa : e8                       inx             ;return registers with modifications
47ab : e8                       inx
47ac : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
47ae : 7cf919                   jmp (jxi_tab,x)
47b1 : ea                       nop
47b2 : ea                       nop
                                trap            ;runover protection
                        
                        
                        ; JMP (abs,x) with bad x
47b6 : ea                       nop
47b7 : ea                       nop
47b8 :                  trap_ind
47b8 : ea                       nop
47b9 : ea                       nop
                                trap            ;near miss indexed indirect jump
                        
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET
47bd :                  nmi_trap
                                trap            ;check stack for conditions at NMI
                        
47c0 :                  res_trap
                                trap            ;unexpected RESET
                        
47c3 :                  irq_trap
47c3 : 08                       php             ;save decimal flag
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   51
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

47c4 : ba                       tsx             ;test break on stack
47c5 : bd0201                   lda $102,x
47c8 : 2910                     and #break
                                trap_eq         ;check stack for conditions at IRQ
                        
                            if ROM_vectors = 1
                                pla             ;test decimal mode cleared
                                and #decmode
                                trap_ne         ;decimal mode not cleared after BRK
                                plp             ;pop saved flags
                                pla             ;return address low
                                cmp #lo(brk_ret)
                                trap_ne         ;unexpected BRK
                                pla             ;return address high
                                cmp #hi(brk_ret)
                                trap_ne         ;unexpected BRK
                                jmp brk_ret
                            else
                                trap_ne         ;check stack for conditions at BRK
                        
                            endif
                                
                            if report = 1
                                include "..\report.i65"
                        ;**** report 6502 funtional test errors to standard I/O ****
                        ;
                        ;this include file is part of the 6502 functional tests
                        ;it is used when you configure report = 1 in the tests
                        ;
                        ;to adopt the standard output vectors of your test environment
                        ;you must modify the rchar and rget subroutines in this include
                        ;
                        ;I/O hardware may have to be initialized in report_init
                        
                        ; For outputting text in MODE 7
0070 =                  line_ptr = $70
0072 =                  line_offset = $72
                        
                        ;print message macro - \1 = message location
                        rprt    macro
                                ldx #0
                                lda \1
                        loop\?
                                jsr rchar
                                inx
                                lda \1,x
                                bne loop\?
                                endm
                        
                        ;initialize I/O as required (example: configure & enable ACIA)
47d4 :                  report_init
                                ;nothing to initialize
                                rprt rmsg_start
                        
47e2 : 60                       rts
                                
                        ;show stack (with saved registers), zeropage and absolute memory workspace
                        ;after an error was trapped in the test program
47e3 :                  report_error
                        ;save registers
47e3 : 08                       php
47e4 : 48                       pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   52
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

47e5 : 8a                       txa
47e6 : 48                       pha
47e7 : 98                       tya
47e8 : 48                       pha
47e9 : d8                       cld
                        ;show stack with index to registers at error
                                rprt rmsg_stack
                        
47f8 : ba                       tsx
47f9 : e8                       inx
47fa : a901                     lda #1      ;address high
47fc : 20b648                   jsr rhex
47ff : 8a                       txa         ;address low
4800 : 20b648                   jsr rhex
4803 : 20b248           rstack  jsr rspace
4806 : bd0001                   lda $100,x  ;stack data
4809 : 20b648                   jsr rhex
480c : e8                       inx
480d : d0f4                     bne rstack
480f : 20a948                   jsr rcrlf   ;new line
                        ;show zero page workspace
4812 : a900                     lda #0
4814 : 20b648                   jsr rhex
4817 : a90a                     lda #zpt
4819 : aa                       tax
481a : 20b648                   jsr rhex
481d : 20b248           rzp     jsr rspace
4820 : b500                     lda 0,x
4822 : 20b648                   jsr rhex
4825 : e8                       inx
4826 : e011                     cpx #zp_bss
4828 : d0f3                     bne rzp
482a : 20a948                   jsr rcrlf
                        ;show absolute workspace
482d : a919                     lda #hi(data_segment)
482f : 20b648                   jsr rhex
4832 : a900                     lda #lo(data_segment)
4834 : 20b648                   jsr rhex
4837 : a200                     ldx #0
4839 : 20b248           rabs    jsr rspace
483c : bd0019                   lda data_segment,x
483f : 20b648                   jsr rhex
4842 : e8                       inx
4843 : e00a                     cpx #(data_bss-data_segment)
4845 : d0f2                     bne rabs
                        ;ask to continue
                                rprt rmsg_cont
                        
4855 : 209c48           rerr1   jsr rget
4858 : c943                     cmp #'C'
485a : d0f9                     bne rerr1        
                        ;restore registers
485c : 68                       pla
485d : a8                       tay
485e : 68                       pla
485f : aa                       tax
4860 : 68                       pla 
4861 : 28                       plp
4862 : 60                       rts   
                        
                        ;show test has ended, ask to repeat
4863 :                  report_success
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   53
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                            if rep_int = 1
                                rprt rmsg_priority
                                lda data_segment    ;show interrupt sequence
                                jsr rhex
                                jsr rspace
                                lda data_segment+1
                                jsr rhex
                                jsr rspace
                                lda data_segment+2
                                jsr rhex
                            endif
                                rprt rmsg_success
                        
4871 : 78                       sei
4872 : a915                     lda #21
4874 : a200                     ldx #0
4876 : 20f4ff                   jsr $fff4 ; clear keyboard buffer
4879 : a900                     lda #0
487b : 8570                     sta $70
487d :                  kbd_loop
487d : a670                     ldx $70
487f : bc2549                   ldy rmsg_kbd,x
4882 : d00d                     bne kbd_input
4884 : 58                       cli
4885 : a915                     lda #21
4887 : 20eeff                   jsr $ffee ; disable VDU
488a : a239                     ldx #lo(rmsg_basic)
488c : a049                     ldy #hi(rmsg_basic)
488e : 4cf7ff                   jmp $fff7
4891 :                  kbd_input
4891 : a98a                     lda #138
4893 : a200                     ldx #0
4895 : 20f4ff                   jsr $fff4 ; put y in keyboard buffer
4898 : e670                     inc $70
489a : d0e1                     bne kbd_loop
                        ;rsuc1   jsr rget
                        ;        cmp #'R'
                        ;        bne rsuc1
                        ;        rts
                        
                        ;input subroutine
                        ;get a character from standard input 
                        ;adjust according to the needs in your test environment
489c :                  rget                ;get character in A
489c : 4c9c48                   jmp rget ; no keyboard input so hang
                        ;rget1
                        ;        lda $bff1   ;wait RDRF
                        ;        and #8
                        ;        beq rget1
                        ;not a real ACIA - so RDRF is not checked
489f : adf0bf                   lda $bff0   ;read acia rx reg
                        ;the load can be replaced by a call to a kernal routine
                        ;        jsr $ffcf   ;example: CHRIN for a C64
48a2 : c961                     cmp #'a'    ;lower case
48a4 : 9002                     bcc rget1
48a6 : 295f                     and #$5f    ;convert to upper case
48a8 : 60               rget1   rts
                        
                        ;output subroutines
48a9 : a90a             rcrlf   lda #10
48ab : 20ca48                   jsr rchar
48ae : a90d                     lda #13
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   54
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

48b0 : d018                     bne rchar
                        
48b2 : a920             rspace  lda #' '
48b4 : d014                     bne rchar
                                
48b6 : 48               rhex    pha         ;report hex byte in A
48b7 : 4a                       lsr a       ;high nibble first
48b8 : 4a                       lsr a
48b9 : 4a                       lsr a
48ba : 4a                       lsr a
48bb : 20c148                   jsr rnib
48be : 68                       pla         ;now low nibble
48bf : 290f                     and #$f
                        
48c1 : 18               rnib    clc         ;report nibble in A
48c2 : 6930                     adc #'0'    ;make printable 0-9
48c4 : c93a                     cmp #'9'+1
48c6 : 9002                     bcc rchar
48c8 : 6906                     adc #6      ;make printable A-F
                        
                        ;send a character to standard output 
                        ;adjust according to the needs in your test environment
                        ;register X needs to be preserved!
48ca :                  rchar               ;report character in A
48ca : 4ceeff                   jmp $ffee
                        
48cd :                  rmsg_start
48cd : 0a0d5374617274..         db  10,13,"Started testing",10,13,0
48e1 :                  rmsg_stack
48e1 : 0a0d7265677320..         db  10,13,"regs Y  X  A  PS PCLPCH",10,13,0
48fd :                  rmsg_cont
48fd : 0a0d5465737420..         db  10,13,"Test failed",10,13,0
490d :                  rmsg_success
490d : 0a0d416c6c2074..         db  10,13,"All tests completed",10,13,0
4925 :                  rmsg_kbd
4925 : 41253d310d4348..         db  "A%=1",13,"CHAIN",34,"$.MENU",34,13,0
4939 :                  rmsg_basic
4939 : 42415349430d             db  "BASIC",13
                        
                            if rep_int = 1
                        rmsg_priority
                                db  10,13,"interrupt sequence (NMI IRQ BRK) ",0
                            endif
                           
                            endif
                                    
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   55
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry  
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   56
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                        ; code at end of image due to the need to add blank space as required
                            if ($ff & (ji_ret - * - 2)) < ($ff & (jxi_ret - * - 2))
                        ; JMP (abs) when $xxff and $xx00 are from same page
                                ds  lo(ji_ret - * - 2)
                                nop
                                nop
                        ji_px   nop             ;low address byte matched with ji_ret 
                                nop
                                trap            ;jmp indirect page cross bug
                        
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
                                ds  lo(jxi_ret - * - 2)
                                nop
                                nop
                        jxi_px  nop             ;low address byte matched with jxi_ret 
                                nop
                                trap            ;jmp indexed indirect page cross bug
                            else
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
493f : 00000000000000..         ds  lo(jxi_ret - * - 2)
498a : ea                       nop
498b : ea                       nop
498c : ea               jxi_px  nop             ;low address byte matched with jxi_ret 
498d : ea                       nop
                                trap            ;jmp indexed indirect page cross bug
                        
                        
                        ; JMP (abs) when $xxff and $xx00 are from same page
4991 : 00000000000000..         ds  lo(ji_ret - * - 2)
4a20 : ea                       nop
4a21 : ea                       nop
4a22 : ea               ji_px   nop             ;low address byte matched with ji_ret 
4a23 : ea                       nop
                                trap            ;jmp indirect page cross bug
                        
                            endif
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
                                org $fffa       ;vectors
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                            endif
                        
4a22 =                          end start
                        
No errors in pass 2.
Wrote binary from address $0000 through $4a26.
Total size 18983 bytes.
Program start address is at $1b00 (6912).
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   57
---------------------------------------------- ..\65C02_extended_opcodes_test.a65c -----------------------------------------------

