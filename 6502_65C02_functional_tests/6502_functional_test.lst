AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6284 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2015  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 21-oct-2015
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    2
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $50 (80) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    3
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                include "config.i65"
                        ; C O N F I G U R A T I O N
                        
                        ;This overrides the default configuration options
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0000 =                  ROM_vectors = 0
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
1b00 =                  code_segment = $1B00
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
1900 =                  data_segment = code_segment - $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0001 =                  report = 1
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ; Reserve a byte at $0 to include it in the binary
0000 =                          org $0
0000 : 00                       ds 1
                        
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0000 =                  disable_decimal = 0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    4
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    5
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    6
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    7
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    8
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    9
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   10
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   11
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a : 00               irq_a   ds  1               ;a register
000b : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c :                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c : 00               adfc    ds  1               ;carry flag before op
000d : 00               ad1     ds  1               ;operand 1 - accumulator
000e : 00               ad2     ds  1               ;operand 2 - memory / immediate
000f : 00               adrl    ds  1               ;expected result bits 0-7
0010 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0011 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0012 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0013 :                  zp_bss
0013 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0017 : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0018 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001c : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0020 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0024 : 1719             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0026 : 1819                     dw  abs1+1
0028 : 1919                     dw  abs1+2
002a : 1a19                     dw  abs1+3
002c : 1b19                     dw  abs7f
002e : 1f18             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0030 : 0319             indt    dw  abst            ;indirect pointer to store area in absolute memory
0032 : 0419                     dw  abst+1
0034 : 0519                     dw  abst+2
0036 : 0619                     dw  abst+3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   12
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0038 : 0b18             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003a : 4e19             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003c : 4f19                     dw  absAN+1
003e : 5019                     dw  absAN+2
0040 : 5119                     dw  absAN+3
0042 : 5219             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0044 : 5319                     dw  absEO+1
0046 : 5419                     dw  absEO+2
0048 : 5519                     dw  absEO+3
004a : 4a19             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004c : 4b19                     dw  absOR+1
004e : 4c19                     dw  absOR+2
0050 : 4d19                     dw  absOR+3
                        ;add/subtract indirect pointers
0052 : 0319             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0054 : 0419             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0056 : 0418             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0058 : 0518             sbiy2   dw  sba2-$ff
005a :                  zp_bss_end
                           
1900 =                          org data_segment
1900 : 00               test_case   ds  1           ;current test number
1901 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
1903 :                  abst                        ;5 bytes store/modify test area
1903 : 00               ada2    ds  1               ;operand 2
1904 : 00               sba2    ds  1               ;operand 2 complemented for subtract
1905 : 000000                   ds  3               ;fill remaining bytes
1908 :                  data_bss
                            if load_data_direct = 1
1908 : 2900             ex_andi and #0              ;execute immediate opcodes
190a : 60                       rts
190b : 4900             ex_eori eor #0              ;execute immediate opcodes
190d : 60                       rts
190e : 0900             ex_orai ora #0              ;execute immediate opcodes
1910 : 60                       rts
1911 : 6900             ex_adci adc #0              ;execute immediate opcodes
1913 : 60                       rts
1914 : e900             ex_sbci sbc #0              ;execute immediate opcodes
1916 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
1917 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
191b : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
191c : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
1920 :                  rASL                        ;expected result ASL & ROL -carry  
1920 : 86048200         rROL    db  $86,$04,$82,0   ; "
1924 : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
1928 :                  rLSR                        ;expected result LSR & ROR -carry
1928 : 61412000         rROR    db  $61,$41,$20,0   ; "
192c : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
1930 :                  fASL                        ;expected flags for shifts
1930 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
1934 : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
1938 :                  fLSR
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   13
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1938 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
193c : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
1940 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
1945 : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
194a : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
194e : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
1952 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
1956 : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
195a : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
195e : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
1962 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
1966 : 02800080         absflo  db  fz,fn,0,fn
196a :                  data_bss_end
                        
                        
                                code
1b00 =                          org code_segment
1b00 : d8               start   cld
1b01 : a2ff                     ldx #$ff
1b03 : 9a                       txs
1b04 : a900                     lda #0          ;*** test 0 = initialize
1b06 : 8d0019                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
1b09 : 20065b                   jsr report_init
                            endif
                            
                        ;pretest small branch offset
1b0c : a205                     ldx #5
1b0e : 4c361b                   jmp psb_test
1b11 :                  psb_bwok
1b11 : a005                     ldy #5
1b13 : d008                     bne psb_forw
                                trap        ;branch should be taken
                        
1b18 : 88                       dey         ;forward landing zone
1b19 : 88                       dey
1b1a : 88                       dey
1b1b : 88                       dey
1b1c : 88                       dey
1b1d :                  psb_forw
1b1d : 88                       dey
1b1e : 88                       dey
1b1f : 88                       dey
1b20 : 88                       dey
1b21 : 88                       dey
1b22 : f017                     beq psb_fwok
                                trap        ;forward offset
                        
                        
1b27 : ca                       dex         ;backward landing zone
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   14
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1b28 : ca                       dex
1b29 : ca                       dex
1b2a : ca                       dex
1b2b : ca                       dex
1b2c :                  psb_back
1b2c : ca                       dex
1b2d : ca                       dex
1b2e : ca                       dex
1b2f : ca                       dex
1b30 : ca                       dex
1b31 : f0de                     beq psb_bwok
                                trap        ;backward offset
                        
1b36 :                  psb_test
1b36 : d0f4                     bne psb_back
                                trap        ;branch should be taken
                        
1b3b :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   15
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
1b4a : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
1b4c :                  range_loop
1b4c : 88                       dey             ;next relative address
1b4d : 98                       tya
1b4e : aa                       tax             ;precharge count to end of loop
1b4f : 1008                     bpl range_fw    ;calculate relative address
1b51 : 18                       clc             ;avoid branch self or to relative address of branch
1b52 : 6902                     adc #2
1b54 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
1b55 : ea                       nop
1b56 : ea                       nop
1b57 : ea                       nop
1b58 : ea                       nop
1b59 :                  range_fw
1b59 : ea                       nop
1b5a : ea                       nop
1b5b : ea                       nop
1b5c : ea                       nop
1b5d : ea                       nop
1b5e : 497f                     eor #$7f        ;complement except sign
1b60 : 8dec1b                   sta range_adr   ;load into test target
1b63 : a900                     lda #0          ;should set zero flag in status register
1b65 : 4ceb1b                   jmp range_op
                                
1b68 : ca                       dex             ; offset landing zone - backward branch too far
1b69 : ca                       dex
1b6a : ca                       dex
1b6b : ca                       dex
1b6c : ca                       dex
                                ;relative address target field with branch under test in the middle
1b6d : ca                       dex             ;-128 - max backward
1b6e : ca                       dex
1b6f : ca                       dex
1b70 : ca                       dex
1b71 : ca                       dex
1b72 : ca                       dex
1b73 : ca                       dex
1b74 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   16
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1b75 : ca                       dex             ;-120
1b76 : ca                       dex
1b77 : ca                       dex
1b78 : ca                       dex
1b79 : ca                       dex
1b7a : ca                       dex
1b7b : ca                       dex
1b7c : ca                       dex
1b7d : ca                       dex
1b7e : ca                       dex
1b7f : ca                       dex             ;-110
1b80 : ca                       dex
1b81 : ca                       dex
1b82 : ca                       dex
1b83 : ca                       dex
1b84 : ca                       dex
1b85 : ca                       dex
1b86 : ca                       dex
1b87 : ca                       dex
1b88 : ca                       dex
1b89 : ca                       dex             ;-100
1b8a : ca                       dex
1b8b : ca                       dex
1b8c : ca                       dex
1b8d : ca                       dex
1b8e : ca                       dex
1b8f : ca                       dex
1b90 : ca                       dex
1b91 : ca                       dex
1b92 : ca                       dex
1b93 : ca                       dex             ;-90
1b94 : ca                       dex
1b95 : ca                       dex
1b96 : ca                       dex
1b97 : ca                       dex
1b98 : ca                       dex
1b99 : ca                       dex
1b9a : ca                       dex
1b9b : ca                       dex
1b9c : ca                       dex
1b9d : ca                       dex             ;-80
1b9e : ca                       dex
1b9f : ca                       dex
1ba0 : ca                       dex
1ba1 : ca                       dex
1ba2 : ca                       dex
1ba3 : ca                       dex
1ba4 : ca                       dex
1ba5 : ca                       dex
1ba6 : ca                       dex
1ba7 : ca                       dex             ;-70
1ba8 : ca                       dex
1ba9 : ca                       dex
1baa : ca                       dex
1bab : ca                       dex
1bac : ca                       dex
1bad : ca                       dex
1bae : ca                       dex
1baf : ca                       dex
1bb0 : ca                       dex
1bb1 : ca                       dex             ;-60
1bb2 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   17
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1bb3 : ca                       dex
1bb4 : ca                       dex
1bb5 : ca                       dex
1bb6 : ca                       dex
1bb7 : ca                       dex
1bb8 : ca                       dex
1bb9 : ca                       dex
1bba : ca                       dex
1bbb : ca                       dex             ;-50
1bbc : ca                       dex
1bbd : ca                       dex
1bbe : ca                       dex
1bbf : ca                       dex
1bc0 : ca                       dex
1bc1 : ca                       dex
1bc2 : ca                       dex
1bc3 : ca                       dex
1bc4 : ca                       dex
1bc5 : ca                       dex             ;-40
1bc6 : ca                       dex
1bc7 : ca                       dex
1bc8 : ca                       dex
1bc9 : ca                       dex
1bca : ca                       dex
1bcb : ca                       dex
1bcc : ca                       dex
1bcd : ca                       dex
1bce : ca                       dex
1bcf : ca                       dex             ;-30
1bd0 : ca                       dex
1bd1 : ca                       dex
1bd2 : ca                       dex
1bd3 : ca                       dex
1bd4 : ca                       dex
1bd5 : ca                       dex
1bd6 : ca                       dex
1bd7 : ca                       dex
1bd8 : ca                       dex
1bd9 : ca                       dex             ;-20
1bda : ca                       dex
1bdb : ca                       dex
1bdc : ca                       dex
1bdd : ca                       dex
1bde : ca                       dex
1bdf : ca                       dex
1be0 : ca                       dex
1be1 : ca                       dex
1be2 : ca                       dex
1be3 : ca                       dex             ;-10
1be4 : ca                       dex
1be5 : ca                       dex
1be6 : ca                       dex
1be7 : ca                       dex
1be8 : ca                       dex
1be9 : ca                       dex
1bea : ca                       dex             ;-3
1beb :                  range_op                ;test target with zero flag=0, z=1 if previous dex
1bec =                  range_adr   = *+1       ;modifiable relative address
1beb : f03e                     beq *+64        ;+64 if called without modification
1bed : ca                       dex             ;+0
1bee : ca                       dex
1bef : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   18
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1bf0 : ca                       dex
1bf1 : ca                       dex
1bf2 : ca                       dex
1bf3 : ca                       dex
1bf4 : ca                       dex
1bf5 : ca                       dex
1bf6 : ca                       dex
1bf7 : ca                       dex             ;+10
1bf8 : ca                       dex
1bf9 : ca                       dex
1bfa : ca                       dex
1bfb : ca                       dex
1bfc : ca                       dex
1bfd : ca                       dex
1bfe : ca                       dex
1bff : ca                       dex
1c00 : ca                       dex
1c01 : ca                       dex             ;+20
1c02 : ca                       dex
1c03 : ca                       dex
1c04 : ca                       dex
1c05 : ca                       dex
1c06 : ca                       dex
1c07 : ca                       dex
1c08 : ca                       dex
1c09 : ca                       dex
1c0a : ca                       dex
1c0b : ca                       dex             ;+30
1c0c : ca                       dex
1c0d : ca                       dex
1c0e : ca                       dex
1c0f : ca                       dex
1c10 : ca                       dex
1c11 : ca                       dex
1c12 : ca                       dex
1c13 : ca                       dex
1c14 : ca                       dex
1c15 : ca                       dex             ;+40
1c16 : ca                       dex
1c17 : ca                       dex
1c18 : ca                       dex
1c19 : ca                       dex
1c1a : ca                       dex
1c1b : ca                       dex
1c1c : ca                       dex
1c1d : ca                       dex
1c1e : ca                       dex
1c1f : ca                       dex             ;+50
1c20 : ca                       dex
1c21 : ca                       dex
1c22 : ca                       dex
1c23 : ca                       dex
1c24 : ca                       dex
1c25 : ca                       dex
1c26 : ca                       dex
1c27 : ca                       dex
1c28 : ca                       dex
1c29 : ca                       dex             ;+60
1c2a : ca                       dex
1c2b : ca                       dex
1c2c : ca                       dex
1c2d : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   19
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1c2e : ca                       dex
1c2f : ca                       dex
1c30 : ca                       dex
1c31 : ca                       dex
1c32 : ca                       dex
1c33 : ca                       dex             ;+70
1c34 : ca                       dex
1c35 : ca                       dex
1c36 : ca                       dex
1c37 : ca                       dex
1c38 : ca                       dex
1c39 : ca                       dex
1c3a : ca                       dex
1c3b : ca                       dex
1c3c : ca                       dex
1c3d : ca                       dex             ;+80
1c3e : ca                       dex
1c3f : ca                       dex
1c40 : ca                       dex
1c41 : ca                       dex
1c42 : ca                       dex
1c43 : ca                       dex
1c44 : ca                       dex
1c45 : ca                       dex
1c46 : ca                       dex
1c47 : ca                       dex             ;+90
1c48 : ca                       dex
1c49 : ca                       dex
1c4a : ca                       dex
1c4b : ca                       dex
1c4c : ca                       dex
1c4d : ca                       dex
1c4e : ca                       dex
1c4f : ca                       dex
1c50 : ca                       dex
1c51 : ca                       dex             ;+100
1c52 : ca                       dex
1c53 : ca                       dex
1c54 : ca                       dex
1c55 : ca                       dex
1c56 : ca                       dex
1c57 : ca                       dex
1c58 : ca                       dex
1c59 : ca                       dex
1c5a : ca                       dex
1c5b : ca                       dex             ;+110
1c5c : ca                       dex
1c5d : ca                       dex
1c5e : ca                       dex
1c5f : ca                       dex
1c60 : ca                       dex
1c61 : ca                       dex
1c62 : ca                       dex
1c63 : ca                       dex
1c64 : ca                       dex
1c65 : ca                       dex             ;+120
1c66 : ca                       dex
1c67 : ca                       dex
1c68 : ca                       dex
1c69 : ca                       dex
1c6a : ca                       dex
1c6b : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   20
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1c6c : ea                       nop             ;offset landing zone - forward branch too far
1c6d : ea                       nop
1c6e : ea                       nop
1c6f : ea                       nop
1c70 : ea                       nop
1c71 : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
                        
1c76 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
1c77 : ea                       nop
1c78 : ea                       nop
1c79 : ea                       nop
1c7a : ea                       nop
1c7b :                  range_ok
1c7b : ea                       nop
1c7c : ea                       nop
1c7d : ea                       nop
1c7e : ea                       nop
1c7f : ea                       nop
1c80 : c000                     cpy #0
1c82 : f003                     beq range_end   
1c84 : 4c4c1b                   jmp range_loop
1c87 :                  range_end               ;range test successful
                            endif
                                next_test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
1c96 : c001                     cpy #1          ;testing BNE true
1c98 : d003                     bne test_bne
                                trap 
                        
1c9d :                  test_bne
1c9d : a900                     lda #0 
1c9f : c900                     cmp #0          ;test compare immediate 
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
1cb0 : c901                     cmp #1
                                trap_eq 
                        
                                trap_cs
                        
                                trap_pl
                        
1cc1 : aa                       tax 
1cc2 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
1cd3 : e001                     cpx #1
                                trap_eq 
                        
                                trap_cs
                        
                                trap_pl
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   21
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1ce4 : a8                       tay 
1ce5 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
1cf6 : c001                     cpy #1
                                trap_eq 
                        
                                trap_cs
                        
                                trap_pl
                        
                                next_test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
1d16 : a2ff                     ldx #$ff        ;initialize stack
1d18 : 9a                       txs
1d19 : a955                     lda #$55
1d1b : 48                       pha
1d1c : a9aa                     lda #$aa
1d1e : 48                       pha
1d1f : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
                        
1d27 : ba                       tsx
1d28 : 8a                       txa             ;overwrite accu
1d29 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
                        
1d30 : 68                       pla
1d31 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
                        
1d38 : 68                       pla
1d39 : c955                     cmp #$55
                                trap_ne
                        
1d40 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
                        
1d48 : ba                       tsx
1d49 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
                        
                                next_test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                        
1d63 : 101a                     bpl nbr1        ;branches should not be taken
1d65 : 501b                     bvc nbr2
1d67 : 901c                     bcc nbr3
1d69 : d01d                     bne nbr4
1d6b : 3003                     bmi br1         ;branches should be taken
                                trap 
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   22
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1d70 : 7003             br1     bvs br2
                                trap 
                        
1d75 : b003             br2     bcs br3
                                trap 
                        
1d7a : f00f             br3     beq br4
                                trap 
                        
1d7f :                  nbr1
                                trap            ;previous bpl taken 
                        
1d82 :                  nbr2
                                trap            ;previous bvc taken
                        
1d85 :                  nbr3
                                trap            ;previous bcc taken
                        
1d88 :                  nbr4
                                trap            ;previous bne taken
                        
1d8b : 08               br4     php
1d8c : ba                       tsx
1d8d : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
                        
1d94 : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
                        
                                trap_ne
                        
1d9c : ba                       tsx
1d9d : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
                        
                                set_stat 0      ;all off
                        
1da8 : 301a                     bmi nbr11       ;branches should not be taken
1daa : 701b                     bvs nbr12
1dac : b01c                     bcs nbr13
1dae : f01d                     beq nbr14
1db0 : 1003                     bpl br11        ;branches should be taken
                                trap 
                        
1db5 : 5003             br11    bvc br12
                                trap 
                        
1dba : 9003             br12    bcc br13
                                trap 
                        
1dbf : d00f             br13    bne br14
                                trap 
                        
1dc4 :                  nbr11
                                trap            ;previous bmi taken 
                        
1dc7 :                  nbr12
                                trap            ;previous bvs taken 
                        
1dca :                  nbr13
                                trap            ;previous bcs taken 
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   23
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1dcd :                  nbr14
                                trap            ;previous beq taken 
                        
1dd0 : 08               br14    php
1dd1 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
                        
                                trap_ne
                        
                                ;crosscheck flags
                                set_stat zero
                        
1ddd : d002                     bne brzs1
1ddf : f003                     beq brzs2
1de1 :                  brzs1
                                trap            ;branch zero/non zero
                        
1de4 : b002             brzs2   bcs brzs3
1de6 : 9003                     bcc brzs4
1de8 :                  brzs3
                                trap            ;branch carry/no carry
                        
1deb : 3002             brzs4   bmi brzs5
1ded : 1003                     bpl brzs6
1def :                  brzs5
                                trap            ;branch minus/plus
                        
1df2 : 7002             brzs6   bvs brzs7
1df4 : 5003                     bvc brzs8
1df6 :                  brzs7
                                trap            ;branch overflow/no overflow
                        
1df9 :                  brzs8
                                set_stat carry
                        
1dfd : f002                     beq brcs1
1dff : d003                     bne brcs2
1e01 :                  brcs1
                                trap            ;branch zero/non zero
                        
1e04 : 9002             brcs2   bcc brcs3
1e06 : b003                     bcs brcs4
1e08 :                  brcs3
                                trap            ;branch carry/no carry
                        
1e0b : 3002             brcs4   bmi brcs5
1e0d : 1003                     bpl brcs6
1e0f :                  brcs5
                                trap            ;branch minus/plus
                        
1e12 : 7002             brcs6   bvs brcs7
1e14 : 5003                     bvc brcs8
1e16 :                  brcs7
                                trap            ;branch overflow/no overflow
                        
                        
1e19 :                  brcs8
                                set_stat minus
                        
1e1d : f002                     beq brmi1
1e1f : d003                     bne brmi2
1e21 :                  brmi1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   24
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap            ;branch zero/non zero
                        
1e24 : b002             brmi2   bcs brmi3
1e26 : 9003                     bcc brmi4
1e28 :                  brmi3
                                trap            ;branch carry/no carry
                        
1e2b : 1002             brmi4   bpl brmi5
1e2d : 3003                     bmi brmi6
1e2f :                  brmi5
                                trap            ;branch minus/plus
                        
1e32 : 7002             brmi6   bvs brmi7
1e34 : 5003                     bvc brmi8
1e36 :                  brmi7
                                trap            ;branch overflow/no overflow
                        
1e39 :                  brmi8
                                set_stat overfl
                        
1e3d : f002                     beq brvs1
1e3f : d003                     bne brvs2
1e41 :                  brvs1
                                trap            ;branch zero/non zero
                        
1e44 : b002             brvs2   bcs brvs3
1e46 : 9003                     bcc brvs4
1e48 :                  brvs3
                                trap            ;branch carry/no carry
                        
1e4b : 3002             brvs4   bmi brvs5
1e4d : 1003                     bpl brvs6
1e4f :                  brvs5
                                trap            ;branch minus/plus
                        
1e52 : 5002             brvs6   bvc brvs7
1e54 : 7003                     bvs brvs8
1e56 :                  brvs7
                                trap            ;branch overflow/no overflow
                        
1e59 :                  brvs8
                                set_stat $ff-zero
                        
1e5d : f002                     beq brzc1
1e5f : d003                     bne brzc2
1e61 :                  brzc1
                                trap            ;branch zero/non zero
                        
1e64 : 9002             brzc2   bcc brzc3
1e66 : b003                     bcs brzc4
1e68 :                  brzc3
                                trap            ;branch carry/no carry
                        
1e6b : 1002             brzc4   bpl brzc5
1e6d : 3003                     bmi brzc6
1e6f :                  brzc5
                                trap            ;branch minus/plus
                        
1e72 : 5002             brzc6   bvc brzc7
1e74 : 7003                     bvs brzc8
1e76 :                  brzc7
                                trap            ;branch overflow/no overflow
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   25
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1e79 :                  brzc8
                                set_stat $ff-carry
                        
1e7d : d002                     bne brcc1
1e7f : f003                     beq brcc2
1e81 :                  brcc1
                                trap            ;branch zero/non zero
                        
1e84 : b002             brcc2   bcs brcc3
1e86 : 9003                     bcc brcc4
1e88 :                  brcc3
                                trap            ;branch carry/no carry
                        
1e8b : 1002             brcc4   bpl brcc5
1e8d : 3003                     bmi brcc6
1e8f :                  brcc5
                                trap            ;branch minus/plus
                        
1e92 : 5002             brcc6   bvc brcc7
1e94 : 7003                     bvs brcc8
1e96 :                  brcc7
                                trap            ;branch overflow/no overflow
                        
1e99 :                  brcc8
                                set_stat $ff-minus
                        
1e9d : d002                     bne brpl1
1e9f : f003                     beq brpl2
1ea1 :                  brpl1
                                trap            ;branch zero/non zero
                        
1ea4 : 9002             brpl2   bcc brpl3
1ea6 : b003                     bcs brpl4
1ea8 :                  brpl3
                                trap            ;branch carry/no carry
                        
1eab : 3002             brpl4   bmi brpl5
1ead : 1003                     bpl brpl6
1eaf :                  brpl5
                                trap            ;branch minus/plus
                        
1eb2 : 5002             brpl6   bvc brpl7
1eb4 : 7003                     bvs brpl8
1eb6 :                  brpl7
                                trap            ;branch overflow/no overflow
                        
1eb9 :                  brpl8
                                set_stat $ff-overfl
                        
1ebd : d002                     bne brvc1
1ebf : f003                     beq brvc2
1ec1 :                  brvc1
                                trap            ;branch zero/non zero
                        
1ec4 : 9002             brvc2   bcc brvc3
1ec6 : b003                     bcs brvc4
1ec8 :                  brvc3
                                trap            ;branch carry/no carry
                        
1ecb : 1002             brvc4   bpl brvc5
1ecd : 3003                     bmi brvc6
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   26
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1ecf :                  brvc5
                                trap            ;branch minus/plus
                        
1ed2 : 7002             brvc6   bvs brvc7
1ed4 : 5003                     bvc brvc8
1ed6 :                  brvc7
                                trap            ;branch overflow/no overflow
                        
1ed9 :                  brvc8
                                next_test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
1ee8 : a255                     ldx #$55        ;x & y protected
1eea : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                        
1ef2 : 48                       pha
                                tst_a 1,$ff
                        
                                set_a 0,0
                        
1f0b : 48                       pha
                                tst_a 0,0
                        
                                set_a $ff,$ff
                        
1f24 : 48                       pha
                                tst_a $ff,$ff
                        
                                set_a 1,0
                        
1f3d : 48                       pha
                                tst_a 1,0
                        
                                set_a 0,$ff
                        
1f56 : 48                       pha
                                tst_a 0,$ff
                        
                                set_a $ff,0
                        
1f6f : 48                       pha
                                tst_a $ff,0
                        
                                set_a 0,$ff     ;pull
                        
1f88 : 68                       pla
                                tst_a $ff,$ff-zero
                        
                                set_a $ff,0
                        
1fa1 : 68                       pla
                                tst_a 0,zero
                        
                                set_a $fe,$ff
                        
1fba : 68                       pla
                                tst_a 1,$ff-zero-minus
                        
                                set_a 0,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   27
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1fd3 : 68                       pla
                                tst_a $ff,minus
                        
                                set_a $ff,$ff
                        
1fec : 68                       pla
                                tst_a 0,$ff-minus
                        
                                set_a $fe,0
                        
2005 : 68                       pla
                                tst_a 1,0
                        
2018 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
                        
201f : c0aa                     cpy #$aa
                                trap_ne
                        
                                next_test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                        
203b : 49c3                     eor #$c3
                                tst_a $ff,fn
                        
                                set_a $c3,0
                        
2055 : 49c3                     eor #$c3
                                tst_a 0,fz
                        
                                next_test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
2078 : a224                     ldx #$24
207a : a042                     ldy #$42
                                set_a $18,0
                        
2082 : ea                       nop
                                tst_a $18,0
                        
2095 : e024                     cpx #$24
                                trap_ne
                        
209c : c042                     cpy #$42
                                trap_ne
                        
20a3 : a2db                     ldx #$db
20a5 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                        
20ad : ea                       nop
                                tst_a $e7,$ff
                        
20c0 : e0db                     cpx #$db
                                trap_ne
                        
20c7 : c0bd                     cpy #$bd
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   28
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
                                next_test
                        
                                
                        ; jump absolute
                                set_stat $0
                        
20e1 : a946                     lda #'F'
20e3 : a241                     ldx #'A'
20e5 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
20e7 : 4cad59                   jmp test_far
20ea : ea                       nop
20eb : ea                       nop
                                trap_ne         ;runover protection
                        
20f1 : e8                       inx
20f2 : e8                       inx
20f3 :                  far_ret 
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
2107 : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
                        
210e : e042                     cpx #('A'+1)
                                trap_ne
                        
2115 : c04f                     cpy #('R'-3)
                                trap_ne
                        
211c : ca                       dex
211d : c8                       iny
211e : c8                       iny
211f : c8                       iny
2120 : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
2122 : 4c2e21                   jmp test_near
2125 : ea                       nop
2126 : ea                       nop
                                trap_ne         ;runover protection
                        
212c : e8                       inx
212d : e8                       inx
212e :                  test_near
                                trap_eq         ;passed flags OK?
                        
                                trap_mi
                        
                                trap_cc
                        
                                trap_vc
                        
2142 : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
                        
2149 : e041                     cpx #'A'
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   29
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
2150 : c052                     cpy #'R'
                                trap_ne
                        
                                next_test
                        
                                
                        ; jump indirect
                                set_stat 0
                        
216a : a949                     lda #'I'
216c : a24e                     ldx #'N'
216e : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
2170 : 6cf459                   jmp (ptr_tst_ind)
2173 : ea                       nop
                                trap_ne         ;runover protection
                        
2179 : 88                       dey
217a : 88                       dey
217b :                  ind_ret 
217b : 08                       php             ;either SP or Y count will fail, if we do not hit
217c : 88                       dey
217d : 88                       dey
217e : 88                       dey
217f : 28                       plp
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
2194 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
                        
219b : e04f                     cpx #('N'+1)
                                trap_ne
                        
21a2 : c03e                     cpy #('D'-6)
                                trap_ne
                        
21a9 : ba                       tsx             ;SP check
21aa : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                        
21c4 : a94a                     lda #'J'
21c6 : a253                     ldx #'S'
21c8 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
21ca : 20485a                   jsr test_jsr
21cc =                  jsr_ret = *-1           ;last address of jsr = return address
21cd : 08                       php             ;either SP or Y count will fail, if we do not hit
21ce : 88                       dey
21cf : 88                       dey
21d0 : 88                       dey
21d1 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   30
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
21e6 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
                        
21ed : e054                     cpx #('S'+1)
                                trap_ne
                        
21f4 : c04c                     cpy #('R'-6)
                                trap_ne
                        
21fb : ba                       tsx             ;sp?
21fc : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                brk
                            else
2212 : a922                     lda #hi brk_ret ;emulated break
2214 : 48                       pha
2215 : a929                     lda #lo brk_ret
2217 : 48                       pha
2218 : a930                     lda #fao        ;set break & unused on stack
221a : 48                       pha
                                set_stat intdis
                        
221f : a942                     lda #'B'
2221 : a252                     ldx #'R'
2223 : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
2225 : 4cab5a                   jmp irq_trap
                            endif
2228 : 88                       dey             ;should not be executed
2229 :                  brk_ret                 ;address of break return
2229 : 08                       php             ;either SP or Y count will fail, if we do not hit
222a : 88                       dey
222b : 88                       dey
222c : 88                       dey
222d : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
                        
2234 : e053                     cpx #('R'+1)
                                trap_ne
                        
223b : c045                     cpy #('K'-6)
                                trap_ne
                        
2242 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   31
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                trap_ne
                        
224a : ba                       tsx             ;sp?
224b : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                        
2265 : 18                       clc
                                tst_stat $ff-carry
                        
2271 : 38                       sec
                                tst_stat $ff
                        
                            if I_flag = 3
227d : 58                       cli
                                tst_stat $ff-intdis
                        
2289 : 78                       sei
                                tst_stat $ff
                        
                            endif
2295 : d8                       cld
                                tst_stat $ff-decmode
                        
22a1 : f8                       sed
                                tst_stat $ff
                        
22ad : b8                       clv
                                tst_stat $ff-overfl
                        
                                set_stat 0
                        
                                tst_stat 0
                        
22c8 : 38                       sec
                                tst_stat carry
                        
22d4 : 18                       clc
                                tst_stat 0  
                        
                            if I_flag = 3
22e0 : 78                       sei
                                tst_stat intdis
                        
22ec : 58                       cli
                                tst_stat 0
                        
                            endif  
22f8 : f8                       sed
                                tst_stat decmode
                        
2304 : d8                       cld
                                tst_stat 0  
                        
                                set_stat overfl
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   32
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_stat overfl
                        
231f : b8                       clv
                                tst_stat 0
                        
                                next_test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
233a : a2fe                     ldx #$fe
                                set_stat $ff
                        
2340 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
                        
2353 : e8                       inx             ;00
                                tst_x 0,$ff-minus
                        
2366 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
                        
2379 : ca                       dex             ;00
                                tst_x 0,$ff-minus
                        
238c : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
                        
239f : ca                       dex             ;fe
                                set_stat 0
                        
23a4 : e8                       inx             ;ff
                                tst_x $ff,minus
                        
23b7 : e8                       inx             ;00
                                tst_x 0,zero
                        
23ca : e8                       inx             ;01
                                tst_x 1,0
                        
23dd : ca                       dex             ;00
                                tst_x 0,zero
                        
23f0 : ca                       dex             ;ff
                                tst_x $ff,minus
                        
                        
2403 : a0fe                     ldy #$fe
                                set_stat $ff
                        
2409 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
                        
241c : c8                       iny             ;00
                                tst_y 0,$ff-minus
                        
242f : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
                        
2442 : 88                       dey             ;00
                                tst_y 0,$ff-minus
                        
2455 : 88                       dey             ;ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   33
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_y $ff,$ff-zero
                        
2468 : 88                       dey             ;fe
                                set_stat 0
                        
246d : c8                       iny             ;ff
                                tst_y $ff,0+minus
                        
2480 : c8                       iny             ;00
                                tst_y 0,zero
                        
2493 : c8                       iny             ;01
                                tst_y 1,0
                        
24a6 : 88                       dey             ;00
                                tst_y 0,zero
                        
24b9 : 88                       dey             ;ff
                                tst_y $ff,minus
                        
                                        
24cc : a2ff                     ldx #$ff
                                set_stat $ff
                        
24d2 : 8a                       txa
                                tst_a $ff,$ff-zero
                        
24e5 : 08                       php
24e6 : e8                       inx             ;00
24e7 : 28                       plp
24e8 : 8a                       txa
                                tst_a 0,$ff-minus
                        
24fb : 08                       php
24fc : e8                       inx             ;01
24fd : 28                       plp
24fe : 8a                       txa
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
2515 : 8a                       txa
                                tst_a 1,0
                        
2528 : 08                       php
2529 : ca                       dex             ;00
252a : 28                       plp
252b : 8a                       txa
                                tst_a 0,zero
                        
253e : 08                       php
253f : ca                       dex             ;ff
2540 : 28                       plp
2541 : 8a                       txa
                                tst_a $ff,minus
                        
                                                
2554 : a0ff                     ldy #$ff
                                set_stat $ff
                        
255a : 98                       tya
                                tst_a $ff,$ff-zero
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   34
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
256d : 08                       php
256e : c8                       iny             ;00
256f : 28                       plp
2570 : 98                       tya
                                tst_a 0,$ff-minus
                        
2583 : 08                       php
2584 : c8                       iny             ;01
2585 : 28                       plp
2586 : 98                       tya
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
259d : 98                       tya
                                tst_a 1,0
                        
25b0 : 08                       php
25b1 : 88                       dey             ;00
25b2 : 28                       plp
25b3 : 98                       tya
                                tst_a 0,zero
                        
25c6 : 08                       php
25c7 : 88                       dey             ;ff
25c8 : 28                       plp
25c9 : 98                       tya
                                tst_a $ff,minus
                        
                        
                                load_flag $ff
                        
25de : 48                       pha
25df : a2ff                     ldx #$ff        ;ff
25e1 : 8a                       txa
25e2 : 28                       plp             
25e3 : a8                       tay
                                tst_y $ff,$ff-zero
                        
25f6 : 08                       php
25f7 : e8                       inx             ;00
25f8 : 8a                       txa
25f9 : 28                       plp
25fa : a8                       tay
                                tst_y 0,$ff-minus
                        
260d : 08                       php
260e : e8                       inx             ;01
260f : 8a                       txa
2610 : 28                       plp
2611 : a8                       tay
                                tst_y 1,$ff-minus-zero
                        
                                load_flag 0
                        
2626 : 48                       pha
2627 : a900                     lda #0
2629 : 8a                       txa
262a : 28                       plp
262b : a8                       tay
                                tst_y 1,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   35
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
263e : 08                       php
263f : ca                       dex             ;00
2640 : 8a                       txa
2641 : 28                       plp
2642 : a8                       tay
                                tst_y 0,zero
                        
2655 : 08                       php
2656 : ca                       dex             ;ff
2657 : 8a                       txa
2658 : 28                       plp
2659 : a8                       tay
                                tst_y $ff,minus
                        
                        
                        
                                load_flag $ff
                        
266e : 48                       pha
266f : a0ff                     ldy #$ff        ;ff
2671 : 98                       tya
2672 : 28                       plp
2673 : aa                       tax
                                tst_x $ff,$ff-zero
                        
2686 : 08                       php
2687 : c8                       iny             ;00
2688 : 98                       tya
2689 : 28                       plp
268a : aa                       tax
                                tst_x 0,$ff-minus
                        
269d : 08                       php
269e : c8                       iny             ;01
269f : 98                       tya
26a0 : 28                       plp
26a1 : aa                       tax
                                tst_x 1,$ff-minus-zero
                        
                                load_flag 0
                        
26b6 : 48                       pha
26b7 : a900                     lda #0          ;preset status
26b9 : 98                       tya
26ba : 28                       plp
26bb : aa                       tax
                                tst_x 1,0
                        
26ce : 08                       php
26cf : 88                       dey             ;00
26d0 : 98                       tya
26d1 : 28                       plp
26d2 : aa                       tax
                                tst_x 0,zero
                        
26e5 : 08                       php
26e6 : 88                       dey             ;ff
26e7 : 98                       tya
26e8 : 28                       plp
26e9 : aa                       tax
                                tst_x $ff,minus
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   36
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                next_test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
270b : a201                     ldx #1          ;01
                                set_stat $ff
                        
2711 : 9a                       txs
2712 : 08                       php
2713 : ad0101                   lda $101
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
2721 : 9a                       txs
2722 : 08                       php
2723 : ad0101                   lda $101
                                cmp_flag 0
                        
                                trap_ne
                        
272d : ca                       dex             ;00
                                set_stat $ff
                        
2732 : 9a                       txs
2733 : 08                       php
2734 : ad0001                   lda $100
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
2742 : 9a                       txs
2743 : 08                       php
2744 : ad0001                   lda $100
                                cmp_flag 0
                        
                                trap_ne
                        
274e : ca                       dex             ;ff
                                set_stat $ff
                        
2753 : 9a                       txs
2754 : 08                       php
2755 : adff01                   lda $1ff
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
2763 : 9a                       txs
2764 : 08                       php
2765 : adff01                   lda $1ff
                                cmp_flag 0
                        
                                
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   37
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

276a : a201                     ldx #1
276c : 9a                       txs             ;sp=01
                                set_stat $ff
                        
2771 : ba                       tsx             ;clears Z, N
2772 : 08                       php             ;sp=00
2773 : e001                     cpx #1
                                trap_ne
                        
277a : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
                        
                                trap_ne
                        
                                set_stat $ff
                        
2788 : ba                       tsx             ;clears N, sets Z
2789 : 08                       php             ;sp=ff
278a : e000                     cpx #0
                                trap_ne
                        
2791 : ad0001                   lda $100
                                cmp_flag $ff-minus
                        
                                trap_ne
                        
                                set_stat $ff
                        
279f : ba                       tsx             ;clears N, sets Z
27a0 : 08                       php             ;sp=fe
27a1 : e0ff                     cpx #$ff
                                trap_ne
                        
27a8 : adff01                   lda $1ff
                                cmp_flag $ff-zero
                        
                                trap_ne
                        
                                
27b2 : a201                     ldx #1
27b4 : 9a                       txs             ;sp=01
                                set_stat 0
                        
27b9 : ba                       tsx             ;clears Z, N
27ba : 08                       php             ;sp=00
27bb : e001                     cpx #1
                                trap_ne
                        
27c2 : ad0101                   lda $101
                                cmp_flag 0
                        
                                trap_ne
                        
                                set_stat 0
                        
27d0 : ba                       tsx             ;clears N, sets Z
27d1 : 08                       php             ;sp=ff
27d2 : e000                     cpx #0
                                trap_ne
                        
27d9 : ad0001                   lda $100
                                cmp_flag zero
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   38
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                trap_ne
                        
                                set_stat 0
                        
27e7 : ba                       tsx             ;clears N, sets Z
27e8 : 08                       php             ;sp=fe
27e9 : e0ff                     cpx #$ff
                                trap_ne
                        
27f0 : adff01                   lda $1ff
                                cmp_flag minus
                        
                                trap_ne
                        
27fa : 68                       pla             ;sp=ff
                                next_test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
280a : a003                     ldy #3
280c :                  tldx    
                                set_stat 0
                        
2810 : b613                     ldx zp1,y
2812 : 08                       php         ;test stores do not alter flags
2813 : 8a                       txa
2814 : 49c3                     eor #$c3
2816 : 28                       plp
2817 : 990319                   sta abst,y
281a : 08                       php         ;flags after load/store sequence
281b : 49c3                     eor #$c3
281d : d91719                   cmp abs1,y  ;test result
                                trap_ne
                        
2825 : 68                       pla         ;load status
                                eor_flag 0
                        
2828 : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
2830 : 88                       dey
2831 : 10d9                     bpl tldx                  
                        
2833 : a003                     ldy #3
2835 :                  tldx1   
                                set_stat $ff
                        
2839 : b613                     ldx zp1,y
283b : 08                       php         ;test stores do not alter flags
283c : 8a                       txa
283d : 49c3                     eor #$c3
283f : 28                       plp
2840 : 990319                   sta abst,y
2843 : 08                       php         ;flags after load/store sequence
2844 : 49c3                     eor #$c3
2846 : d91719                   cmp abs1,y  ;test result
                                trap_ne
                        
284e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   39
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
2851 : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
2859 : 88                       dey
285a : 10d9                     bpl tldx1                  
                        
285c : a003                     ldy #3
285e :                  tldx2   
                                set_stat 0
                        
2862 : be1719                   ldx abs1,y
2865 : 08                       php         ;test stores do not alter flags
2866 : 8a                       txa
2867 : 49c3                     eor #$c3
2869 : aa                       tax
286a : 28                       plp
286b : 960c                     stx zpt,y
286d : 08                       php         ;flags after load/store sequence
286e : 49c3                     eor #$c3
2870 : d91300                   cmp zp1,y   ;test result
                                trap_ne
                        
2878 : 68                       pla         ;load status
                                eor_flag 0
                        
287b : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
2883 : 88                       dey
2884 : 10d8                     bpl tldx2                  
                        
2886 : a003                     ldy #3
2888 :                  tldx3   
                                set_stat $ff
                        
288c : be1719                   ldx abs1,y
288f : 08                       php         ;test stores do not alter flags
2890 : 8a                       txa
2891 : 49c3                     eor #$c3
2893 : aa                       tax
2894 : 28                       plp
2895 : 960c                     stx zpt,y
2897 : 08                       php         ;flags after load/store sequence
2898 : 49c3                     eor #$c3
289a : d91300                   cmp zp1,y   ;test result
                                trap_ne
                        
28a2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
28a5 : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
28ad : 88                       dey
28ae : 10d8                     bpl tldx3
                                
28b0 : a003                     ldy #3      ;testing store result
28b2 : a200                     ldx #0
28b4 : b90c00           tstx    lda zpt,y
28b7 : 49c3                     eor #$c3
28b9 : d91300                   cmp zp1,y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   40
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne     ;store to zp data
                        
28c1 : 960c                     stx zpt,y   ;clear                
28c3 : b90319                   lda abst,y
28c6 : 49c3                     eor #$c3
28c8 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
28d0 : 8a                       txa
28d1 : 990319                   sta abst,y  ;clear                
28d4 : 88                       dey
28d5 : 10dd                     bpl tstx
                                next_test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
28e6 : a0fd                     ldy #3+$fa
28e8 : b619             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
28ea : 8a                       txa
28eb : 990918                   sta abst-$fa,y      ;no STX abs,y!
28ee : 88                       dey
28ef : c0fa                     cpy #$fa
28f1 : b0f5                     bcs tldx4                  
28f3 : a0fd                     ldy #3+$fa
28f5 : be1d18           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
28f8 : 9612                     stx zpt-$fa&$ff,y
28fa : 88                       dey
28fb : c0fa                     cpy #$fa
28fd : b0f6                     bcs tldx5                  
28ff : a003                     ldy #3      ;testing wraparound result
2901 : a200                     ldx #0
2903 : b90c00           tstx1   lda zpt,y
2906 : d91300                   cmp zp1,y
                                trap_ne     ;store to zp data
                        
290e : 960c                     stx zpt,y   ;clear                
2910 : b90319                   lda abst,y
2913 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
291b : 8a                       txa
291c : 990319                   sta abst,y  ;clear                
291f : 88                       dey
2920 : 10e1                     bpl tstx1
                                next_test
                        
                                
                        ; LDY / STY - zp,x / abs,x
2931 : a203                     ldx #3
2933 :                  tldy    
                                set_stat 0
                        
2937 : b413                     ldy zp1,x
2939 : 08                       php         ;test stores do not alter flags
293a : 98                       tya
293b : 49c3                     eor #$c3
293d : 28                       plp
293e : 9d0319                   sta abst,x
2941 : 08                       php         ;flags after load/store sequence
2942 : 49c3                     eor #$c3
2944 : dd1719                   cmp abs1,x  ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   41
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
294c : 68                       pla         ;load status
                                eor_flag 0
                        
294f : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
2957 : ca                       dex
2958 : 10d9                     bpl tldy                  
                        
295a : a203                     ldx #3
295c :                  tldy1   
                                set_stat $ff
                        
2960 : b413                     ldy zp1,x
2962 : 08                       php         ;test stores do not alter flags
2963 : 98                       tya
2964 : 49c3                     eor #$c3
2966 : 28                       plp
2967 : 9d0319                   sta abst,x
296a : 08                       php         ;flags after load/store sequence
296b : 49c3                     eor #$c3
296d : dd1719                   cmp abs1,x  ;test result
                                trap_ne
                        
2975 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2978 : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
2980 : ca                       dex
2981 : 10d9                     bpl tldy1                  
                        
2983 : a203                     ldx #3
2985 :                  tldy2   
                                set_stat 0
                        
2989 : bc1719                   ldy abs1,x
298c : 08                       php         ;test stores do not alter flags
298d : 98                       tya
298e : 49c3                     eor #$c3
2990 : a8                       tay
2991 : 28                       plp
2992 : 940c                     sty zpt,x
2994 : 08                       php         ;flags after load/store sequence
2995 : 49c3                     eor #$c3
2997 : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
299e : 68                       pla         ;load status
                                eor_flag 0
                        
29a1 : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
29a9 : ca                       dex
29aa : 10d9                     bpl tldy2                  
                        
29ac : a203                     ldx #3
29ae :                  tldy3
                                set_stat $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   42
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
29b2 : bc1719                   ldy abs1,x
29b5 : 08                       php         ;test stores do not alter flags
29b6 : 98                       tya
29b7 : 49c3                     eor #$c3
29b9 : a8                       tay
29ba : 28                       plp
29bb : 940c                     sty zpt,x
29bd : 08                       php         ;flags after load/store sequence
29be : 49c3                     eor #$c3
29c0 : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
29c7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
29ca : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
29d2 : ca                       dex
29d3 : 10d9                     bpl tldy3
                        
29d5 : a203                     ldx #3      ;testing store result
29d7 : a000                     ldy #0
29d9 : b50c             tsty    lda zpt,x
29db : 49c3                     eor #$c3
29dd : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
29e4 : 940c                     sty zpt,x   ;clear                
29e6 : bd0319                   lda abst,x
29e9 : 49c3                     eor #$c3
29eb : dd1719                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
29f3 : 8a                       txa
29f4 : 9d0319                   sta abst,x  ;clear                
29f7 : ca                       dex
29f8 : 10df                     bpl tsty
                                next_test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
2a09 : a2fd                     ldx #3+$fa
2a0b : b419             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
2a0d : 98                       tya
2a0e : 9d0918                   sta abst-$fa,x      ;no STX abs,x!
2a11 : ca                       dex
2a12 : e0fa                     cpx #$fa
2a14 : b0f5                     bcs tldy4                  
2a16 : a2fd                     ldx #3+$fa
2a18 : bc1d18           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
2a1b : 9412                     sty zpt-$fa&$ff,x
2a1d : ca                       dex
2a1e : e0fa                     cpx #$fa
2a20 : b0f6                     bcs tldy5                  
2a22 : a203                     ldx #3      ;testing wraparound result
2a24 : a000                     ldy #0
2a26 : b50c             tsty1   lda zpt,x
2a28 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   43
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2a2f : 940c                     sty zpt,x   ;clear                
2a31 : bd0319                   lda abst,x
2a34 : dd1719                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
2a3c : 8a                       txa
2a3d : 9d0319                   sta abst,x  ;clear                
2a40 : ca                       dex
2a41 : 10e3                     bpl tsty1
                                next_test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                        
2a56 : a613                     ldx zp1
2a58 : 08                       php         ;test stores do not alter flags
2a59 : 8a                       txa
2a5a : 49c3                     eor #$c3
2a5c : aa                       tax
2a5d : 28                       plp
2a5e : 8e0319                   stx abst
2a61 : 08                       php         ;flags after load/store sequence
2a62 : 49c3                     eor #$c3
2a64 : aa                       tax
2a65 : e0c3                     cpx #$c3    ;test result
                                trap_ne
                        
2a6c : 68                       pla         ;load status
                                eor_flag 0
                        
2a6f : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2a7b : a614                     ldx zp1+1
2a7d : 08                       php         ;test stores do not alter flags
2a7e : 8a                       txa
2a7f : 49c3                     eor #$c3
2a81 : aa                       tax
2a82 : 28                       plp
2a83 : 8e0419                   stx abst+1
2a86 : 08                       php         ;flags after load/store sequence
2a87 : 49c3                     eor #$c3
2a89 : aa                       tax
2a8a : e082                     cpx #$82    ;test result
                                trap_ne
                        
2a91 : 68                       pla         ;load status
                                eor_flag 0
                        
2a94 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2aa0 : a615                     ldx zp1+2
2aa2 : 08                       php         ;test stores do not alter flags
2aa3 : 8a                       txa
2aa4 : 49c3                     eor #$c3
2aa6 : aa                       tax
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   44
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2aa7 : 28                       plp
2aa8 : 8e0519                   stx abst+2
2aab : 08                       php         ;flags after load/store sequence
2aac : 49c3                     eor #$c3
2aae : aa                       tax
2aaf : e041                     cpx #$41    ;test result
                                trap_ne
                        
2ab6 : 68                       pla         ;load status
                                eor_flag 0
                        
2ab9 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2ac5 : a616                     ldx zp1+3
2ac7 : 08                       php         ;test stores do not alter flags
2ac8 : 8a                       txa
2ac9 : 49c3                     eor #$c3
2acb : aa                       tax
2acc : 28                       plp
2acd : 8e0619                   stx abst+3
2ad0 : 08                       php         ;flags after load/store sequence
2ad1 : 49c3                     eor #$c3
2ad3 : aa                       tax
2ad4 : e000                     cpx #0      ;test result
                                trap_ne
                        
2adb : 68                       pla         ;load status
                                eor_flag 0
                        
2ade : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
2aea : a613                     ldx zp1  
2aec : 08                       php         ;test stores do not alter flags
2aed : 8a                       txa
2aee : 49c3                     eor #$c3
2af0 : aa                       tax
2af1 : 28                       plp
2af2 : 8e0319                   stx abst  
2af5 : 08                       php         ;flags after load/store sequence
2af6 : 49c3                     eor #$c3
2af8 : aa                       tax
2af9 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
                        
2b00 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2b03 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2b0f : a614                     ldx zp1+1
2b11 : 08                       php         ;test stores do not alter flags
2b12 : 8a                       txa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   45
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2b13 : 49c3                     eor #$c3
2b15 : aa                       tax
2b16 : 28                       plp
2b17 : 8e0419                   stx abst+1
2b1a : 08                       php         ;flags after load/store sequence
2b1b : 49c3                     eor #$c3
2b1d : aa                       tax
2b1e : e082                     cpx #$82    ;test result
                                trap_ne
                        
2b25 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2b28 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2b34 : a615                     ldx zp1+2
2b36 : 08                       php         ;test stores do not alter flags
2b37 : 8a                       txa
2b38 : 49c3                     eor #$c3
2b3a : aa                       tax
2b3b : 28                       plp
2b3c : 8e0519                   stx abst+2
2b3f : 08                       php         ;flags after load/store sequence
2b40 : 49c3                     eor #$c3
2b42 : aa                       tax
2b43 : e041                     cpx #$41    ;test result
                                trap_ne     ;
                        
2b4a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2b4d : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2b59 : a616                     ldx zp1+3
2b5b : 08                       php         ;test stores do not alter flags
2b5c : 8a                       txa
2b5d : 49c3                     eor #$c3
2b5f : aa                       tax
2b60 : 28                       plp
2b61 : 8e0619                   stx abst+3
2b64 : 08                       php         ;flags after load/store sequence
2b65 : 49c3                     eor #$c3
2b67 : aa                       tax
2b68 : e000                     cpx #0      ;test result
                                trap_ne
                        
2b6f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2b72 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat 0
                        
2b7e : ae1719                   ldx abs1  
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   46
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2b81 : 08                       php         ;test stores do not alter flags
2b82 : 8a                       txa
2b83 : 49c3                     eor #$c3
2b85 : aa                       tax
2b86 : 28                       plp
2b87 : 860c                     stx zpt  
2b89 : 08                       php         ;flags after load/store sequence
2b8a : 49c3                     eor #$c3
2b8c : c513                     cmp zp1     ;test result
                                trap_ne
                        
2b93 : 68                       pla         ;load status
                                eor_flag 0
                        
2b96 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2ba2 : ae1819                   ldx abs1+1
2ba5 : 08                       php         ;test stores do not alter flags
2ba6 : 8a                       txa
2ba7 : 49c3                     eor #$c3
2ba9 : aa                       tax
2baa : 28                       plp
2bab : 860d                     stx zpt+1
2bad : 08                       php         ;flags after load/store sequence
2bae : 49c3                     eor #$c3
2bb0 : c514                     cmp zp1+1   ;test result
                                trap_ne
                        
2bb7 : 68                       pla         ;load status
                                eor_flag 0
                        
2bba : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2bc6 : ae1919                   ldx abs1+2
2bc9 : 08                       php         ;test stores do not alter flags
2bca : 8a                       txa
2bcb : 49c3                     eor #$c3
2bcd : aa                       tax
2bce : 28                       plp
2bcf : 860e                     stx zpt+2
2bd1 : 08                       php         ;flags after load/store sequence
2bd2 : 49c3                     eor #$c3
2bd4 : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
2bdb : 68                       pla         ;load status
                                eor_flag 0
                        
2bde : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2bea : ae1a19                   ldx abs1+3
2bed : 08                       php         ;test stores do not alter flags
2bee : 8a                       txa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   47
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2bef : 49c3                     eor #$c3
2bf1 : aa                       tax
2bf2 : 28                       plp
2bf3 : 860f                     stx zpt+3
2bf5 : 08                       php         ;flags after load/store sequence
2bf6 : 49c3                     eor #$c3
2bf8 : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
2bff : 68                       pla         ;load status
                                eor_flag 0
                        
2c02 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
2c0e : ae1719                   ldx abs1  
2c11 : 08                       php         ;test stores do not alter flags
2c12 : 8a                       txa
2c13 : 49c3                     eor #$c3
2c15 : aa                       tax
2c16 : 28                       plp
2c17 : 860c                     stx zpt  
2c19 : 08                       php         ;flags after load/store sequence
2c1a : 49c3                     eor #$c3
2c1c : aa                       tax
2c1d : e413                     cpx zp1     ;test result
                                trap_ne
                        
2c24 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2c27 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2c33 : ae1819                   ldx abs1+1
2c36 : 08                       php         ;test stores do not alter flags
2c37 : 8a                       txa
2c38 : 49c3                     eor #$c3
2c3a : aa                       tax
2c3b : 28                       plp
2c3c : 860d                     stx zpt+1
2c3e : 08                       php         ;flags after load/store sequence
2c3f : 49c3                     eor #$c3
2c41 : aa                       tax
2c42 : e414                     cpx zp1+1   ;test result
                                trap_ne
                        
2c49 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2c4c : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2c58 : ae1919                   ldx abs1+2
2c5b : 08                       php         ;test stores do not alter flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   48
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2c5c : 8a                       txa
2c5d : 49c3                     eor #$c3
2c5f : aa                       tax
2c60 : 28                       plp
2c61 : 860e                     stx zpt+2
2c63 : 08                       php         ;flags after load/store sequence
2c64 : 49c3                     eor #$c3
2c66 : aa                       tax
2c67 : e415                     cpx zp1+2   ;test result
                                trap_ne
                        
2c6e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2c71 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2c7d : ae1a19                   ldx abs1+3
2c80 : 08                       php         ;test stores do not alter flags
2c81 : 8a                       txa
2c82 : 49c3                     eor #$c3
2c84 : aa                       tax
2c85 : 28                       plp
2c86 : 860f                     stx zpt+3
2c88 : 08                       php         ;flags after load/store sequence
2c89 : 49c3                     eor #$c3
2c8b : aa                       tax
2c8c : e416                     cpx zp1+3   ;test result
                                trap_ne
                        
2c93 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2c96 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat 0  
                        
2ca2 : a2c3                     ldx #$c3
2ca4 : 08                       php
2ca5 : ec1719                   cpx abs1    ;test result
                                trap_ne
                        
2cad : 68                       pla         ;load status
                                eor_flag 0
                        
2cb0 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2cbc : a282                     ldx #$82
2cbe : 08                       php
2cbf : ec1819                   cpx abs1+1  ;test result
                                trap_ne
                        
2cc7 : 68                       pla         ;load status
                                eor_flag 0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   49
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2cca : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2cd6 : a241                     ldx #$41
2cd8 : 08                       php
2cd9 : ec1919                   cpx abs1+2  ;test result
                                trap_ne
                        
2ce1 : 68                       pla         ;load status
                                eor_flag 0
                        
2ce4 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2cf0 : a200                     ldx #0
2cf2 : 08                       php
2cf3 : ec1a19                   cpx abs1+3  ;test result
                                trap_ne
                        
2cfb : 68                       pla         ;load status
                                eor_flag 0
                        
2cfe : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
2d0a : a2c3                     ldx #$c3  
2d0c : 08                       php
2d0d : ec1719                   cpx abs1    ;test result
                                trap_ne
                        
2d15 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2d18 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2d24 : a282                     ldx #$82
2d26 : 08                       php
2d27 : ec1819                   cpx abs1+1  ;test result
                                trap_ne
                        
2d2f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2d32 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2d3e : a241                     ldx #$41
2d40 : 08                       php
2d41 : ec1919                   cpx abs1+2  ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   50
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
2d49 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2d4c : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2d58 : a200                     ldx #0
2d5a : 08                       php
2d5b : ec1a19                   cpx abs1+3  ;test result
                                trap_ne
                        
2d63 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2d66 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
2d6e : a200                     ldx #0
2d70 : a50c                     lda zpt  
2d72 : 49c3                     eor #$c3
2d74 : c513                     cmp zp1  
                                trap_ne     ;store to zp data
                        
2d7b : 860c                     stx zpt     ;clear                
2d7d : ad0319                   lda abst  
2d80 : 49c3                     eor #$c3
2d82 : cd1719                   cmp abs1  
                                trap_ne     ;store to abs data
                        
2d8a : 8e0319                   stx abst    ;clear                
2d8d : a50d                     lda zpt+1
2d8f : 49c3                     eor #$c3
2d91 : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
                        
2d98 : 860d                     stx zpt+1   ;clear                
2d9a : ad0419                   lda abst+1
2d9d : 49c3                     eor #$c3
2d9f : cd1819                   cmp abs1+1
                                trap_ne     ;store to abs data
                        
2da7 : 8e0419                   stx abst+1  ;clear                
2daa : a50e                     lda zpt+2
2dac : 49c3                     eor #$c3
2dae : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
                        
2db5 : 860e                     stx zpt+2   ;clear                
2db7 : ad0519                   lda abst+2
2dba : 49c3                     eor #$c3
2dbc : cd1919                   cmp abs1+2
                                trap_ne     ;store to abs data
                        
2dc4 : 8e0519                   stx abst+2  ;clear                
2dc7 : a50f                     lda zpt+3
2dc9 : 49c3                     eor #$c3
2dcb : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   51
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
2dd2 : 860f                     stx zpt+3   ;clear                
2dd4 : ad0619                   lda abst+3
2dd7 : 49c3                     eor #$c3
2dd9 : cd1a19                   cmp abs1+3
                                trap_ne     ;store to abs data
                        
2de1 : 8e0619                   stx abst+3  ;clear                
                                next_test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                        
2df7 : a413                     ldy zp1  
2df9 : 08                       php         ;test stores do not alter flags
2dfa : 98                       tya
2dfb : 49c3                     eor #$c3
2dfd : a8                       tay
2dfe : 28                       plp
2dff : 8c0319                   sty abst  
2e02 : 08                       php         ;flags after load/store sequence
2e03 : 49c3                     eor #$c3
2e05 : a8                       tay
2e06 : c0c3                     cpy #$c3    ;test result
                                trap_ne
                        
2e0d : 68                       pla         ;load status
                                eor_flag 0
                        
2e10 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2e1c : a414                     ldy zp1+1
2e1e : 08                       php         ;test stores do not alter flags
2e1f : 98                       tya
2e20 : 49c3                     eor #$c3
2e22 : a8                       tay
2e23 : 28                       plp
2e24 : 8c0419                   sty abst+1
2e27 : 08                       php         ;flags after load/store sequence
2e28 : 49c3                     eor #$c3
2e2a : a8                       tay
2e2b : c082                     cpy #$82    ;test result
                                trap_ne
                        
2e32 : 68                       pla         ;load status
                                eor_flag 0
                        
2e35 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2e41 : a415                     ldy zp1+2
2e43 : 08                       php         ;test stores do not alter flags
2e44 : 98                       tya
2e45 : 49c3                     eor #$c3
2e47 : a8                       tay
2e48 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   52
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2e49 : 8c0519                   sty abst+2
2e4c : 08                       php         ;flags after load/store sequence
2e4d : 49c3                     eor #$c3
2e4f : a8                       tay
2e50 : c041                     cpy #$41    ;test result
                                trap_ne
                        
2e57 : 68                       pla         ;load status
                                eor_flag 0
                        
2e5a : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2e66 : a416                     ldy zp1+3
2e68 : 08                       php         ;test stores do not alter flags
2e69 : 98                       tya
2e6a : 49c3                     eor #$c3
2e6c : a8                       tay
2e6d : 28                       plp
2e6e : 8c0619                   sty abst+3
2e71 : 08                       php         ;flags after load/store sequence
2e72 : 49c3                     eor #$c3
2e74 : a8                       tay
2e75 : c000                     cpy #0      ;test result
                                trap_ne
                        
2e7c : 68                       pla         ;load status
                                eor_flag 0
                        
2e7f : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
2e8b : a413                     ldy zp1  
2e8d : 08                       php         ;test stores do not alter flags
2e8e : 98                       tya
2e8f : 49c3                     eor #$c3
2e91 : a8                       tay
2e92 : 28                       plp
2e93 : 8c0319                   sty abst  
2e96 : 08                       php         ;flags after load/store sequence
2e97 : 49c3                     eor #$c3
2e99 : a8                       tay
2e9a : c0c3                     cpy #$c3    ;test result
                                trap_ne
                        
2ea1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2ea4 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2eb0 : a414                     ldy zp1+1
2eb2 : 08                       php         ;test stores do not alter flags
2eb3 : 98                       tya
2eb4 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   53
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2eb6 : a8                       tay
2eb7 : 28                       plp
2eb8 : 8c0419                   sty abst+1
2ebb : 08                       php         ;flags after load/store sequence
2ebc : 49c3                     eor #$c3
2ebe : a8                       tay
2ebf : c082                     cpy #$82   ;test result
                                trap_ne
                        
2ec6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2ec9 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2ed5 : a415                     ldy zp1+2
2ed7 : 08                       php         ;test stores do not alter flags
2ed8 : 98                       tya
2ed9 : 49c3                     eor #$c3
2edb : a8                       tay
2edc : 28                       plp
2edd : 8c0519                   sty abst+2
2ee0 : 08                       php         ;flags after load/store sequence
2ee1 : 49c3                     eor #$c3
2ee3 : a8                       tay
2ee4 : c041                     cpy #$41    ;test result
                                trap_ne
                        
2eeb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2eee : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2efa : a416                     ldy zp1+3
2efc : 08                       php         ;test stores do not alter flags
2efd : 98                       tya
2efe : 49c3                     eor #$c3
2f00 : a8                       tay
2f01 : 28                       plp
2f02 : 8c0619                   sty abst+3
2f05 : 08                       php         ;flags after load/store sequence
2f06 : 49c3                     eor #$c3
2f08 : a8                       tay
2f09 : c000                     cpy #0      ;test result
                                trap_ne
                        
2f10 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2f13 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                
                                set_stat 0
                        
2f1f : ac1719                   ldy abs1  
2f22 : 08                       php         ;test stores do not alter flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   54
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2f23 : 98                       tya
2f24 : 49c3                     eor #$c3
2f26 : a8                       tay
2f27 : 28                       plp
2f28 : 840c                     sty zpt  
2f2a : 08                       php         ;flags after load/store sequence
2f2b : 49c3                     eor #$c3
2f2d : a8                       tay
2f2e : c413                     cpy zp1     ;test result
                                trap_ne
                        
2f35 : 68                       pla         ;load status
                                eor_flag 0
                        
2f38 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2f44 : ac1819                   ldy abs1+1
2f47 : 08                       php         ;test stores do not alter flags
2f48 : 98                       tya
2f49 : 49c3                     eor #$c3
2f4b : a8                       tay
2f4c : 28                       plp
2f4d : 840d                     sty zpt+1
2f4f : 08                       php         ;flags after load/store sequence
2f50 : 49c3                     eor #$c3
2f52 : a8                       tay
2f53 : c414                     cpy zp1+1   ;test result
                                trap_ne
                        
2f5a : 68                       pla         ;load status
                                eor_flag 0
                        
2f5d : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2f69 : ac1919                   ldy abs1+2
2f6c : 08                       php         ;test stores do not alter flags
2f6d : 98                       tya
2f6e : 49c3                     eor #$c3
2f70 : a8                       tay
2f71 : 28                       plp
2f72 : 840e                     sty zpt+2
2f74 : 08                       php         ;flags after load/store sequence
2f75 : 49c3                     eor #$c3
2f77 : a8                       tay
2f78 : c415                     cpy zp1+2   ;test result
                                trap_ne
                        
2f7f : 68                       pla         ;load status
                                eor_flag 0
                        
2f82 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
2f8e : ac1a19                   ldy abs1+3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   55
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2f91 : 08                       php         ;test stores do not alter flags
2f92 : 98                       tya
2f93 : 49c3                     eor #$c3
2f95 : a8                       tay
2f96 : 28                       plp
2f97 : 840f                     sty zpt+3
2f99 : 08                       php         ;flags after load/store sequence
2f9a : 49c3                     eor #$c3
2f9c : a8                       tay
2f9d : c416                     cpy zp1+3   ;test result
                                trap_ne
                        
2fa4 : 68                       pla         ;load status
                                eor_flag 0
                        
2fa7 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
2fb3 : ac1719                   ldy abs1  
2fb6 : 08                       php         ;test stores do not alter flags
2fb7 : 98                       tya
2fb8 : 49c3                     eor #$c3
2fba : a8                       tay
2fbb : 28                       plp
2fbc : 840c                     sty zpt  
2fbe : 08                       php         ;flags after load/store sequence
2fbf : 49c3                     eor #$c3
2fc1 : a8                       tay
2fc2 : c513                     cmp zp1     ;test result
                                trap_ne
                        
2fc9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2fcc : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
2fd8 : ac1819                   ldy abs1+1
2fdb : 08                       php         ;test stores do not alter flags
2fdc : 98                       tya
2fdd : 49c3                     eor #$c3
2fdf : a8                       tay
2fe0 : 28                       plp
2fe1 : 840d                     sty zpt+1
2fe3 : 08                       php         ;flags after load/store sequence
2fe4 : 49c3                     eor #$c3
2fe6 : a8                       tay
2fe7 : c514                     cmp zp1+1   ;test result
                                trap_ne
                        
2fee : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2ff1 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   56
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
2ffd : ac1919                   ldy abs1+2
3000 : 08                       php         ;test stores do not alter flags
3001 : 98                       tya
3002 : 49c3                     eor #$c3
3004 : a8                       tay
3005 : 28                       plp
3006 : 840e                     sty zpt+2
3008 : 08                       php         ;flags after load/store sequence
3009 : 49c3                     eor #$c3
300b : a8                       tay
300c : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
3013 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3016 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
3022 : ac1a19                   ldy abs1+3
3025 : 08                       php         ;test stores do not alter flags
3026 : 98                       tya
3027 : 49c3                     eor #$c3
3029 : a8                       tay
302a : 28                       plp
302b : 840f                     sty zpt+3
302d : 08                       php         ;flags after load/store sequence
302e : 49c3                     eor #$c3
3030 : a8                       tay
3031 : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
3038 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
303b : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                        
                                set_stat 0
                        
3047 : a0c3                     ldy #$c3  
3049 : 08                       php
304a : cc1719                   cpy abs1    ;test result
                                trap_ne
                        
3052 : 68                       pla         ;load status
                                eor_flag 0
                        
3055 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
3061 : a082                     ldy #$82
3063 : 08                       php
3064 : cc1819                   cpy abs1+1  ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   57
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
306c : 68                       pla         ;load status
                                eor_flag 0
                        
306f : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
307b : a041                     ldy #$41
307d : 08                       php
307e : cc1919                   cpy abs1+2  ;test result
                                trap_ne
                        
3086 : 68                       pla         ;load status
                                eor_flag 0
                        
3089 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
3095 : a000                     ldy #0
3097 : 08                       php
3098 : cc1a19                   cpy abs1+3  ;test result
                                trap_ne
                        
30a0 : 68                       pla         ;load status
                                eor_flag 0
                        
30a3 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
30af : a0c3                     ldy #$c3  
30b1 : 08                       php
30b2 : cc1719                   cpy abs1    ;test result
                                trap_ne
                        
30ba : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
30bd : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
30c9 : a082                     ldy #$82
30cb : 08                       php
30cc : cc1819                   cpy abs1+1  ;test result
                                trap_ne
                        
30d4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
30d7 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   58
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

30e3 : a041                     ldy #$41
30e5 : 08                       php
30e6 : cc1919                   cpy abs1+2   ;test result
                                trap_ne
                        
30ee : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
30f1 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
30fd : a000                     ldy #0
30ff : 08                       php
3100 : cc1a19                   cpy abs1+3  ;test result
                                trap_ne
                        
3108 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
310b : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                
3113 : a000                     ldy #0
3115 : a50c                     lda zpt  
3117 : 49c3                     eor #$c3
3119 : c513                     cmp zp1  
                                trap_ne     ;store to zp   data
                        
3120 : 840c                     sty zpt     ;clear                
3122 : ad0319                   lda abst  
3125 : 49c3                     eor #$c3
3127 : cd1719                   cmp abs1  
                                trap_ne     ;store to abs   data
                        
312f : 8c0319                   sty abst    ;clear                
3132 : a50d                     lda zpt+1
3134 : 49c3                     eor #$c3
3136 : c514                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
                        
313d : 840d                     sty zpt+1   ;clear                
313f : ad0419                   lda abst+1
3142 : 49c3                     eor #$c3
3144 : cd1819                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
                        
314c : 8c0419                   sty abst+1  ;clear                
314f : a50e                     lda zpt+2
3151 : 49c3                     eor #$c3
3153 : c515                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
                        
315a : 840e                     sty zpt+2   ;clear                
315c : ad0519                   lda abst+2
315f : 49c3                     eor #$c3
3161 : cd1919                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
                        
3169 : 8c0519                   sty abst+2  ;clear                
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   59
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

316c : a50f                     lda zpt+3
316e : 49c3                     eor #$c3
3170 : c516                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
                        
3177 : 840f                     sty zpt+3   ;clear                
3179 : ad0619                   lda abst+3
317c : 49c3                     eor #$c3
317e : cd1a19                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
                        
3186 : 8c0619                   sty abst+3  ;clear                
                                next_test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
3198 : a203                     ldx #3
319a :                  tldax    
                                set_stat 0
                        
319e : b513                     lda zp1,x
31a0 : 08                       php         ;test stores do not alter flags
31a1 : 49c3                     eor #$c3
31a3 : 28                       plp
31a4 : 9d0319                   sta abst,x
31a7 : 08                       php         ;flags after load/store sequence
31a8 : 49c3                     eor #$c3
31aa : dd1719                   cmp abs1,x  ;test result
                                trap_ne
                        
31b2 : 68                       pla         ;load status
                                eor_flag 0
                        
31b5 : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
31bd : ca                       dex
31be : 10da                     bpl tldax                  
                        
31c0 : a203                     ldx #3
31c2 :                  tldax1   
                                set_stat $ff
                        
31c6 : b513                     lda zp1,x
31c8 : 08                       php         ;test stores do not alter flags
31c9 : 49c3                     eor #$c3
31cb : 28                       plp
31cc : 9d0319                   sta abst,x
31cf : 08                       php         ;flags after load/store sequence
31d0 : 49c3                     eor #$c3
31d2 : dd1719                   cmp abs1,x   ;test result
                                trap_ne
                        
31da : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
31dd : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
31e5 : ca                       dex
31e6 : 10da                     bpl tldax1                  
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   60
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
31e8 : a203                     ldx #3
31ea :                  tldax2   
                                set_stat 0
                        
31ee : bd1719                   lda abs1,x
31f1 : 08                       php         ;test stores do not alter flags
31f2 : 49c3                     eor #$c3
31f4 : 28                       plp
31f5 : 950c                     sta zpt,x
31f7 : 08                       php         ;flags after load/store sequence
31f8 : 49c3                     eor #$c3
31fa : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
3201 : 68                       pla         ;load status
                                eor_flag 0
                        
3204 : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
320c : ca                       dex
320d : 10db                     bpl tldax2                  
                        
320f : a203                     ldx #3
3211 :                  tldax3
                                set_stat $ff
                        
3215 : bd1719                   lda abs1,x
3218 : 08                       php         ;test stores do not alter flags
3219 : 49c3                     eor #$c3
321b : 28                       plp
321c : 950c                     sta zpt,x
321e : 08                       php         ;flags after load/store sequence
321f : 49c3                     eor #$c3
3221 : d513                     cmp zp1,x   ;test result
                                trap_ne
                        
3228 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
322b : dd1c19                   cmp fLDx,x  ;test flags
                                trap_ne
                        
3233 : ca                       dex
3234 : 10db                     bpl tldax3
                        
3236 : a203                     ldx #3      ;testing store result
3238 : a000                     ldy #0
323a : b50c             tstax   lda zpt,x
323c : 49c3                     eor #$c3
323e : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
3245 : 940c                     sty zpt,x   ;clear                
3247 : bd0319                   lda abst,x
324a : 49c3                     eor #$c3
324c : dd1719                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
3254 : 8a                       txa
3255 : 9d0319                   sta abst,x  ;clear                
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   61
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3258 : ca                       dex
3259 : 10df                     bpl tstax
                                next_test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
326a : a003                     ldy #3
326c :                  tlday    
                                set_stat 0
                        
3270 : b124                     lda (ind1),y
3272 : 08                       php         ;test stores do not alter flags
3273 : 49c3                     eor #$c3
3275 : 28                       plp
3276 : 990319                   sta abst,y
3279 : 08                       php         ;flags after load/store sequence
327a : 49c3                     eor #$c3
327c : d91719                   cmp abs1,y  ;test result
                                trap_ne
                        
3284 : 68                       pla         ;load status
                                eor_flag 0
                        
3287 : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
328f : 88                       dey
3290 : 10da                     bpl tlday                  
                        
3292 : a003                     ldy #3
3294 :                  tlday1   
                                set_stat $ff
                        
3298 : b124                     lda (ind1),y
329a : 08                       php         ;test stores do not alter flags
329b : 49c3                     eor #$c3
329d : 28                       plp
329e : 990319                   sta abst,y
32a1 : 08                       php         ;flags after load/store sequence
32a2 : 49c3                     eor #$c3
32a4 : d91719                   cmp abs1,y  ;test result
                                trap_ne
                        
32ac : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
32af : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
32b7 : 88                       dey
32b8 : 10da                     bpl tlday1                  
                        
32ba : a003                     ldy #3      ;testing store result
32bc : a200                     ldx #0
32be : b90319           tstay   lda abst,y
32c1 : 49c3                     eor #$c3
32c3 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
32cb : 8a                       txa
32cc : 990319                   sta abst,y  ;clear                
32cf : 88                       dey
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   62
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

32d0 : 10ec                     bpl tstay
                        
32d2 : a003                     ldy #3
32d4 :                  tlday2   
                                set_stat 0
                        
32d8 : b91719                   lda abs1,y
32db : 08                       php         ;test stores do not alter flags
32dc : 49c3                     eor #$c3
32de : 28                       plp
32df : 9130                     sta (indt),y
32e1 : 08                       php         ;flags after load/store sequence
32e2 : 49c3                     eor #$c3
32e4 : d124                     cmp (ind1),y    ;test result
                                trap_ne
                        
32eb : 68                       pla         ;load status
                                eor_flag 0
                        
32ee : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
32f6 : 88                       dey
32f7 : 10db                     bpl tlday2                  
                        
32f9 : a003                     ldy #3
32fb :                  tlday3   
                                set_stat $ff
                        
32ff : b91719                   lda abs1,y
3302 : 08                       php         ;test stores do not alter flags
3303 : 49c3                     eor #$c3
3305 : 28                       plp
3306 : 9130                     sta (indt),y
3308 : 08                       php         ;flags after load/store sequence
3309 : 49c3                     eor #$c3
330b : d124                     cmp (ind1),y   ;test result
                                trap_ne
                        
3312 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3315 : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
331d : 88                       dey
331e : 10db                     bpl tlday3
                                
3320 : a003                     ldy #3      ;testing store result
3322 : a200                     ldx #0
3324 : b90319           tstay1  lda abst,y
3327 : 49c3                     eor #$c3
3329 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
3331 : 8a                       txa
3332 : 990319                   sta abst,y  ;clear                
3335 : 88                       dey
3336 : 10ec                     bpl tstay1
                                
3338 : a206                     ldx #6
333a : a003                     ldy #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   63
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

333c :                  tldax4   
                                set_stat 0
                        
3340 : a124                     lda (ind1,x)
3342 : 08                       php         ;test stores do not alter flags
3343 : 49c3                     eor #$c3
3345 : 28                       plp
3346 : 8130                     sta (indt,x)
3348 : 08                       php         ;flags after load/store sequence
3349 : 49c3                     eor #$c3
334b : d91719                   cmp abs1,y  ;test result
                                trap_ne
                        
3353 : 68                       pla         ;load status
                                eor_flag 0
                        
3356 : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
335e : ca                       dex
335f : ca                       dex
3360 : 88                       dey
3361 : 10d9                     bpl tldax4                  
                        
3363 : a206                     ldx #6
3365 : a003                     ldy #3
3367 :                  tldax5
                                set_stat $ff
                        
336b : a124                     lda (ind1,x)
336d : 08                       php         ;test stores do not alter flags
336e : 49c3                     eor #$c3
3370 : 28                       plp
3371 : 8130                     sta (indt,x)
3373 : 08                       php         ;flags after load/store sequence
3374 : 49c3                     eor #$c3
3376 : d91719                   cmp abs1,y  ;test result
                                trap_ne
                        
337e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3381 : d91c19                   cmp fLDx,y  ;test flags
                                trap_ne
                        
3389 : ca                       dex
338a : ca                       dex
338b : 88                       dey
338c : 10d9                     bpl tldax5
                        
338e : a003                     ldy #3      ;testing store result
3390 : a200                     ldx #0
3392 : b90319           tstay2  lda abst,y
3395 : 49c3                     eor #$c3
3397 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
339f : 8a                       txa
33a0 : 990319                   sta abst,y  ;clear                
33a3 : 88                       dey
33a4 : 10ec                     bpl tstay2
                                next_test
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   64
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        
                                include "more_tests.i65"
                        ; Additional tests for beebem
                        ; These are in a separate file to keep updates simple
                        
                        ; test wraparound at end of memory for lda (),y
                        
33b5 : a9fb                     lda #lo(-5)
33b7 : 850f                     sta adrl
33b9 : a9ff                     lda #hi(-5)
33bb : 8510                     sta adrh
33bd : a006                     ldy #6
33bf : b10f                     lda (adrl),y
33c1 : c501                     cmp $01
                                trap_ne
                        
33c8 : e601                     inc $01
33ca : b10f                     lda (adrl),y
33cc : c501                     cmp $01
                                trap_ne
                        
                        
                        ; test wraparound at end of zp for lda ($ff),y
33d3 : 78                       sei
33d4 : a5ff                     lda $ff
33d6 : 8511                     sta adrf ; save $ff
33d8 : a90f                     lda #adrl
33da : 85ff                     sta $ff
33dc : a900                     lda #0
33de : 8500                     sta $00
33e0 : a901                     lda #1
33e2 : 8d0001                   sta $100
33e5 : a000                     ldy #0
33e7 : b1ff                     lda ($ff),y
33e9 : c50f                     cmp adrl
                                trap_ne
                        
33f0 : e60f                     inc adrl
33f2 : b1ff                     lda ($ff),y
33f4 : c50f                     cmp adrl
                                trap_ne
                        
33fb : a511                     lda adrf ; restore $ff
33fd : 85ff                     sta $ff
33ff : 58                       cli
                        
                        
                        ; indexed wraparound test (only zp should wrap)
3400 : a2fd                     ldx #3+$fa
3402 : b519             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
3404 : 9d0918                   sta abst-$fa,x      ;no STX abs,x!
3407 : ca                       dex
3408 : e0fa                     cpx #$fa
340a : b0f6                     bcs tldax6                  
340c : a2fd                     ldx #3+$fa
340e : bd1d18           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
3411 : 9512                     sta zpt-$fa&$ff,x
3413 : ca                       dex
3414 : e0fa                     cpx #$fa
3416 : b0f6                     bcs tldax7
                                                  
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   65
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3418 : a203                     ldx #3      ;testing wraparound result
341a : a000                     ldy #0
341c : b50c             tstax1  lda zpt,x
341e : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
3425 : 940c                     sty zpt,x   ;clear                
3427 : bd0319                   lda abst,x
342a : dd1719                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
3432 : 8a                       txa
3433 : 9d0319                   sta abst,x  ;clear                
3436 : ca                       dex
3437 : 10e3                     bpl tstax1
                        
3439 : a0fb                     ldy #3+$f8
343b : a2fe                     ldx #6+$f8
343d : a12c             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
343f : 990b18                   sta abst-$f8,y
3442 : ca                       dex
3443 : ca                       dex
3444 : 88                       dey
3445 : c0f8                     cpy #$f8
3447 : b0f4                     bcs tlday4
3449 : a003                     ldy #3      ;testing wraparound result
344b : a200                     ldx #0
344d : b90319           tstay4  lda abst,y
3450 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
3458 : 8a                       txa
3459 : 990319                   sta abst,y  ;clear                
345c : 88                       dey
345d : 10ee                     bpl tstay4
                                
345f : a0fb                     ldy #3+$f8
3461 : b91f18           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
3464 : 9138                     sta (inwt),y
3466 : 88                       dey
3467 : c0f8                     cpy #$f8
3469 : b0f6                     bcs tlday5                  
346b : a003                     ldy #3      ;testing wraparound result
346d : a200                     ldx #0
346f : b90319           tstay5  lda abst,y
3472 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
347a : 8a                       txa
347b : 990319                   sta abst,y  ;clear                
347e : 88                       dey
347f : 10ee                     bpl tstay5
                        
3481 : a0fb                     ldy #3+$f8
3483 : a2fe                     ldx #6+$f8
3485 : b12e             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
3487 : 8138                     sta (indt-$f8&$ff,x)
3489 : ca                       dex
348a : ca                       dex
348b : 88                       dey
348c : c0f8                     cpy #$f8
348e : b0f5                     bcs tlday6
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   66
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3490 : a003                     ldy #3      ;testing wraparound result
3492 : a200                     ldx #0
3494 : b90319           tstay6  lda abst,y
3497 : d91719                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
349f : 8a                       txa
34a0 : 990319                   sta abst,y  ;clear                
34a3 : 88                       dey
34a4 : 10ee                     bpl tstay6
                                next_test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                        
34b9 : a513                     lda zp1
34bb : 08                       php         ;test stores do not alter flags
34bc : 49c3                     eor #$c3
34be : 28                       plp
34bf : 8d0319                   sta abst
34c2 : 08                       php         ;flags after load/store sequence
34c3 : 49c3                     eor #$c3
34c5 : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
34cc : 68                       pla         ;load status
                                eor_flag 0
                        
34cf : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
34db : a514                     lda zp1+1
34dd : 08                       php         ;test stores do not alter flags
34de : 49c3                     eor #$c3
34e0 : 28                       plp
34e1 : 8d0419                   sta abst+1
34e4 : 08                       php         ;flags after load/store sequence
34e5 : 49c3                     eor #$c3
34e7 : c982                     cmp #$82    ;test result
                                trap_ne
                        
34ee : 68                       pla         ;load status
                                eor_flag 0
                        
34f1 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
34fd : a515                     lda zp1+2
34ff : 08                       php         ;test stores do not alter flags
3500 : 49c3                     eor #$c3
3502 : 28                       plp
3503 : 8d0519                   sta abst+2
3506 : 08                       php         ;flags after load/store sequence
3507 : 49c3                     eor #$c3
3509 : c941                     cmp #$41    ;test result
                                trap_ne
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   67
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3510 : 68                       pla         ;load status
                                eor_flag 0
                        
3513 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
351f : a516                     lda zp1+3
3521 : 08                       php         ;test stores do not alter flags
3522 : 49c3                     eor #$c3
3524 : 28                       plp
3525 : 8d0619                   sta abst+3
3528 : 08                       php         ;flags after load/store sequence
3529 : 49c3                     eor #$c3
352b : c900                     cmp #0      ;test result
                                trap_ne
                        
3532 : 68                       pla         ;load status
                                eor_flag 0
                        
3535 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
3541 : a513                     lda zp1  
3543 : 08                       php         ;test stores do not alter flags
3544 : 49c3                     eor #$c3
3546 : 28                       plp
3547 : 8d0319                   sta abst  
354a : 08                       php         ;flags after load/store sequence
354b : 49c3                     eor #$c3
354d : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
3554 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3557 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
3563 : a514                     lda zp1+1
3565 : 08                       php         ;test stores do not alter flags
3566 : 49c3                     eor #$c3
3568 : 28                       plp
3569 : 8d0419                   sta abst+1
356c : 08                       php         ;flags after load/store sequence
356d : 49c3                     eor #$c3
356f : c982                     cmp #$82    ;test result
                                trap_ne
                        
3576 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3579 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   68
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3585 : a515                     lda zp1+2
3587 : 08                       php         ;test stores do not alter flags
3588 : 49c3                     eor #$c3
358a : 28                       plp
358b : 8d0519                   sta abst+2
358e : 08                       php         ;flags after load/store sequence
358f : 49c3                     eor #$c3
3591 : c941                     cmp #$41    ;test result
                                trap_ne
                        
3598 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
359b : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
35a7 : a516                     lda zp1+3
35a9 : 08                       php         ;test stores do not alter flags
35aa : 49c3                     eor #$c3
35ac : 28                       plp
35ad : 8d0619                   sta abst+3
35b0 : 08                       php         ;flags after load/store sequence
35b1 : 49c3                     eor #$c3
35b3 : c900                     cmp #0      ;test result
                                trap_ne
                        
35ba : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
35bd : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
35c9 : ad1719                   lda abs1  
35cc : 08                       php         ;test stores do not alter flags
35cd : 49c3                     eor #$c3
35cf : 28                       plp
35d0 : 850c                     sta zpt  
35d2 : 08                       php         ;flags after load/store sequence
35d3 : 49c3                     eor #$c3
35d5 : c513                     cmp zp1     ;test result
                                trap_ne
                        
35dc : 68                       pla         ;load status
                                eor_flag 0
                        
35df : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
35eb : ad1819                   lda abs1+1
35ee : 08                       php         ;test stores do not alter flags
35ef : 49c3                     eor #$c3
35f1 : 28                       plp
35f2 : 850d                     sta zpt+1
35f4 : 08                       php         ;flags after load/store sequence
35f5 : 49c3                     eor #$c3
35f7 : c514                     cmp zp1+1   ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   69
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
35fe : 68                       pla         ;load status
                                eor_flag 0
                        
3601 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
360d : ad1919                   lda abs1+2
3610 : 08                       php         ;test stores do not alter flags
3611 : 49c3                     eor #$c3
3613 : 28                       plp
3614 : 850e                     sta zpt+2
3616 : 08                       php         ;flags after load/store sequence
3617 : 49c3                     eor #$c3
3619 : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
3620 : 68                       pla         ;load status
                                eor_flag 0
                        
3623 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
362f : ad1a19                   lda abs1+3
3632 : 08                       php         ;test stores do not alter flags
3633 : 49c3                     eor #$c3
3635 : 28                       plp
3636 : 850f                     sta zpt+3
3638 : 08                       php         ;flags after load/store sequence
3639 : 49c3                     eor #$c3
363b : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
3642 : 68                       pla         ;load status
                                eor_flag 0
                        
3645 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
3651 : ad1719                   lda abs1  
3654 : 08                       php         ;test stores do not alter flags
3655 : 49c3                     eor #$c3
3657 : 28                       plp
3658 : 850c                     sta zpt  
365a : 08                       php         ;flags after load/store sequence
365b : 49c3                     eor #$c3
365d : c513                     cmp zp1     ;test result
                                trap_ne
                        
3664 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3667 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   70
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_stat $ff
                        
3673 : ad1819                   lda abs1+1
3676 : 08                       php         ;test stores do not alter flags
3677 : 49c3                     eor #$c3
3679 : 28                       plp
367a : 850d                     sta zpt+1
367c : 08                       php         ;flags after load/store sequence
367d : 49c3                     eor #$c3
367f : c514                     cmp zp1+1   ;test result
                                trap_ne
                        
3686 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3689 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
3695 : ad1919                   lda abs1+2
3698 : 08                       php         ;test stores do not alter flags
3699 : 49c3                     eor #$c3
369b : 28                       plp
369c : 850e                     sta zpt+2
369e : 08                       php         ;flags after load/store sequence
369f : 49c3                     eor #$c3
36a1 : c515                     cmp zp1+2   ;test result
                                trap_ne
                        
36a8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
36ab : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
36b7 : ad1a19                   lda abs1+3
36ba : 08                       php         ;test stores do not alter flags
36bb : 49c3                     eor #$c3
36bd : 28                       plp
36be : 850f                     sta zpt+3
36c0 : 08                       php         ;flags after load/store sequence
36c1 : 49c3                     eor #$c3
36c3 : c516                     cmp zp1+3   ;test result
                                trap_ne
                        
36ca : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
36cd : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat 0  
                        
36d9 : a9c3                     lda #$c3
36db : 08                       php
36dc : cd1719                   cmp abs1    ;test result
                                trap_ne
                        
36e4 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   71
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                eor_flag 0
                        
36e7 : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
36f3 : a982                     lda #$82
36f5 : 08                       php
36f6 : cd1819                   cmp abs1+1  ;test result
                                trap_ne
                        
36fe : 68                       pla         ;load status
                                eor_flag 0
                        
3701 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
370d : a941                     lda #$41
370f : 08                       php
3710 : cd1919                   cmp abs1+2  ;test result
                                trap_ne
                        
3718 : 68                       pla         ;load status
                                eor_flag 0
                        
371b : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
3727 : a900                     lda #0
3729 : 08                       php
372a : cd1a19                   cmp abs1+3  ;test result
                                trap_ne
                        
3732 : 68                       pla         ;load status
                                eor_flag 0
                        
3735 : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
3741 : a9c3                     lda #$c3  
3743 : 08                       php
3744 : cd1719                   cmp abs1    ;test result
                                trap_ne
                        
374c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
374f : cd1c19                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
375b : a982                     lda #$82
375d : 08                       php
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   72
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

375e : cd1819                   cmp abs1+1  ;test result
                                trap_ne
                        
3766 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3769 : cd1d19                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
3775 : a941                     lda #$41
3777 : 08                       php
3778 : cd1919                   cmp abs1+2  ;test result
                                trap_ne
                        
3780 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
3783 : cd1e19                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
378f : a900                     lda #0
3791 : 08                       php
3792 : cd1a19                   cmp abs1+3  ;test result
                                trap_ne
                        
379a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
379d : cd1f19                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
37a5 : a200                     ldx #0
37a7 : a50c                     lda zpt  
37a9 : 49c3                     eor #$c3
37ab : c513                     cmp zp1  
                                trap_ne     ;store to zp data
                        
37b2 : 860c                     stx zpt     ;clear                
37b4 : ad0319                   lda abst  
37b7 : 49c3                     eor #$c3
37b9 : cd1719                   cmp abs1  
                                trap_ne     ;store to abs data
                        
37c1 : 8e0319                   stx abst    ;clear                
37c4 : a50d                     lda zpt+1
37c6 : 49c3                     eor #$c3
37c8 : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
                        
37cf : 860d                     stx zpt+1   ;clear                
37d1 : ad0419                   lda abst+1
37d4 : 49c3                     eor #$c3
37d6 : cd1819                   cmp abs1+1
                                trap_ne     ;store to abs data
                        
37de : 8e0419                   stx abst+1  ;clear                
37e1 : a50e                     lda zpt+2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   73
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

37e3 : 49c3                     eor #$c3
37e5 : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
                        
37ec : 860e                     stx zpt+2   ;clear                
37ee : ad0519                   lda abst+2
37f1 : 49c3                     eor #$c3
37f3 : cd1919                   cmp abs1+2
                                trap_ne     ;store to abs data
                        
37fb : 8e0519                   stx abst+2  ;clear                
37fe : a50f                     lda zpt+3
3800 : 49c3                     eor #$c3
3802 : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
                        
3809 : 860f                     stx zpt+3   ;clear                
380b : ad0619                   lda abst+3
380e : 49c3                     eor #$c3
3810 : cd1a19                   cmp abs1+3
                                trap_ne     ;store to abs data
                        
3818 : 8e0619                   stx abst+3  ;clear                
                                next_test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                        
3830 : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
                        
                                set_a 1,0
                        
384a : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
3864 : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
387e : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                                
                                set_a $ff,$ff
                        
3898 : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
                        
                                set_a 1,$ff
                        
38b2 : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
38cc : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   74
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
38e6 : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                                
                                set_a $ff,0
                        
3900 : 2c1a19                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
                        
                                set_a 1,0
                        
391b : 2c1919                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
3936 : 2c1819                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
3951 : 2c1719                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                                
                                set_a $ff,$ff
                        
396c : 2c1a19                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
                        
                                set_a 1,$ff
                        
3987 : 2c1919                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
39a2 : 2c1819                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
39bd : 2c1719                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                                next_test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                        
39e7 : e417                     cpx zp7f
                                tst_stat fc
                        
39f4 : ca                       dex
39f5 : e417                     cpx zp7f
                                tst_stat fzc
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   75
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3a02 : ca                       dex
3a03 : e417                     cpx zp7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
3a1d : e417                     cpx zp7f
                                tst_stat ~fnz
                        
3a2a : ca                       dex
3a2b : e417                     cpx zp7f
                                tst_stat ~fn
                        
3a38 : ca                       dex
3a39 : e417                     cpx zp7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
3a53 : ec1b19                   cpx abs7f
                                tst_stat fc
                        
3a61 : ca                       dex
3a62 : ec1b19                   cpx abs7f
                                tst_stat fzc
                        
3a70 : ca                       dex
3a71 : ec1b19                   cpx abs7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
3a8c : ec1b19                   cpx abs7f
                                tst_stat ~fnz
                        
3a9a : ca                       dex
3a9b : ec1b19                   cpx abs7f
                                tst_stat ~fn
                        
3aa9 : ca                       dex
3aaa : ec1b19                   cpx abs7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
3ac5 : e07f                     cpx #$7f
                                tst_stat fc
                        
3ad2 : ca                       dex
3ad3 : e07f                     cpx #$7f
                                tst_stat fzc
                        
3ae0 : ca                       dex
3ae1 : e07f                     cpx #$7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
3afb : e07f                     cpx #$7f
                                tst_stat ~fnz
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   76
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
3b08 : ca                       dex
3b09 : e07f                     cpx #$7f
                                tst_stat ~fn
                        
3b16 : ca                       dex
3b17 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
                        
                                next_test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                        
3b40 : c417                     cpy zp7f
                                tst_stat fc
                        
3b4d : 88                       dey
3b4e : c417                     cpy zp7f
                                tst_stat fzc
                        
3b5b : 88                       dey
3b5c : c417                     cpy zp7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
3b76 : c417                     cpy zp7f
                                tst_stat ~fnz
                        
3b83 : 88                       dey
3b84 : c417                     cpy zp7f
                                tst_stat ~fn
                        
3b91 : 88                       dey
3b92 : c417                     cpy zp7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
3bac : cc1b19                   cpy abs7f
                                tst_stat fc
                        
3bba : 88                       dey
3bbb : cc1b19                   cpy abs7f
                                tst_stat fzc
                        
3bc9 : 88                       dey
3bca : cc1b19                   cpy abs7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
3be5 : cc1b19                   cpy abs7f
                                tst_stat ~fnz
                        
3bf3 : 88                       dey
3bf4 : cc1b19                   cpy abs7f
                                tst_stat ~fn
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   77
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3c02 : 88                       dey
3c03 : cc1b19                   cpy abs7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
3c1e : c07f                     cpy #$7f
                                tst_stat fc
                        
3c2b : 88                       dey
3c2c : c07f                     cpy #$7f
                                tst_stat fzc
                        
3c39 : 88                       dey
3c3a : c07f                     cpy #$7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
3c54 : c07f                     cpy #$7f
                                tst_stat ~fnz
                        
3c61 : 88                       dey
3c62 : c07f                     cpy #$7f
                                tst_stat ~fn
                        
3c6f : 88                       dey
3c70 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
                        
                                next_test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                        
3c99 : c517                     cmp zp7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
3cb3 : c517                     cmp zp7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
3ccd : c517                     cmp zp7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
3ce7 : c517                     cmp zp7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
3d01 : c517                     cmp zp7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   78
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3d1b : c517                     cmp zp7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
3d35 : cd1b19                   cmp abs7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
3d50 : cd1b19                   cmp abs7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
3d6b : cd1b19                   cmp abs7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
3d86 : cd1b19                   cmp abs7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
3da1 : cd1b19                   cmp abs7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
3dbc : cd1b19                   cmp abs7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
3dd7 : c97f                     cmp #$7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
3df1 : c97f                     cmp #$7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
3e0b : c97f                     cmp #$7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
3e25 : c97f                     cmp #$7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
3e3f : c97f                     cmp #$7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   79
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3e59 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
                        
                        
3e6d : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                        
3e75 : d513                     cmp zp1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
3e8f : d513                     cmp zp1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
3ea9 : d513                     cmp zp1,x
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
3ec3 : d513                     cmp zp1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
3edd : d513                     cmp zp1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
3ef7 : d513                     cmp zp1,x
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
3f11 : dd1719                   cmp abs1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
3f2c : dd1719                   cmp abs1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
3f47 : dd1719                   cmp abs1,x
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
3f62 : dd1719                   cmp abs1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
3f7d : dd1719                   cmp abs1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   80
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
3f98 : dd1719                   cmp abs1,x
                                tst_a $7e,~fzc
                        
                        
3fad : a004                     ldy #4          ;with indexing by Y
3faf : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                        
3fb7 : d91719                   cmp abs1,y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
3fd2 : d91719                   cmp abs1,y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
3fed : d91719                   cmp abs1,y
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
4008 : d91719                   cmp abs1,y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
4023 : d91719                   cmp abs1,y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
403e : d91719                   cmp abs1,y
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
4059 : c124                     cmp (ind1,x)
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
4073 : c124                     cmp (ind1,x)
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
408d : c124                     cmp (ind1,x)
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
40a7 : c124                     cmp (ind1,x)
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
40c1 : c124                     cmp (ind1,x)
                                tst_a $7f,~fn
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   81
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_a $7e,$ff
                        
40db : c124                     cmp (ind1,x)
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
40f5 : d124                     cmp (ind1),y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
410f : d124                     cmp (ind1),y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
4129 : d124                     cmp (ind1),y
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
4143 : d124                     cmp (ind1),y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
415d : d124                     cmp (ind1),y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
4177 : d124                     cmp (ind1),y
                                tst_a $7e,~fzc
                        
                                next_test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
419a : a203                     ldx #3
419c :                  tasl
                                set_ax zp1,0
                        
41a2 : 0a                       asl a
                                tst_ax rASL,fASL,0
                        
41b7 : ca                       dex
41b8 : 10e2                     bpl tasl
41ba : a203                     ldx #3
41bc :                  tasl1
                                set_ax zp1,$ff
                        
41c2 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
                        
41d7 : ca                       dex
41d8 : 10e2                     bpl tasl1
                        
41da : a203                     ldx #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   82
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

41dc :                  tlsr
                                set_ax zp1,0
                        
41e2 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
                        
41f7 : ca                       dex
41f8 : 10e2                     bpl tlsr
41fa : a203                     ldx #3
41fc :                  tlsr1
                                set_ax zp1,$ff
                        
4202 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
                        
4217 : ca                       dex
4218 : 10e2                     bpl tlsr1
                        
421a : a203                     ldx #3
421c :                  trol
                                set_ax zp1,0
                        
4222 : 2a                       rol a
                                tst_ax rROL,fROL,0
                        
4237 : ca                       dex
4238 : 10e2                     bpl trol
423a : a203                     ldx #3
423c :                  trol1
                                set_ax zp1,$ff-fc
                        
4242 : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
                        
4257 : ca                       dex
4258 : 10e2                     bpl trol1
                        
425a : a203                     ldx #3
425c :                  trolc
                                set_ax zp1,fc
                        
4262 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
                        
4277 : ca                       dex
4278 : 10e2                     bpl trolc
427a : a203                     ldx #3
427c :                  trolc1
                                set_ax zp1,$ff
                        
4282 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
                        
4297 : ca                       dex
4298 : 10e2                     bpl trolc1
                        
429a : a203                     ldx #3
429c :                  tror
                                set_ax zp1,0
                        
42a2 : 6a                       ror a
                                tst_ax rROR,fROR,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   83
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
42b7 : ca                       dex
42b8 : 10e2                     bpl tror
42ba : a203                     ldx #3
42bc :                  tror1
                                set_ax zp1,$ff-fc
                        
42c2 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
                        
42d7 : ca                       dex
42d8 : 10e2                     bpl tror1
                        
42da : a203                     ldx #3
42dc :                  trorc
                                set_ax zp1,fc
                        
42e2 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
                        
42f7 : ca                       dex
42f8 : 10e2                     bpl trorc
42fa : a203                     ldx #3
42fc :                  trorc1
                                set_ax zp1,$ff
                        
4302 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
                        
4317 : ca                       dex
4318 : 10e2                     bpl trorc1
                                next_test
                        
                        
                        ; shifts - zeropage
4329 : a203                     ldx #3
432b :                  tasl2
                                set_z zp1,0
                        
4333 : 060c                     asl zpt
                                tst_z rASL,fASL,0
                        
434b : ca                       dex
434c : 10dd                     bpl tasl2
434e : a203                     ldx #3
4350 :                  tasl3
                                set_z zp1,$ff
                        
4358 : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
                        
4370 : ca                       dex
4371 : 10dd                     bpl tasl3
                        
4373 : a203                     ldx #3
4375 :                  tlsr2
                                set_z zp1,0
                        
437d : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
                        
4395 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   84
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4396 : 10dd                     bpl tlsr2
4398 : a203                     ldx #3
439a :                  tlsr3
                                set_z zp1,$ff
                        
43a2 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
                        
43ba : ca                       dex
43bb : 10dd                     bpl tlsr3
                        
43bd : a203                     ldx #3
43bf :                  trol2
                                set_z zp1,0
                        
43c7 : 260c                     rol zpt
                                tst_z rROL,fROL,0
                        
43df : ca                       dex
43e0 : 10dd                     bpl trol2
43e2 : a203                     ldx #3
43e4 :                  trol3
                                set_z zp1,$ff-fc
                        
43ec : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
                        
4404 : ca                       dex
4405 : 10dd                     bpl trol3
                        
4407 : a203                     ldx #3
4409 :                  trolc2
                                set_z zp1,fc
                        
4411 : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
                        
4429 : ca                       dex
442a : 10dd                     bpl trolc2
442c : a203                     ldx #3
442e :                  trolc3
                                set_z zp1,$ff
                        
4436 : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
                        
444e : ca                       dex
444f : 10dd                     bpl trolc3
                        
4451 : a203                     ldx #3
4453 :                  tror2
                                set_z zp1,0
                        
445b : 660c                     ror zpt
                                tst_z rROR,fROR,0
                        
4473 : ca                       dex
4474 : 10dd                     bpl tror2
4476 : a203                     ldx #3
4478 :                  tror3
                                set_z zp1,$ff-fc
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   85
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4480 : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
                        
4498 : ca                       dex
4499 : 10dd                     bpl tror3
                        
449b : a203                     ldx #3
449d :                  trorc2
                                set_z zp1,fc
                        
44a5 : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
                        
44bd : ca                       dex
44be : 10dd                     bpl trorc2
44c0 : a203                     ldx #3
44c2 :                  trorc3
                                set_z zp1,$ff
                        
44ca : 660c                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
                        
44e2 : ca                       dex
44e3 : 10dd                     bpl trorc3
                                next_test
                        
                        
                        ; shifts - absolute
44f4 : a203                     ldx #3
44f6 :                  tasl4
                                set_abs zp1,0
                        
44ff : 0e0319                   asl abst
                                tst_abs rASL,fASL,0
                        
4519 : ca                       dex
451a : 10da                     bpl tasl4
451c : a203                     ldx #3
451e :                  tasl5
                                set_abs zp1,$ff
                        
4527 : 0e0319                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
                        
4541 : ca                       dex
4542 : 10da                     bpl tasl5
                        
4544 : a203                     ldx #3
4546 :                  tlsr4
                                set_abs zp1,0
                        
454f : 4e0319                   lsr abst
                                tst_abs rLSR,fLSR,0
                        
4569 : ca                       dex
456a : 10da                     bpl tlsr4
456c : a203                     ldx #3
456e :                  tlsr5
                                set_abs zp1,$ff
                        
4577 : 4e0319                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   86
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
4591 : ca                       dex
4592 : 10da                     bpl tlsr5
                        
4594 : a203                     ldx #3
4596 :                  trol4
                                set_abs zp1,0
                        
459f : 2e0319                   rol abst
                                tst_abs rROL,fROL,0
                        
45b9 : ca                       dex
45ba : 10da                     bpl trol4
45bc : a203                     ldx #3
45be :                  trol5
                                set_abs zp1,$ff-fc
                        
45c7 : 2e0319                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
                        
45e1 : ca                       dex
45e2 : 10da                     bpl trol5
                        
45e4 : a203                     ldx #3
45e6 :                  trolc4
                                set_abs zp1,fc
                        
45ef : 2e0319                   rol abst
                                tst_abs rROLc,fROLc,0
                        
4609 : ca                       dex
460a : 10da                     bpl trolc4
460c : a203                     ldx #3
460e :                  trolc5
                                set_abs zp1,$ff
                        
4617 : 2e0319                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
                        
4631 : ca                       dex
4632 : 10da                     bpl trolc5
                        
4634 : a203                     ldx #3
4636 :                  tror4
                                set_abs zp1,0
                        
463f : 6e0319                   ror abst
                                tst_abs rROR,fROR,0
                        
4659 : ca                       dex
465a : 10da                     bpl tror4
465c : a203                     ldx #3
465e :                  tror5
                                set_abs zp1,$ff-fc
                        
4667 : 6e0319                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
                        
4681 : ca                       dex
4682 : 10da                     bpl tror5
                        
4684 : a203                     ldx #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   87
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4686 :                  trorc4
                                set_abs zp1,fc
                        
468f : 6e0319                   ror abst
                                tst_abs rRORc,fRORc,0
                        
46a9 : ca                       dex
46aa : 10da                     bpl trorc4
46ac : a203                     ldx #3
46ae :                  trorc5
                                set_abs zp1,$ff
                        
46b7 : 6e0319                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
                        
46d1 : ca                       dex
46d2 : 10da                     bpl trorc5
                                next_test
                        
                        
                        ; shifts - zp indexed
46e3 : a203                     ldx #3
46e5 :                  tasl6
                                set_zx zp1,0
                        
46ed : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
                        
4705 : ca                       dex
4706 : 10dd                     bpl tasl6
4708 : a203                     ldx #3
470a :                  tasl7
                                set_zx zp1,$ff
                        
4712 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
                        
472a : ca                       dex
472b : 10dd                     bpl tasl7
                        
472d : a203                     ldx #3
472f :                  tlsr6
                                set_zx zp1,0
                        
4737 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
                        
474f : ca                       dex
4750 : 10dd                     bpl tlsr6
4752 : a203                     ldx #3
4754 :                  tlsr7
                                set_zx zp1,$ff
                        
475c : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
                        
4774 : ca                       dex
4775 : 10dd                     bpl tlsr7
                        
4777 : a203                     ldx #3
4779 :                  trol6
                                set_zx zp1,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   88
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
4781 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
                        
4799 : ca                       dex
479a : 10dd                     bpl trol6
479c : a203                     ldx #3
479e :                  trol7
                                set_zx zp1,$ff-fc
                        
47a6 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
                        
47be : ca                       dex
47bf : 10dd                     bpl trol7
                        
47c1 : a203                     ldx #3
47c3 :                  trolc6
                                set_zx zp1,fc
                        
47cb : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
                        
47e3 : ca                       dex
47e4 : 10dd                     bpl trolc6
47e6 : a203                     ldx #3
47e8 :                  trolc7
                                set_zx zp1,$ff
                        
47f0 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
                        
4808 : ca                       dex
4809 : 10dd                     bpl trolc7
                        
480b : a203                     ldx #3
480d :                  tror6
                                set_zx zp1,0
                        
4815 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
                        
482d : ca                       dex
482e : 10dd                     bpl tror6
4830 : a203                     ldx #3
4832 :                  tror7
                                set_zx zp1,$ff-fc
                        
483a : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
                        
4852 : ca                       dex
4853 : 10dd                     bpl tror7
                        
4855 : a203                     ldx #3
4857 :                  trorc6
                                set_zx zp1,fc
                        
485f : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
                        
4877 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   89
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4878 : 10dd                     bpl trorc6
487a : a203                     ldx #3
487c :                  trorc7
                                set_zx zp1,$ff
                        
4884 : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
                        
489c : ca                       dex
489d : 10dd                     bpl trorc7
                                next_test
                        
                                
                        ; shifts - abs indexed
48ae : a203                     ldx #3
48b0 :                  tasl8
                                set_absx zp1,0
                        
48b9 : 1e0319                   asl abst,x
                                tst_absx rASL,fASL,0
                        
48d3 : ca                       dex
48d4 : 10da                     bpl tasl8
48d6 : a203                     ldx #3
48d8 :                  tasl9
                                set_absx zp1,$ff
                        
48e1 : 1e0319                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
                        
48fb : ca                       dex
48fc : 10da                     bpl tasl9
                        
48fe : a203                     ldx #3
4900 :                  tlsr8
                                set_absx zp1,0
                        
4909 : 5e0319                   lsr abst,x
                                tst_absx rLSR,fLSR,0
                        
4923 : ca                       dex
4924 : 10da                     bpl tlsr8
4926 : a203                     ldx #3
4928 :                  tlsr9
                                set_absx zp1,$ff
                        
4931 : 5e0319                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
                        
494b : ca                       dex
494c : 10da                     bpl tlsr9
                        
494e : a203                     ldx #3
4950 :                  trol8
                                set_absx zp1,0
                        
4959 : 3e0319                   rol abst,x
                                tst_absx rROL,fROL,0
                        
4973 : ca                       dex
4974 : 10da                     bpl trol8
4976 : a203                     ldx #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   90
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4978 :                  trol9
                                set_absx zp1,$ff-fc
                        
4981 : 3e0319                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
                        
499b : ca                       dex
499c : 10da                     bpl trol9
                        
499e : a203                     ldx #3
49a0 :                  trolc8
                                set_absx zp1,fc
                        
49a9 : 3e0319                   rol abst,x
                                tst_absx rROLc,fROLc,0
                        
49c3 : ca                       dex
49c4 : 10da                     bpl trolc8
49c6 : a203                     ldx #3
49c8 :                  trolc9
                                set_absx zp1,$ff
                        
49d1 : 3e0319                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
                        
49eb : ca                       dex
49ec : 10da                     bpl trolc9
                        
49ee : a203                     ldx #3
49f0 :                  tror8
                                set_absx zp1,0
                        
49f9 : 7e0319                   ror abst,x
                                tst_absx rROR,fROR,0
                        
4a13 : ca                       dex
4a14 : 10da                     bpl tror8
4a16 : a203                     ldx #3
4a18 :                  tror9
                                set_absx zp1,$ff-fc
                        
4a21 : 7e0319                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
                        
4a3b : ca                       dex
4a3c : 10da                     bpl tror9
                        
4a3e : a203                     ldx #3
4a40 :                  trorc8
                                set_absx zp1,fc
                        
4a49 : 7e0319                   ror abst,x
                                tst_absx rRORc,fRORc,0
                        
4a63 : ca                       dex
4a64 : 10da                     bpl trorc8
4a66 : a203                     ldx #3
4a68 :                  trorc9
                                set_absx zp1,$ff
                        
4a71 : 7e0319                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   91
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
4a8b : ca                       dex
4a8c : 10da                     bpl trorc9
                                next_test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
4a9d : a200                     ldx #0
4a9f : a97e                     lda #$7e
4aa1 : 850c                     sta zpt
4aa3 :                  tinc    
                                set_stat 0
                        
4aa7 : e60c                     inc zpt
                                tst_z rINC,fINC,0
                        
4abf : e8                       inx
4ac0 : e002                     cpx #2
4ac2 : d004                     bne tinc1
4ac4 : a9fe                     lda #$fe
4ac6 : 850c                     sta zpt
4ac8 : e005             tinc1   cpx #5
4aca : d0d7                     bne tinc
4acc : ca                       dex
4acd : e60c                     inc zpt
4acf :                  tdec    
                                set_stat 0
                        
4ad3 : c60c                     dec zpt
                                tst_z rINC,fINC,0
                        
4aeb : ca                       dex
4aec : 300a                     bmi tdec1
4aee : e001                     cpx #1
4af0 : d0dd                     bne tdec
4af2 : a981                     lda #$81
4af4 : 850c                     sta zpt
4af6 : d0d7                     bne tdec
4af8 :                  tdec1
4af8 : a200                     ldx #0
4afa : a97e                     lda #$7e
4afc : 850c                     sta zpt
4afe :                  tinc10    
                                set_stat $ff
                        
4b02 : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
                        
4b1a : e8                       inx
4b1b : e002                     cpx #2
4b1d : d004                     bne tinc11
4b1f : a9fe                     lda #$fe
4b21 : 850c                     sta zpt
4b23 : e005             tinc11  cpx #5
4b25 : d0d7                     bne tinc10
4b27 : ca                       dex
4b28 : e60c                     inc zpt
4b2a :                  tdec10    
                                set_stat $ff
                        
4b2e : c60c                     dec zpt
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   92
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_z rINC,fINC,$ff-fnz
                        
4b46 : ca                       dex
4b47 : 300a                     bmi tdec11
4b49 : e001                     cpx #1
4b4b : d0dd                     bne tdec10
4b4d : a981                     lda #$81
4b4f : 850c                     sta zpt
4b51 : d0d7                     bne tdec10
4b53 :                  tdec11
                                next_test
                        
                        
                        ; absolute memory
4b62 : a200                     ldx #0
4b64 : a97e                     lda #$7e
4b66 : 8d0319                   sta abst
4b69 :                  tinc2    
                                set_stat 0
                        
4b6d : ee0319                   inc abst
                                tst_abs rINC,fINC,0
                        
4b87 : e8                       inx
4b88 : e002                     cpx #2
4b8a : d005                     bne tinc3
4b8c : a9fe                     lda #$fe
4b8e : 8d0319                   sta abst
4b91 : e005             tinc3   cpx #5
4b93 : d0d4                     bne tinc2
4b95 : ca                       dex
4b96 : ee0319                   inc abst
4b99 :                  tdec2    
                                set_stat 0
                        
4b9d : ce0319                   dec abst
                                tst_abs rINC,fINC,0
                        
4bb7 : ca                       dex
4bb8 : 300b                     bmi tdec3
4bba : e001                     cpx #1
4bbc : d0db                     bne tdec2
4bbe : a981                     lda #$81
4bc0 : 8d0319                   sta abst
4bc3 : d0d4                     bne tdec2
4bc5 :                  tdec3
4bc5 : a200                     ldx #0
4bc7 : a97e                     lda #$7e
4bc9 : 8d0319                   sta abst
4bcc :                  tinc12    
                                set_stat $ff
                        
4bd0 : ee0319                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
                        
4bea : e8                       inx
4beb : e002                     cpx #2
4bed : d005                     bne tinc13
4bef : a9fe                     lda #$fe
4bf1 : 8d0319                   sta abst
4bf4 : e005             tinc13   cpx #5
4bf6 : d0d4                     bne tinc12
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   93
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4bf8 : ca                       dex
4bf9 : ee0319                   inc abst
4bfc :                  tdec12    
                                set_stat $ff
                        
4c00 : ce0319                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
                        
4c1a : ca                       dex
4c1b : 300b                     bmi tdec13
4c1d : e001                     cpx #1
4c1f : d0db                     bne tdec12
4c21 : a981                     lda #$81
4c23 : 8d0319                   sta abst
4c26 : d0d4                     bne tdec12
4c28 :                  tdec13
                                next_test
                        
                        
                        ; zeropage indexed
4c37 : a200                     ldx #0
4c39 : a97e                     lda #$7e
4c3b : 950c             tinc4   sta zpt,x
                                set_stat 0
                        
4c41 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
                        
4c59 : b50c                     lda zpt,x
4c5b : e8                       inx
4c5c : e002                     cpx #2
4c5e : d002                     bne tinc5
4c60 : a9fe                     lda #$fe
4c62 : e005             tinc5   cpx #5
4c64 : d0d5                     bne tinc4
4c66 : ca                       dex
4c67 : a902                     lda #2
4c69 : 950c             tdec4   sta zpt,x 
                                set_stat 0
                        
4c6f : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
                        
4c87 : b50c                     lda zpt,x
4c89 : ca                       dex
4c8a : 3008                     bmi tdec5
4c8c : e001                     cpx #1
4c8e : d0d9                     bne tdec4
4c90 : a981                     lda #$81
4c92 : d0d5                     bne tdec4
4c94 :                  tdec5
4c94 : a200                     ldx #0
4c96 : a97e                     lda #$7e
4c98 : 950c             tinc14  sta zpt,x
                                set_stat $ff
                        
4c9e : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
4cb6 : b50c                     lda zpt,x
4cb8 : e8                       inx
4cb9 : e002                     cpx #2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   94
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4cbb : d002                     bne tinc15
4cbd : a9fe                     lda #$fe
4cbf : e005             tinc15  cpx #5
4cc1 : d0d5                     bne tinc14
4cc3 : ca                       dex
4cc4 : a902                     lda #2
4cc6 : 950c             tdec14  sta zpt,x 
                                set_stat $ff
                        
4ccc : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
4ce4 : b50c                     lda zpt,x
4ce6 : ca                       dex
4ce7 : 3008                     bmi tdec15
4ce9 : e001                     cpx #1
4ceb : d0d9                     bne tdec14
4ced : a981                     lda #$81
4cef : d0d5                     bne tdec14
4cf1 :                  tdec15
                                next_test
                        
                        
                        ; memory indexed
4d00 : a200                     ldx #0
4d02 : a97e                     lda #$7e
4d04 : 9d0319           tinc6   sta abst,x
                                set_stat 0
                        
4d0b : fe0319                   inc abst,x
                                tst_absx rINC,fINC,0
                        
4d25 : bd0319                   lda abst,x
4d28 : e8                       inx
4d29 : e002                     cpx #2
4d2b : d002                     bne tinc7
4d2d : a9fe                     lda #$fe
4d2f : e005             tinc7   cpx #5
4d31 : d0d1                     bne tinc6
4d33 : ca                       dex
4d34 : a902                     lda #2
4d36 : 9d0319           tdec6   sta abst,x 
                                set_stat 0
                        
4d3d : de0319                   dec abst,x
                                tst_absx rINC,fINC,0
                        
4d57 : bd0319                   lda abst,x
4d5a : ca                       dex
4d5b : 3008                     bmi tdec7
4d5d : e001                     cpx #1
4d5f : d0d5                     bne tdec6
4d61 : a981                     lda #$81
4d63 : d0d1                     bne tdec6
4d65 :                  tdec7
4d65 : a200                     ldx #0
4d67 : a97e                     lda #$7e
4d69 : 9d0319           tinc16  sta abst,x
                                set_stat $ff
                        
4d70 : fe0319                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   95
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
4d8a : bd0319                   lda abst,x
4d8d : e8                       inx
4d8e : e002                     cpx #2
4d90 : d002                     bne tinc17
4d92 : a9fe                     lda #$fe
4d94 : e005             tinc17  cpx #5
4d96 : d0d1                     bne tinc16
4d98 : ca                       dex
4d99 : a902                     lda #2
4d9b : 9d0319           tdec16  sta abst,x 
                                set_stat $ff
                        
4da2 : de0319                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
                        
4dbc : bd0319                   lda abst,x
4dbf : ca                       dex
4dc0 : 3008                     bmi tdec17
4dc2 : e001                     cpx #1
4dc4 : d0d5                     bne tdec16
4dc6 : a981                     lda #$81
4dc8 : d0d1                     bne tdec16
4dca :                  tdec17
                                next_test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
4dd9 : a203                     ldx #3          ;immediate
4ddb : b51c             tand    lda zpAN,x
4ddd : 8d0919                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                        
4de7 : 200819                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
                        
4dfe : ca                       dex
4dff : 10da                     bpl tand
4e01 : a203                     ldx #3
4e03 : b51c             tand1   lda zpAN,x
4e05 : 8d0919                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                        
4e0f : 200819                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
4e26 : ca                       dex
4e27 : 10da                     bpl tand1
                            
4e29 : a203                     ldx #3      ;zp
4e2b : b51c             tand2   lda zpAN,x
4e2d : 850c                     sta zpt
                                set_ax  absANa,0
                        
4e36 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
                        
4e4c : ca                       dex
4e4d : 10dc                     bpl tand2
4e4f : a203                     ldx #3
4e51 : b51c             tand3   lda zpAN,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   96
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4e53 : 850c                     sta zpt
                                set_ax  absANa,$ff
                        
4e5c : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
4e72 : ca                       dex
4e73 : 10dc                     bpl tand3
                        
4e75 : a203                     ldx #3      ;abs
4e77 : b51c             tand4   lda zpAN,x
4e79 : 8d0319                   sta abst
                                set_ax  absANa,0
                        
4e83 : 2d0319                   and abst
                                tst_ax  absrlo,absflo,0
                        
4e9a : ca                       dex
4e9b : 10da                     bpl tand4
4e9d : a203                     ldx #3
4e9f : b51c             tand5   lda zpAN,x
4ea1 : 8d0319                   sta abst
                                set_ax  absANa,$ff
                        
4eab : 2d0319                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
4ec2 : ca                       dex
4ec3 : 1002                     bpl tand6
                        
4ec5 : a203                     ldx #3      ;zp,x
4ec7 :                  tand6
                                set_ax  absANa,0
                        
4ece : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,0
                        
4ee4 : ca                       dex
4ee5 : 10e0                     bpl tand6
4ee7 : a203                     ldx #3
4ee9 :                  tand7
                                set_ax  absANa,$ff
                        
4ef0 : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
4f06 : ca                       dex
4f07 : 10e0                     bpl tand7
                        
4f09 : a203                     ldx #3      ;abs,x
4f0b :                  tand8
                                set_ax  absANa,0
                        
4f12 : 3d4e19                   and absAN,x
                                tst_ax  absrlo,absflo,0
                        
4f29 : ca                       dex
4f2a : 10df                     bpl tand8
4f2c : a203                     ldx #3
4f2e :                  tand9
                                set_ax  absANa,$ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   97
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

4f35 : 3d4e19                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
4f4c : ca                       dex
4f4d : 10df                     bpl tand9
                        
4f4f : a003                     ldy #3      ;abs,y
4f51 :                  tand10
                                set_ay  absANa,0
                        
4f58 : 394e19                   and absAN,y
                                tst_ay  absrlo,absflo,0
                        
4f6f : 88                       dey
4f70 : 10df                     bpl tand10
4f72 : a003                     ldy #3
4f74 :                  tand11
                                set_ay  absANa,$ff
                        
4f7b : 394e19                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
4f92 : 88                       dey
4f93 : 10df                     bpl tand11
                        
4f95 : a206                     ldx #6      ;(zp,x)
4f97 : a003                     ldy #3
4f99 :                  tand12
                                set_ay  absANa,0
                        
4fa0 : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
                        
4fb6 : ca                       dex
4fb7 : ca                       dex
4fb8 : 88                       dey
4fb9 : 10de                     bpl tand12
4fbb : a206                     ldx #6
4fbd : a003                     ldy #3
4fbf :                  tand13
                                set_ay  absANa,$ff
                        
4fc6 : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
4fdc : ca                       dex
4fdd : ca                       dex
4fde : 88                       dey
4fdf : 10de                     bpl tand13
                        
4fe1 : a003                     ldy #3      ;(zp),y
4fe3 :                  tand14
                                set_ay  absANa,0
                        
4fea : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,0
                        
5000 : 88                       dey
5001 : 10e0                     bpl tand14
5003 : a003                     ldy #3
5005 :                  tand15
                                set_ay  absANa,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   98
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
500c : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
5022 : 88                       dey
5023 : 10e0                     bpl tand15
                                next_test
                        
                        
                        ; EOR
5034 : a203                     ldx #3          ;immediate - self modifying code
5036 : b520             teor    lda zpEO,x
5038 : 8d0c19                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                        
5042 : 200b19                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
                        
5059 : ca                       dex
505a : 10da                     bpl teor
505c : a203                     ldx #3
505e : b520             teor1   lda zpEO,x
5060 : 8d0c19                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                        
506a : 200b19                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
5081 : ca                       dex
5082 : 10da                     bpl teor1
                            
5084 : a203                     ldx #3      ;zp
5086 : b520             teor2    lda zpEO,x
5088 : 850c                     sta zpt
                                set_ax  absEOa,0
                        
5091 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
                        
50a7 : ca                       dex
50a8 : 10dc                     bpl teor2
50aa : a203                     ldx #3
50ac : b520             teor3   lda zpEO,x
50ae : 850c                     sta zpt
                                set_ax  absEOa,$ff
                        
50b7 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
50cd : ca                       dex
50ce : 10dc                     bpl teor3
                        
50d0 : a203                     ldx #3      ;abs
50d2 : b520             teor4   lda zpEO,x
50d4 : 8d0319                   sta abst
                                set_ax  absEOa,0
                        
50de : 4d0319                   eor abst
                                tst_ax  absrlo,absflo,0
                        
50f5 : ca                       dex
50f6 : 10da                     bpl teor4
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   99
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

50f8 : a203                     ldx #3
50fa : b520             teor5   lda zpEO,x
50fc : 8d0319                   sta abst
                                set_ax  absEOa,$ff
                        
5106 : 4d0319                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
511d : ca                       dex
511e : 1002                     bpl teor6
                        
5120 : a203                     ldx #3      ;zp,x
5122 :                  teor6
                                set_ax  absEOa,0
                        
5129 : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
                        
513f : ca                       dex
5140 : 10e0                     bpl teor6
5142 : a203                     ldx #3
5144 :                  teor7
                                set_ax  absEOa,$ff
                        
514b : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
5161 : ca                       dex
5162 : 10e0                     bpl teor7
                        
5164 : a203                     ldx #3      ;abs,x
5166 :                  teor8
                                set_ax  absEOa,0
                        
516d : 5d5219                   eor absEO,x
                                tst_ax  absrlo,absflo,0
                        
5184 : ca                       dex
5185 : 10df                     bpl teor8
5187 : a203                     ldx #3
5189 :                  teor9
                                set_ax  absEOa,$ff
                        
5190 : 5d5219                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
51a7 : ca                       dex
51a8 : 10df                     bpl teor9
                        
51aa : a003                     ldy #3      ;abs,y
51ac :                  teor10
                                set_ay  absEOa,0
                        
51b3 : 595219                   eor absEO,y
                                tst_ay  absrlo,absflo,0
                        
51ca : 88                       dey
51cb : 10df                     bpl teor10
51cd : a003                     ldy #3
51cf :                  teor11
                                set_ay  absEOa,$ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  100
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

51d6 : 595219                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
51ed : 88                       dey
51ee : 10df                     bpl teor11
                        
51f0 : a206                     ldx #6      ;(zp,x)
51f2 : a003                     ldy #3
51f4 :                  teor12
                                set_ay  absEOa,0
                        
51fb : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
                        
5211 : ca                       dex
5212 : ca                       dex
5213 : 88                       dey
5214 : 10de                     bpl teor12
5216 : a206                     ldx #6
5218 : a003                     ldy #3
521a :                  teor13
                                set_ay  absEOa,$ff
                        
5221 : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
5237 : ca                       dex
5238 : ca                       dex
5239 : 88                       dey
523a : 10de                     bpl teor13
                        
523c : a003                     ldy #3      ;(zp),y
523e :                  teor14
                                set_ay  absEOa,0
                        
5245 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
                        
525b : 88                       dey
525c : 10e0                     bpl teor14
525e : a003                     ldy #3
5260 :                  teor15
                                set_ay  absEOa,$ff
                        
5267 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
527d : 88                       dey
527e : 10e0                     bpl teor15
                                next_test
                        
                        
                        ; OR
528f : a203                     ldx #3          ;immediate - self modifying code
5291 : b518             tora    lda zpOR,x
5293 : 8d0f19                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                        
529d : 200e19                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
                        
52b4 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  101
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

52b5 : 10da                     bpl tora
52b7 : a203                     ldx #3
52b9 : b518             tora1   lda zpOR,x
52bb : 8d0f19                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                        
52c5 : 200e19                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
52dc : ca                       dex
52dd : 10da                     bpl tora1
                            
52df : a203                     ldx #3      ;zp
52e1 : b518             tora2   lda zpOR,x
52e3 : 850c                     sta zpt
                                set_ax  absORa,0
                        
52ec : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
                        
5302 : ca                       dex
5303 : 10dc                     bpl tora2
5305 : a203                     ldx #3
5307 : b518             tora3   lda zpOR,x
5309 : 850c                     sta zpt
                                set_ax  absORa,$ff
                        
5312 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
5328 : ca                       dex
5329 : 10dc                     bpl tora3
                        
532b : a203                     ldx #3      ;abs
532d : b518             tora4   lda zpOR,x
532f : 8d0319                   sta abst
                                set_ax  absORa,0
                        
5339 : 0d0319                   ora abst
                                tst_ax  absrlo,absflo,0
                        
5350 : ca                       dex
5351 : 10da                     bpl tora4
5353 : a203                     ldx #3
5355 : b518             tora5   lda zpOR,x
5357 : 8d0319                   sta abst
                                set_ax  absORa,$ff
                        
5361 : 0d0319                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
5378 : ca                       dex
5379 : 1002                     bpl tora6
                        
537b : a203                     ldx #3      ;zp,x
537d :                  tora6
                                set_ax  absORa,0
                        
5384 : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
                        
539a : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  102
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

539b : 10e0                     bpl tora6
539d : a203                     ldx #3
539f :                  tora7
                                set_ax  absORa,$ff
                        
53a6 : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
53bc : ca                       dex
53bd : 10e0                     bpl tora7
                        
53bf : a203                     ldx #3      ;abs,x
53c1 :                  tora8
                                set_ax  absORa,0
                        
53c8 : 1d4a19                   ora absOR,x
                                tst_ax  absrlo,absflo,0
                        
53df : ca                       dex
53e0 : 10df                     bpl tora8
53e2 : a203                     ldx #3
53e4 :                  tora9
                                set_ax  absORa,$ff
                        
53eb : 1d4a19                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
5402 : ca                       dex
5403 : 10df                     bpl tora9
                        
5405 : a003                     ldy #3      ;abs,y
5407 :                  tora10
                                set_ay  absORa,0
                        
540e : 194a19                   ora absOR,y
                                tst_ay  absrlo,absflo,0
                        
5425 : 88                       dey
5426 : 10df                     bpl tora10
5428 : a003                     ldy #3
542a :                  tora11
                                set_ay  absORa,$ff
                        
5431 : 194a19                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
5448 : 88                       dey
5449 : 10df                     bpl tora11
                        
544b : a206                     ldx #6      ;(zp,x)
544d : a003                     ldy #3
544f :                  tora12
                                set_ay  absORa,0
                        
5456 : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
                        
546c : ca                       dex
546d : ca                       dex
546e : 88                       dey
546f : 10de                     bpl tora12
5471 : a206                     ldx #6
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  103
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5473 : a003                     ldy #3
5475 :                  tora13
                                set_ay  absORa,$ff
                        
547c : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
5492 : ca                       dex
5493 : ca                       dex
5494 : 88                       dey
5495 : 10de                     bpl tora13
                        
5497 : a003                     ldy #3      ;(zp),y
5499 :                  tora14
                                set_ay  absORa,0
                        
54a0 : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
                        
54b6 : 88                       dey
54b7 : 10e0                     bpl tora14
54b9 : a003                     ldy #3
54bb :                  tora15
                                set_ay  absORa,$ff
                        
54c2 : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
54d8 : 88                       dey
54d9 : 10e0                     bpl tora15
                            if I_flag = 3
54db : 58                       cli
                            endif                
                                next_test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
54eb : d8                       cld
54ec : a20e                     ldx #ad2        ;for indexed test
54ee : a0ff                     ldy #$ff        ;max range
54f0 : a900                     lda #0          ;start with adding zeroes & no carry
54f2 : 850c                     sta adfc        ;carry in - for diag
54f4 : 850d                     sta ad1         ;operand 1 - accumulator
54f6 : 850e                     sta ad2         ;operand 2 - memory or immediate
54f8 : 8d0319                   sta ada2        ;non zp
54fb : 850f                     sta adrl        ;expected result bits 0-7
54fd : 8510                     sta adrh        ;expected result bit 8 (carry out)
54ff : a9ff                     lda #$ff        ;complemented operand 2 for subtract
5501 : 8512                     sta sb2
5503 : 8d0419                   sta sba2        ;non zp
5506 : a902                     lda #2          ;expected Z-flag
5508 : 8511                     sta adrf
550a : 18               tadd    clc             ;test with carry clear
550b : 200058                   jsr chkadd
550e : e60c                     inc adfc        ;now with carry
5510 : e60f                     inc adrl        ;result +1
5512 : 08                       php             ;save N & Z from low result
5513 : 08                       php
5514 : 68                       pla             ;accu holds expected flags
5515 : 2982                     and #$82        ;mask N & Z
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  104
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5517 : 28                       plp
5518 : d002                     bne tadd1
551a : e610                     inc adrh        ;result bit 8 - carry
551c : 0510             tadd1   ora adrh        ;merge C to expected flags
551e : 8511                     sta adrf        ;save expected flags except overflow
5520 : 38                       sec             ;test with carry set
5521 : 200058                   jsr chkadd
5524 : c60c                     dec adfc        ;same for operand +1 but no carry
5526 : e60d                     inc ad1
5528 : d0e0                     bne tadd        ;iterate op1
552a : a900                     lda #0          ;preset result to op2 when op1 = 0
552c : 8510                     sta adrh
552e : ee0319                   inc ada2
5531 : e60e                     inc ad2
5533 : 08                       php             ;save NZ as operand 2 becomes the new result
5534 : 68                       pla
5535 : 2982                     and #$82        ;mask N00000Z0
5537 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
5539 : c612                     dec sb2         ;complement subtract operand 2
553b : ce0419                   dec sba2
553e : a50e                     lda ad2         
5540 : 850f                     sta adrl
5542 : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
5553 : f8                       sed 
5554 : a20e                     ldx #ad2        ;for indexed test
5556 : a0ff                     ldy #$ff        ;max range
5558 : a999                     lda #$99        ;start with adding 99 to 99 with carry
555a : 850d                     sta ad1         ;operand 1 - accumulator
555c : 850e                     sta ad2         ;operand 2 - memory or immediate
555e : 8d0319                   sta ada2        ;non zp
5561 : 850f                     sta adrl        ;expected result bits 0-7
5563 : a901                     lda #1          ;set carry in & out
5565 : 850c                     sta adfc        ;carry in - for diag
5567 : 8510                     sta adrh        ;expected result bit 8 (carry out)
5569 : a900                     lda #0          ;complemented operand 2 for subtract
556b : 8512                     sta sb2
556d : 8d0419                   sta sba2        ;non zp
5570 : 38               tdad    sec             ;test with carry set
5571 : 206d56                   jsr chkdad
5574 : c60c                     dec adfc        ;now with carry clear
5576 : a50f                     lda adrl        ;decimal adjust result
5578 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
557a : c610                     dec adrh
557c : a999                     lda #$99
557e : 850f                     sta adrl
5580 : d012                     bne tdad3
5582 : 290f             tdad1   and #$f         ;lower nibble mask
5584 : d00c                     bne tdad2       ;no decimal adjust needed
5586 : c60f                     dec adrl        ;decimal adjust (?0-6)
5588 : c60f                     dec adrl
558a : c60f                     dec adrl
558c : c60f                     dec adrl
558e : c60f                     dec adrl
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  105
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5590 : c60f                     dec adrl
5592 : c60f             tdad2   dec adrl        ;result -1
5594 : 18               tdad3   clc             ;test with carry clear
5595 : 206d56                   jsr chkdad
5598 : e60c                     inc adfc        ;same for operand -1 but with carry
559a : a50d                     lda ad1         ;decimal adjust operand 1
559c : f015                     beq tdad5       ;iterate operand 2
559e : 290f                     and #$f         ;lower nibble mask
55a0 : d00c                     bne tdad4       ;skip decimal adjust
55a2 : c60d                     dec ad1         ;decimal adjust (?0-6)
55a4 : c60d                     dec ad1
55a6 : c60d                     dec ad1
55a8 : c60d                     dec ad1
55aa : c60d                     dec ad1
55ac : c60d                     dec ad1
55ae : c60d             tdad4   dec ad1         ;operand 1 -1
55b0 : 4c7055                   jmp tdad        ;iterate op1
                        
55b3 : a999             tdad5   lda #$99        ;precharge op1 max
55b5 : 850d                     sta ad1
55b7 : a50e                     lda ad2         ;decimal adjust operand 2
55b9 : f030                     beq tdad7       ;end of iteration
55bb : 290f                     and #$f         ;lower nibble mask
55bd : d018                     bne tdad6       ;skip decimal adjust
55bf : c60e                     dec ad2         ;decimal adjust (?0-6)
55c1 : c60e                     dec ad2
55c3 : c60e                     dec ad2
55c5 : c60e                     dec ad2
55c7 : c60e                     dec ad2
55c9 : c60e                     dec ad2
55cb : e612                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
55cd : e612                     inc sb2
55cf : e612                     inc sb2
55d1 : e612                     inc sb2
55d3 : e612                     inc sb2
55d5 : e612                     inc sb2
55d7 : c60e             tdad6   dec ad2         ;operand 2 -1
55d9 : e612                     inc sb2         ;complemented operand for subtract
55db : a512                     lda sb2
55dd : 8d0419                   sta sba2        ;copy as non zp operand
55e0 : a50e                     lda ad2
55e2 : 8d0319                   sta ada2        ;copy as non zp operand
55e5 : 850f                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
55e7 : e610                     inc adrh        ;result carry
55e9 : d085                     bne tdad        ;iterate op2
55eb :                  tdad7
                                next_test
                        
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
55fa : 18                       clc
55fb : d8                       cld
55fc : 08                       php
55fd : a955                     lda #$55
55ff : 6955                     adc #$55
5601 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after cld
                        
5608 : 18                       clc
5609 : f8                       sed
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  106
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

560a : 08                       php
560b : a955                     lda #$55
560d : 6955                     adc #$55
560f : c910                     cmp #$10
                                trap_ne         ;expected decimal result after sed
                        
5616 : d8                       cld
5617 : 28                       plp
5618 : a955                     lda #$55
561a : 6955                     adc #$55
561c : c910                     cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                        
5623 : 28                       plp
5624 : a955                     lda #$55
5626 : 6955                     adc #$55
5628 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                        
562f : 18                       clc
5630 : a956                     lda #hi bin_rti_ret ;emulated interrupt for rti
5632 : 48                       pha
5633 : a94d                     lda #lo bin_rti_ret
5635 : 48                       pha
5636 : 08                       php
5637 : f8                       sed
5638 : a956                     lda #hi dec_rti_ret ;emulated interrupt for rti
563a : 48                       pha
563b : a941                     lda #lo dec_rti_ret
563d : 48                       pha
563e : 08                       php
563f : d8                       cld
5640 : 40                       rti
5641 :                  dec_rti_ret
5641 : a955                     lda #$55
5643 : 6955                     adc #$55
5645 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                        
564c : 40                       rti
564d :                  bin_rti_ret        
564d : a955                     lda #$55
564f : 6955                     adc #$55
5651 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                        
                            endif
                            
5658 : ad0019                   lda test_case
565b : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
                        
5662 : a9f0                     lda #$f0        ;mark opcode testing complete
5664 : 8d0019                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  107
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
566a : 4c001b                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
566d :                  chkdad
                        ; decimal ADC / SBC zp
566d : 08                       php             ;save carry for subtract
566e : a50d                     lda ad1
5670 : 650e                     adc ad2         ;perform add
5672 : 08                       php          
5673 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
567a : 68                       pla             ;check flags
567b : 2901                     and #1          ;mask carry
567d : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
5684 : 28                       plp
5685 : 08                       php             ;save carry for next add
5686 : a50d                     lda ad1
5688 : e512                     sbc sb2         ;perform subtract
568a : 08                       php          
568b : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5692 : 68                       pla             ;check flags
5693 : 2901                     and #1          ;mask carry
5695 : c510                     cmp adrh
                                trap_ne         ;bad flags
                        
569c : 28                       plp
                        ; decimal ADC / SBC abs
569d : 08                       php             ;save carry for subtract
569e : a50d                     lda ad1
56a0 : 6d0319                   adc ada2        ;perform add
56a3 : 08                       php          
56a4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
56ab : 68                       pla             ;check flags
56ac : 2901                     and #1          ;mask carry
56ae : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
56b5 : 28                       plp
56b6 : 08                       php             ;save carry for next add
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  108
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

56b7 : a50d                     lda ad1
56b9 : ed0419                   sbc sba2        ;perform subtract
56bc : 08                       php          
56bd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
56c4 : 68                       pla             ;check flags
56c5 : 2901                     and #1          ;mask carry
56c7 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
56ce : 28                       plp
                        ; decimal ADC / SBC #
56cf : 08                       php             ;save carry for subtract
56d0 : a50e                     lda ad2
56d2 : 8d1219                   sta ex_adci+1   ;set ADC # operand
56d5 : a50d                     lda ad1
56d7 : 201119                   jsr ex_adci     ;execute ADC # in RAM
56da : 08                       php          
56db : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
56e2 : 68                       pla             ;check flags
56e3 : 2901                     and #1          ;mask carry
56e5 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
56ec : 28                       plp
56ed : 08                       php             ;save carry for next add
56ee : a512                     lda sb2
56f0 : 8d1519                   sta ex_sbci+1   ;set SBC # operand
56f3 : a50d                     lda ad1
56f5 : 201419                   jsr ex_sbci     ;execute SBC # in RAM
56f8 : 08                       php          
56f9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5700 : 68                       pla             ;check flags
5701 : 2901                     and #1          ;mask carry
5703 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
570a : 28                       plp
                        ; decimal ADC / SBC zp,x
570b : 08                       php             ;save carry for subtract
570c : a50d                     lda ad1
570e : 7500                     adc 0,x         ;perform add
5710 : 08                       php          
5711 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5718 : 68                       pla             ;check flags
5719 : 2901                     and #1          ;mask carry
571b : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
5722 : 28                       plp
5723 : 08                       php             ;save carry for next add
5724 : a50d                     lda ad1
5726 : f504                     sbc sb2-ad2,x   ;perform subtract
5728 : 08                       php          
5729 : c50f                     cmp adrl        ;check result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  109
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne         ;bad result
                        
5730 : 68                       pla             ;check flags
5731 : 2901                     and #1          ;mask carry
5733 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
573a : 28                       plp
                        ; decimal ADC / SBC abs,x
573b : 08                       php             ;save carry for subtract
573c : a50d                     lda ad1
573e : 7df518                   adc ada2-ad2,x  ;perform add
5741 : 08                       php          
5742 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5749 : 68                       pla             ;check flags
574a : 2901                     and #1          ;mask carry
574c : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
5753 : 28                       plp
5754 : 08                       php             ;save carry for next add
5755 : a50d                     lda ad1
5757 : fdf618                   sbc sba2-ad2,x  ;perform subtract
575a : 08                       php          
575b : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5762 : 68                       pla             ;check flags
5763 : 2901                     and #1          ;mask carry
5765 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
576c : 28                       plp
                        ; decimal ADC / SBC abs,y
576d : 08                       php             ;save carry for subtract
576e : a50d                     lda ad1
5770 : 790418                   adc ada2-$ff,y  ;perform add
5773 : 08                       php          
5774 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
577b : 68                       pla             ;check flags
577c : 2901                     and #1          ;mask carry
577e : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
5785 : 28                       plp
5786 : 08                       php             ;save carry for next add
5787 : a50d                     lda ad1
5789 : f90518                   sbc sba2-$ff,y  ;perform subtract
578c : 08                       php          
578d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5794 : 68                       pla             ;check flags
5795 : 2901                     and #1          ;mask carry
5797 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
579e : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  110
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; decimal ADC / SBC (zp,x)
579f : 08                       php             ;save carry for subtract
57a0 : a50d                     lda ad1
57a2 : 6144                     adc (lo adi2-ad2,x) ;perform add
57a4 : 08                       php          
57a5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
57ac : 68                       pla             ;check flags
57ad : 2901                     and #1          ;mask carry
57af : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
57b6 : 28                       plp
57b7 : 08                       php             ;save carry for next add
57b8 : a50d                     lda ad1
57ba : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
57bc : 08                       php          
57bd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
57c4 : 68                       pla             ;check flags
57c5 : 2901                     and #1          ;mask carry
57c7 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
57ce : 28                       plp
                        ; decimal ADC / SBC (abs),y
57cf : 08                       php             ;save carry for subtract
57d0 : a50d                     lda ad1
57d2 : 7156                     adc (adiy2),y   ;perform add
57d4 : 08                       php          
57d5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
57dc : 68                       pla             ;check flags
57dd : 2901                     and #1          ;mask carry
57df : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
57e6 : 28                       plp
57e7 : 08                       php             ;save carry for next add
57e8 : a50d                     lda ad1
57ea : f158                     sbc (sbiy2),y   ;perform subtract
57ec : 08                       php          
57ed : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
57f4 : 68                       pla             ;check flags
57f5 : 2901                     and #1          ;mask carry
57f7 : c510                     cmp adrh
                                trap_ne         ;bad carry
                        
57fe : 28                       plp
57ff : 60                       rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
5800 : a511             chkadd  lda adrf        ;add V-flag if overflow
5802 : 2983                     and #$83        ;keep N-----ZC / clear V
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  111
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5804 : 48                       pha
5805 : a50d                     lda ad1         ;test sign unequal between operands
5807 : 450e                     eor ad2
5809 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
580b : a50d                     lda ad1         ;test sign equal between operands and result
580d : 450f                     eor adrl
580f : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
5811 : 68                       pla
5812 : 0940                     ora #$40        ;set V
5814 : 48                       pha
5815 : 68               ckad1   pla
5816 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
5818 : 08                       php             ;save carry for subtract
5819 : a50d                     lda ad1
581b : 650e                     adc ad2         ;perform add
581d : 08                       php          
581e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5825 : 68                       pla             ;check flags
5826 : 29c3                     and #$c3        ;mask NV----ZC
5828 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
582f : 28                       plp
5830 : 08                       php             ;save carry for next add
5831 : a50d                     lda ad1
5833 : e512                     sbc sb2         ;perform subtract
5835 : 08                       php          
5836 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
583d : 68                       pla             ;check flags
583e : 29c3                     and #$c3        ;mask NV----ZC
5840 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5847 : 28                       plp
                        ; binary ADC / SBC abs
5848 : 08                       php             ;save carry for subtract
5849 : a50d                     lda ad1
584b : 6d0319                   adc ada2        ;perform add
584e : 08                       php          
584f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5856 : 68                       pla             ;check flags
5857 : 29c3                     and #$c3        ;mask NV----ZC
5859 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5860 : 28                       plp
5861 : 08                       php             ;save carry for next add
5862 : a50d                     lda ad1
5864 : ed0419                   sbc sba2        ;perform subtract
5867 : 08                       php          
5868 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
586f : 68                       pla             ;check flags
5870 : 29c3                     and #$c3        ;mask NV----ZC
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  112
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5872 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5879 : 28                       plp
                        ; binary ADC / SBC #
587a : 08                       php             ;save carry for subtract
587b : a50e                     lda ad2
587d : 8d1219                   sta ex_adci+1   ;set ADC # operand
5880 : a50d                     lda ad1
5882 : 201119                   jsr ex_adci     ;execute ADC # in RAM
5885 : 08                       php          
5886 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
588d : 68                       pla             ;check flags
588e : 29c3                     and #$c3        ;mask NV----ZC
5890 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5897 : 28                       plp
5898 : 08                       php             ;save carry for next add
5899 : a512                     lda sb2
589b : 8d1519                   sta ex_sbci+1   ;set SBC # operand
589e : a50d                     lda ad1
58a0 : 201419                   jsr ex_sbci     ;execute SBC # in RAM
58a3 : 08                       php          
58a4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
58ab : 68                       pla             ;check flags
58ac : 29c3                     and #$c3        ;mask NV----ZC
58ae : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
58b5 : 28                       plp
                        ; binary ADC / SBC zp,x
58b6 : 08                       php             ;save carry for subtract
58b7 : a50d                     lda ad1
58b9 : 7500                     adc 0,x         ;perform add
58bb : 08                       php          
58bc : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
58c3 : 68                       pla             ;check flags
58c4 : 29c3                     and #$c3        ;mask NV----ZC
58c6 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
58cd : 28                       plp
58ce : 08                       php             ;save carry for next add
58cf : a50d                     lda ad1
58d1 : f504                     sbc sb2-ad2,x   ;perform subtract
58d3 : 08                       php          
58d4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
58db : 68                       pla             ;check flags
58dc : 29c3                     and #$c3        ;mask NV----ZC
58de : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
58e5 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  113
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; binary ADC / SBC abs,x
58e6 : 08                       php             ;save carry for subtract
58e7 : a50d                     lda ad1
58e9 : 7df518                   adc ada2-ad2,x  ;perform add
58ec : 08                       php          
58ed : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
58f4 : 68                       pla             ;check flags
58f5 : 29c3                     and #$c3        ;mask NV----ZC
58f7 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
58fe : 28                       plp
58ff : 08                       php             ;save carry for next add
5900 : a50d                     lda ad1
5902 : fdf618                   sbc sba2-ad2,x  ;perform subtract
5905 : 08                       php          
5906 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
590d : 68                       pla             ;check flags
590e : 29c3                     and #$c3        ;mask NV----ZC
5910 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5917 : 28                       plp
                        ; binary ADC / SBC abs,y
5918 : 08                       php             ;save carry for subtract
5919 : a50d                     lda ad1
591b : 790418                   adc ada2-$ff,y  ;perform add
591e : 08                       php          
591f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5926 : 68                       pla             ;check flags
5927 : 29c3                     and #$c3        ;mask NV----ZC
5929 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5930 : 28                       plp
5931 : 08                       php             ;save carry for next add
5932 : a50d                     lda ad1
5934 : f90518                   sbc sba2-$ff,y  ;perform subtract
5937 : 08                       php          
5938 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
593f : 68                       pla             ;check flags
5940 : 29c3                     and #$c3        ;mask NV----ZC
5942 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5949 : 28                       plp
                        ; binary ADC / SBC (zp,x)
594a : 08                       php             ;save carry for subtract
594b : a50d                     lda ad1
594d : 6144                     adc (lo adi2-ad2,x) ;perform add
594f : 08                       php          
5950 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  114
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5957 : 68                       pla             ;check flags
5958 : 29c3                     and #$c3        ;mask NV----ZC
595a : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5961 : 28                       plp
5962 : 08                       php             ;save carry for next add
5963 : a50d                     lda ad1
5965 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
5967 : 08                       php          
5968 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
596f : 68                       pla             ;check flags
5970 : 29c3                     and #$c3        ;mask NV----ZC
5972 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5979 : 28                       plp
                        ; binary ADC / SBC (abs),y
597a : 08                       php             ;save carry for subtract
597b : a50d                     lda ad1
597d : 7156                     adc (adiy2),y   ;perform add
597f : 08                       php          
5980 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
5987 : 68                       pla             ;check flags
5988 : 29c3                     and #$c3        ;mask NV----ZC
598a : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
5991 : 28                       plp
5992 : 08                       php             ;save carry for next add
5993 : a50d                     lda ad1
5995 : f158                     sbc (sbiy2),y   ;perform subtract
5997 : 08                       php          
5998 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
599f : 68                       pla             ;check flags
59a0 : 29c3                     and #$c3        ;mask NV----ZC
59a2 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
59a9 : 28                       plp
59aa : 60                       rts
                        
                        ; target for the jump absolute test
59ab : 88                       dey
59ac : 88                       dey
59ad :                  test_far
59ad : 08                       php             ;either SP or Y count will fail, if we do not hit
59ae : 88                       dey
59af : 88                       dey
59b0 : 88                       dey
59b1 : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  115
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                trap_eq 
                        
59c6 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
                        
59cd : e041                     cpx #'A'
                                trap_ne        
                        
59d4 : c04f                     cpy #('R'-3)
                                trap_ne
                        
59db : 48                       pha             ;save a,x
59dc : 8a                       txa
59dd : 48                       pha
59de : ba                       tsx
59df : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
59e6 : 68                       pla             ;restore x
59e7 : aa                       tax
                                set_stat $ff
                        
59ec : 68                       pla             ;restore a
59ed : e8                       inx             ;return registers with modifications
59ee : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
59f0 : 4cf320                   jmp far_ret
                                
                        ; target for the jump indirect test
59f3 : 00                       align
59f4 : fd59             ptr_tst_ind dw test_ind
59f6 : 7b21             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
                        
59fb : 88                       dey
59fc : 88                       dey
59fd :                  test_ind
59fd : 08                       php             ;either SP or Y count will fail, if we do not hit
59fe : 88                       dey
59ff : 88                       dey
5a00 : 88                       dey
5a01 : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq 
                        
5a16 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
                        
5a1d : e04e                     cpx #'N'
                                trap_ne        
                        
5a24 : c041                     cpy #('D'-3)
                                trap_ne
                        
5a2b : 48                       pha             ;save a,x
5a2c : 8a                       txa
5a2d : 48                       pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  116
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5a2e : ba                       tsx
5a2f : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
5a36 : 68                       pla             ;restore x
5a37 : aa                       tax
                                set_stat $ff
                        
5a3c : 68                       pla             ;restore a
5a3d : e8                       inx             ;return registers with modifications
5a3e : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
5a40 : 6cf659                   jmp (ptr_ind_ret)
                                trap            ;runover protection
                        
                        
                        ; target for the jump subroutine test
5a46 : 88                       dey
5a47 : 88                       dey
5a48 :                  test_jsr
5a48 : 08                       php             ;either SP or Y count will fail, if we do not hit
5a49 : 88                       dey
5a4a : 88                       dey
5a4b : 88                       dey
5a4c : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq 
                        
5a61 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
                        
5a68 : e053                     cpx #'S'
                                trap_ne        
                        
5a6f : c04f                     cpy #('R'-3)
                                trap_ne
                        
5a76 : 48                       pha             ;save a,x
5a77 : 8a                       txa
5a78 : 48                       pha       
5a79 : ba                       tsx             ;sp -4? (return addr,a,x)
5a7a : e0fb                     cpx #$fb
                                trap_ne
                        
5a81 : adff01                   lda $1ff        ;propper return on stack
5a84 : c921                     cmp #hi(jsr_ret)
                                trap_ne
                        
5a8b : adfe01                   lda $1fe
5a8e : c9cc                     cmp #lo(jsr_ret)
                                trap_ne
                        
                                set_stat $ff
                        
5a99 : 68                       pla             ;pull x,a
5a9a : aa                       tax
5a9b : 68                       pla
5a9c : e8                       inx             ;return registers with modifications
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  117
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5a9d : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
5a9f : 60                       rts
                                trap            ;runover protection
                        
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
5aa3 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
                        
5aa6 :                  res_trap
                                trap            ;unexpected RESET
                        
                                
5aa9 : 88                       dey
5aaa : 88                       dey
5aab :                  irq_trap                ;BRK test or unextpected BRK or IRQ
5aab : 08                       php             ;either SP or Y count will fail, if we do not hit
5aac : 88                       dey
5aad : 88                       dey
5aae : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
5aaf : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
                        
5ab6 : e052                     cpx #'R'
                                trap_ne        
                        
5abd : c048                     cpy #('K'-3)
                                trap_ne
                        
5ac4 : 850a                     sta irq_a       ;save registers during break test
5ac6 : 860b                     stx irq_x
5ac8 : ba                       tsx             ;test break on stack
5ac9 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
                        
                                trap_ne         ; - no break flag on stack
                        
5ad3 : 68                       pla
5ad4 : c934                     cmp #fai        ;should have added interrupt disable
                                trap_ne
                        
5adb : ba                       tsx
5adc : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
                        
5ae3 : adff01                   lda $1ff        ;propper return on stack
5ae6 : c922                     cmp #hi(brk_ret)
                                trap_ne
                        
5aed : adfe01                   lda $1fe
5af0 : c929                     cmp #lo(brk_ret)
                                trap_ne
                        
                                set_stat $ff
                        
5afb : a60b                     ldx irq_x
5afd : e8                       inx             ;return registers with modifications
5afe : a50a                     lda irq_a
5b00 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  118
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5b02 : 40                       rti
                                trap            ;runover protection
                        
                                
                            if report = 1
                                include "report.i65"
                        ;**** report 6502 funtional test errors to standard I/O ****
                        ;
                        ;this include file is part of the 6502 functional tests
                        ;it is used when you configure report = 1 in the tests
                        ;
                        ;to adopt the standard output vectors of your test environment
                        ;you must modify the rchar and rget subroutines in this include
                        ;
                        ;I/O hardware may have to be initialized in report_init
                        
                        ; For outputting text in MODE 7
0070 =                  line_ptr = $70
0072 =                  line_offset = $72
                        
                        ;print message macro - \1 = message location
                        rprt    macro
                                ldx #0
                                lda \1
                        loop\?
                                jsr rchar
                                inx
                                lda \1,x
                                bne loop\?
                                endm
                        
                        ;initialize I/O as required (example: configure & enable ACIA)
5b06 :                  report_init
                                ;nothing to initialize
                                rprt rmsg_start
                        
5b14 : 60                       rts
                                
                        ;show stack (with saved registers), zeropage and absolute memory workspace
                        ;after an error was trapped in the test program
5b15 :                  report_error
                        ;save registers
5b15 : 08                       php
5b16 : 48                       pha
5b17 : 8a                       txa
5b18 : 48                       pha
5b19 : 98                       tya
5b1a : 48                       pha
5b1b : d8                       cld
                        ;show stack with index to registers at error
                                rprt rmsg_stack
                        
5b2a : ba                       tsx
5b2b : e8                       inx
5b2c : a901                     lda #1      ;address high
5b2e : 20e85b                   jsr rhex
5b31 : 8a                       txa         ;address low
5b32 : 20e85b                   jsr rhex
5b35 : 20e45b           rstack  jsr rspace
5b38 : bd0001                   lda $100,x  ;stack data
5b3b : 20e85b                   jsr rhex
5b3e : e8                       inx
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  119
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5b3f : d0f4                     bne rstack
5b41 : 20db5b                   jsr rcrlf   ;new line
                        ;show zero page workspace
5b44 : a900                     lda #0
5b46 : 20e85b                   jsr rhex
5b49 : a90c                     lda #zpt
5b4b : aa                       tax
5b4c : 20e85b                   jsr rhex
5b4f : 20e45b           rzp     jsr rspace
5b52 : b500                     lda 0,x
5b54 : 20e85b                   jsr rhex
5b57 : e8                       inx
5b58 : e013                     cpx #zp_bss
5b5a : d0f3                     bne rzp
5b5c : 20db5b                   jsr rcrlf
                        ;show absolute workspace
5b5f : a919                     lda #hi(data_segment)
5b61 : 20e85b                   jsr rhex
5b64 : a900                     lda #lo(data_segment)
5b66 : 20e85b                   jsr rhex
5b69 : a200                     ldx #0
5b6b : 20e45b           rabs    jsr rspace
5b6e : bd0019                   lda data_segment,x
5b71 : 20e85b                   jsr rhex
5b74 : e8                       inx
5b75 : e008                     cpx #(data_bss-data_segment)
5b77 : d0f2                     bne rabs
                        ;ask to continue
                                rprt rmsg_cont
                        
5b87 : 20ce5b           rerr1   jsr rget
5b8a : c943                     cmp #'C'
5b8c : d0f9                     bne rerr1        
                        ;restore registers
5b8e : 68                       pla
5b8f : a8                       tay
5b90 : 68                       pla
5b91 : aa                       tax
5b92 : 68                       pla 
5b93 : 28                       plp
5b94 : 60                       rts   
                        
                        ;show test has ended, ask to repeat
5b95 :                  report_success
                            if rep_int = 1
                                rprt rmsg_priority
                                lda data_segment    ;show interrupt sequence
                                jsr rhex
                                jsr rspace
                                lda data_segment+1
                                jsr rhex
                                jsr rspace
                                lda data_segment+2
                                jsr rhex
                            endif
                                rprt rmsg_success
                        
5ba3 : 78                       sei
5ba4 : a915                     lda #21
5ba6 : a200                     ldx #0
5ba8 : 20f4ff                   jsr $fff4 ; clear keyboard buffer
5bab : a900                     lda #0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  120
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5bad : 8570                     sta $70
5baf :                  kbd_loop
5baf : a670                     ldx $70
5bb1 : bc575c                   ldy rmsg_kbd,x
5bb4 : d00d                     bne kbd_input
5bb6 : 58                       cli
5bb7 : a915                     lda #21
5bb9 : 20eeff                   jsr $ffee ; disable VDU
5bbc : a26b                     ldx #lo(rmsg_basic)
5bbe : a05c                     ldy #hi(rmsg_basic)
5bc0 : 4cf7ff                   jmp $fff7
5bc3 :                  kbd_input
5bc3 : a98a                     lda #138
5bc5 : a200                     ldx #0
5bc7 : 20f4ff                   jsr $fff4 ; put y in keyboard buffer
5bca : e670                     inc $70
5bcc : d0e1                     bne kbd_loop
                        ;rsuc1   jsr rget
                        ;        cmp #'R'
                        ;        bne rsuc1
                        ;        rts
                        
                        ;input subroutine
                        ;get a character from standard input 
                        ;adjust according to the needs in your test environment
5bce :                  rget                ;get character in A
5bce : 4cce5b                   jmp rget ; no keyboard input so hang
                        ;rget1
                        ;        lda $bff1   ;wait RDRF
                        ;        and #8
                        ;        beq rget1
                        ;not a real ACIA - so RDRF is not checked
5bd1 : adf0bf                   lda $bff0   ;read acia rx reg
                        ;the load can be replaced by a call to a kernal routine
                        ;        jsr $ffcf   ;example: CHRIN for a C64
5bd4 : c961                     cmp #'a'    ;lower case
5bd6 : 9002                     bcc rget1
5bd8 : 295f                     and #$5f    ;convert to upper case
5bda : 60               rget1   rts
                        
                        ;output subroutines
5bdb : a90a             rcrlf   lda #10
5bdd : 20fc5b                   jsr rchar
5be0 : a90d                     lda #13
5be2 : d018                     bne rchar
                        
5be4 : a920             rspace  lda #' '
5be6 : d014                     bne rchar
                                
5be8 : 48               rhex    pha         ;report hex byte in A
5be9 : 4a                       lsr a       ;high nibble first
5bea : 4a                       lsr a
5beb : 4a                       lsr a
5bec : 4a                       lsr a
5bed : 20f35b                   jsr rnib
5bf0 : 68                       pla         ;now low nibble
5bf1 : 290f                     and #$f
                        
5bf3 : 18               rnib    clc         ;report nibble in A
5bf4 : 6930                     adc #'0'    ;make printable 0-9
5bf6 : c93a                     cmp #'9'+1
5bf8 : 9002                     bcc rchar
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  121
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5bfa : 6906                     adc #6      ;make printable A-F
                        
                        ;send a character to standard output 
                        ;adjust according to the needs in your test environment
                        ;register X needs to be preserved!
5bfc :                  rchar               ;report character in A
5bfc : 4ceeff                   jmp $ffee
                        
5bff :                  rmsg_start
5bff : 0a0d5374617274..         db  10,13,"Started testing",10,13,0
5c13 :                  rmsg_stack
5c13 : 0a0d7265677320..         db  10,13,"regs Y  X  A  PS PCLPCH",10,13,0
5c2f :                  rmsg_cont
5c2f : 0a0d5465737420..         db  10,13,"Test failed",10,13,0
5c3f :                  rmsg_success
5c3f : 0a0d416c6c2074..         db  10,13,"All tests completed",10,13,0
5c57 :                  rmsg_kbd
5c57 : 41253d310d4348..         db  "A%=1",13,"CHAIN",34,"$.MENU",34,13,0
5c6b :                  rmsg_basic
5c6b : 42415349430d             db  "BASIC",13
                        
                            if rep_int = 1
                        rmsg_priority
                                db  10,13,"interrupt sequence (NMI IRQ BRK) ",0
                            endif
                           
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  122
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  123
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
                                org $fffa       ;vectors
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                            endif
                        
5c6b =                          end start
                                    
No errors in pass 2.
Wrote binary from address $0000 through $5c70.
Total size 23665 bytes.
Program start address is at $1b00 (6912).
